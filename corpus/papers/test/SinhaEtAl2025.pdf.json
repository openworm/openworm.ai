{"pages":[{"page":1,"text":"                                                                                                                                                                                                                                                                                                                                                                                                                                  TOOLS AND RESOURCES\n                                                                                                             The NeuroML ecosystem for standardized                                                                 The NeuroML ecosystem for standardized                                                                 The NeuroML ecosystem for standardized                                                                 The NeuroML ecosystem for standardized\n                                                                                                             multi-scale modeling in neuroscience                                                                   multi-scale modeling in neuroscience                                                                   multi-scale modeling in neuroscience                                                                   multi-scale modeling in neuroscience\n                                                                                                             Ankur Sinha                                                                                            Ankur Sinha                                                                                            Ankur Sinha                                                                                            Ankur Sinha , Padraig Gleeson * , Bóris Marin , Salvador Dura-Bernal\n                                                                                                                                                                                                                                                                                                                                                                                                                                  1†  1 †  2  3,4,\n                                                                                                                                                                                                                                                                                                                                                                                                                                  Sotirios Panagiotou⁵, Sharon Crook⁶, Matteo Cantarelli⁷, Robert C Cannon⁸,\n                                                                                                                                                                                                                                                                                                                                                                                                                                  Andrew P Davison⁹, Harsha Gurnani¹⁰, Robin Angus Silver¹*\n                                                                                                             1Department of Neuroscience, Physiology and Pharmacology, University College                           1Department of Neuroscience, Physiology and Pharmacology, University College                           1Department of Neuroscience, Physiology and Pharmacology, University College                           1Department of Neuroscience, Physiology and Pharmacology, University College\n                                                                                                                                                                                                                                                                                                                                                                                                                                  London, London, United Kingdom; ²Universidade Federal do ABC, São Bernardo\n                                                                                                                                                                                                                                                                                                                                                                                                                                  do Campo, Brazil; ³SUNY Downstate Medical Center, Brooklyn, United States; ⁴,\n                                                                                                             Center for Biomedical Imaging and Neuromodulation, Nathan Kline Institute for                          Center for Biomedical Imaging and Neuromodulation, Nathan Kline Institute for                          Center for Biomedical Imaging and Neuromodulation, Nathan Kline Institute for                          Center for Biomedical Imaging and Neuromodulation, Nathan Kline Institute for\n                                                                                                             Psychiatric Research, Orangeburg, United States; ⁵Erasmus University Rotterdam,                        Psychiatric Research, Orangeburg, United States; ⁵Erasmus University Rotterdam,                        Psychiatric Research, Orangeburg, United States; ⁵Erasmus University Rotterdam,                        Psychiatric Research, Orangeburg, United States; ⁵Erasmus University Rotterdam,\n                                                                                                                                                                                                                                                                                                                                                                                                                                  Rotterdam, Netherlands; ⁶Arizona State University, Tempe, United States;\n                                                                                                             7MetaCell Ltd, Cambridge, United States; 8Opus2 International Ltd, London,                             7MetaCell Ltd, Cambridge, United States; 8Opus2 International Ltd, London,                             7MetaCell Ltd, Cambridge, United States; 8Opus2 International Ltd, London,                             7MetaCell Ltd, Cambridge, United States; 8Opus2 International Ltd, London,\n                                                                                                                                                                                                                                                                                                                                                                                                                                  CNRS,  Gif‐ Sur‐ Yvette,  France;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  United Kingdom; ⁹  10University of Washington,\n                                                                                                                                                                                                                                                                                                                                                                                                                                  Seattle, United States\n                                                                                                             eLife Assessment                                                                                       eLife Assessment                                                                                       eLife Assessment                                                                                       eLife Assessment\n*For correspondence:                *For correspondence:                *For correspondence:                 This important work presents a consolidated overview of the NeuroML2 open community standard           This important work presents a consolidated overview of the NeuroML2 open community standard           This important work presents a consolidated overview of the NeuroML2 open community standard           This important work presents a consolidated overview of the NeuroML2 open community standard\np.gleeson@ucl.ac.uk (PG);           p.gleeson@ucl.ac.uk (PG);           p.gleeson@ucl.ac.uk (PG);            and provides convincing evidence for its central role within a broader software ecosystem for the      and provides convincing evidence for its central role within a broader software ecosystem for the      and provides convincing evidence for its central role within a broader software ecosystem for the      and provides convincing evidence for its central role within a broader software ecosystem for the\na.silver@ucl.ac.uk (RAS)            a.silver@ucl.ac.uk (RAS)            a.silver@ucl.ac.uk (RAS)             development of neuronal models that are open, shareable, reproducible, and interoperable. A major      development of neuronal models that are open, shareable, reproducible, and interoperable. A major      development of neuronal models that are open, shareable, reproducible, and interoperable. A major      development of neuronal models that are open, shareable, reproducible, and interoperable. A major\n                                                                        †These authors contributed           strength of the work is the continued development over more than two decades to establish, main-       strength of the work is the continued development over more than two decades to establish, main-       strength of the work is the continued development over more than two decades to establish, main-       strength of the work is the continued development over more than two decades to establish, main-\nequally to this work                equally to this work                equally to this work                 tain, and adapt this standard to meet the evolving needs of the ﬁeld. This work is of broad interest   tain, and adapt this standard to meet the evolving needs of the ﬁeld. This work is of broad interest   tain, and adapt this standard to meet the evolving needs of the ﬁeld. This work is of broad interest   tain, and adapt this standard to meet the evolving needs of the ﬁeld. This work is of broad interest\n                                                                                                             to the sub-                                                                                            to the sub-                                                                                            to the sub-                                                                                            to the sub-\nCompeting interest: See page        Competing interest: See page        Competing interest: See page                                                                                                                                                                                                                                                                                                                              cellular, cellular, computational, and systems neuroscience communities undertaking\n38                                  38                                  38                                   studies involving theory, modeling, and simulation.                                                    studies involving theory, modeling, and simulation.                                                    studies involving theory, modeling, and simulation.                                                    studies involving theory, modeling, and simulation.\nFunding: See page 38                Funding: See page 38                Funding: See page 38\nPreprint posted                     Preprint posted                     Preprint posted\n11 December 2023                    11 December 2023                    11 December 2023                     Abstract Data-driven models of neurons and circuits are important for understanding how                Abstract Data-driven models of neurons and circuits are important for understanding how                Abstract Data-driven models of neurons and circuits are important for understanding how                Abstract Data-driven models of neurons and circuits are important for understanding how\nSent for Review                     Sent for Review                     Sent for Review                      the properties of membrane conductances, synapses, dendrites, and the anatomical connectivity          the properties of membrane conductances, synapses, dendrites, and the anatomical connectivity          the properties of membrane conductances, synapses, dendrites, and the anatomical connectivity          the properties of membrane conductances, synapses, dendrites, and the anatomical connectivity\n31 January 2024                     31 January 2024                     31 January 2024                      between neurons generate the complex dynamical behaviors of brain circuits in health and disease.      between neurons generate the complex dynamical behaviors of brain circuits in health and disease.      between neurons generate the complex dynamical behaviors of brain circuits in health and disease.      between neurons generate the complex dynamical behaviors of brain circuits in health and disease.\nReviewed preprint posted            Reviewed preprint posted            Reviewed preprint posted             However, the inherent complexity of these biological processes makes the construction and reuse        However, the inherent complexity of these biological processes makes the construction and reuse        However, the inherent complexity of these biological processes makes the construction and reuse        However, the inherent complexity of these biological processes makes the construction and reuse\n03 May 2024                         03 May 2024                         03 May 2024\nReviewed preprint revised           Reviewed preprint revised           Reviewed preprint revised            of biologically detailed models challenging. A wide range of tools have been developed to aid their    of biologically detailed models challenging. A wide range of tools have been developed to aid their    of biologically detailed models challenging. A wide range of tools have been developed to aid their    of biologically detailed models challenging. A wide range of tools have been developed to aid their\n30 October 2024                     30 October 2024                     30 October 2024                      construction and simulation, but differences in design and internal representation act as technical    construction and simulation, but differences in design and internal representation act as technical    construction and simulation, but differences in design and internal representation act as technical    construction and simulation, but differences in design and internal representation act as technical\nVersion of Record published         Version of Record published         Version of Record published          barriers to those who wish to use data-driven models in their research workﬂows. NeuroML, a model      barriers to those who wish to use data-driven models in their research workﬂows. NeuroML, a model      barriers to those who wish to use data-driven models in their research workﬂows. NeuroML, a model      barriers to those who wish to use data-driven models in their research workﬂows. NeuroML, a model\n10 January 2025                     10 January 2025                     10 January 2025                      description language for computational neuroscience, was developed to address this fragmentation       description language for computational neuroscience, was developed to address this fragmentation       description language for computational neuroscience, was developed to address this fragmentation       description language for computational neuroscience, was developed to address this fragmentation\nReviewing Editor: Eilif B Muller,   Reviewing Editor: Eilif B Muller,   Reviewing Editor: Eilif B Muller,    in modeling tools. Since its inception, NeuroML has evolved into a mature community standard           in modeling tools. Since its inception, NeuroML has evolved into a mature community standard           in modeling tools. Since its inception, NeuroML has evolved into a mature community standard           in modeling tools. Since its inception, NeuroML has evolved into a mature community standard\nUniversity of Montreal, Canada      University of Montreal, Canada      University of Montreal, Canada       that encompasses a wide range of model types and approaches in computational neuroscience. It          that encompasses a wide range of model types and approaches in computational neuroscience. It          that encompasses a wide range of model types and approaches in computational neuroscience. It          that encompasses a wide range of model types and approaches in computational neuroscience. It\n                                                                                                             has enabled the development of a large ecosystem of interoperable open-                                has enabled the development of a large ecosystem of interoperable open-                                has enabled the development of a large ecosystem of interoperable open-                                has enabled the development of a large ecosystem of interoperable open-\n                                                                         Copyright Sinha, Gleeson                                                                                                                                                                                                                                                                                                                                 source software tools for\net al. This article is distributed  et al. This article is distributed  et al. This article is distributed   the creation, visualization, validation, and simulation of data-driven models. Here, we describe how   the creation, visualization, validation, and simulation of data-driven models. Here, we describe how   the creation, visualization, validation, and simulation of data-driven models. Here, we describe how   the creation, visualization, validation, and simulation of data-driven models. Here, we describe how\nunder the terms of the Creative     under the terms of the Creative     under the terms of the Creative      the NeuroML ecosystem can be incorporated into research workﬂows to simplify the construction,         the NeuroML ecosystem can be incorporated into research workﬂows to simplify the construction,         the NeuroML ecosystem can be incorporated into research workﬂows to simplify the construction,         the NeuroML ecosystem can be incorporated into research workﬂows to simplify the construction,\nCommons Attribution License,        Commons Attribution License,        Commons Attribution License,         testing, and analysis of standardized models of neural systems, and supports the FAIR (Findability,    testing, and analysis of standardized models of neural systems, and supports the FAIR (Findability,    testing, and analysis of standardized models of neural systems, and supports the FAIR (Findability,    testing, and analysis of standardized models of neural systems, and supports the FAIR (Findability,\nwhich permits unrestricted use      which permits unrestricted use      which permits unrestricted use       Accessibility, Interoperability, and Reusability) principles, thus promoting open, transparent and     Accessibility, Interoperability, and Reusability) principles, thus promoting open, transparent and     Accessibility, Interoperability, and Reusability) principles, thus promoting open, transparent and     Accessibility, Interoperability, and Reusability) principles, thus promoting open, transparent and\nand redistribution provided that    and redistribution provided that    and redistribution provided that\nthe original author and source      the original author and source      the original author and source       reproducible science.                                                                                  reproducible science.                                                                                  reproducible science.                                                                                  reproducible science.\nare credited.                       are credited.                       are credited.\n                                                                        Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                     1 of 44","md":"# TOOLS AND RESOURCES\n\n# The NeuroML ecosystem for standardized multi-scale modeling in neuroscience\n\nAnkur Sinha, Padraig Gleeson*, Bóris Marin, Salvador Dura-Bernal, Sotirios Panagiotou⁵, Sharon Crook⁶, Matteo Cantarelli⁷, Robert C Cannon⁸, Andrew P Davison⁹, Harsha Gurnani¹⁰, Robin Angus Silver¹*\n\n1Department of Neuroscience, Physiology and Pharmacology, University College London, London, United Kingdom; ²Universidade Federal do ABC, São Bernardo do Campo, Brazil; ³SUNY Downstate Medical Center, Brooklyn, United States; ⁴Center for Biomedical Imaging and Neuromodulation, Nathan Kline Institute for Psychiatric Research, Orangeburg, United States; ⁵Erasmus University Rotterdam, Rotterdam, Netherlands; ⁶Arizona State University, Tempe, United States; ⁷MetaCell Ltd, Cambridge, United States; ⁸Opus2 International Ltd, London, United Kingdom; ⁹University of Washington, Seattle, United States.\n\n# eLife Assessment\n\n*For correspondence: p.gleeson@ucl.ac.uk (PG); a.silver@ucl.ac.uk (RAS)\n\nThis important work presents a consolidated overview of the NeuroML2 open community standard and provides convincing evidence for its central role within a broader software ecosystem for the development of neuronal models that are open, shareable, reproducible, and interoperable. A major strength of the work is the continued development over more than two decades to establish, maintain, and adapt this standard to meet the evolving needs of the field. This work is of broad interest to the sub-cellular, cellular, computational, and systems neuroscience communities undertaking studies involving theory, modeling, and simulation.\n\n# Competing interest: See page 38\n\n# Funding: See page 38\n\n# Preprint posted\n\n11 December 2023\n\n# Sent for Review\n\n31 January 2024\n\n# Reviewed preprint posted\n\n03 May 2024\n\n# Reviewed preprint revised\n\n30 October 2024\n\n# Version of Record published\n\n10 January 2025\n\n# Reviewing Editor: Eilif B Muller, University of Montreal, Canada\n\nCopyright Sinha, Gleeson et al. This article is distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use and redistribution provided that the original author and source are credited.\n\nThe NeuroML ecosystem can be incorporated into research workflows to simplify the construction, testing, and analysis of standardized models of neural systems, and supports the FAIR (Findability, Accessibility, Interoperability, and Reusability) principles, thus promoting open, transparent and reproducible science.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"TOOLS AND RESOURCES","md":"# TOOLS AND RESOURCES","bBox":{"x":356.27,"y":47.78,"w":95,"h":8}},{"type":"heading","lvl":1,"value":"The NeuroML ecosystem for standardized multi-scale modeling in neuroscience","md":"# The NeuroML ecosystem for standardized multi-scale modeling in neuroscience","bBox":{"x":168.53,"y":104,"w":413,"h":21}},{"type":"text","value":"Ankur Sinha, Padraig Gleeson*, Bóris Marin, Salvador Dura-Bernal, Sotirios Panagiotou⁵, Sharon Crook⁶, Matteo Cantarelli⁷, Robert C Cannon⁸, Andrew P Davison⁹, Harsha Gurnani¹⁰, Robin Angus Silver¹*\n\n1Department of Neuroscience, Physiology and Pharmacology, University College London, London, United Kingdom; ²Universidade Federal do ABC, São Bernardo do Campo, Brazil; ³SUNY Downstate Medical Center, Brooklyn, United States; ⁴Center for Biomedical Imaging and Neuromodulation, Nathan Kline Institute for Psychiatric Research, Orangeburg, United States; ⁵Erasmus University Rotterdam, Rotterdam, Netherlands; ⁶Arizona State University, Tempe, United States; ⁷MetaCell Ltd, Cambridge, United States; ⁸Opus2 International Ltd, London, United Kingdom; ⁹University of Washington, Seattle, United States.","md":"Ankur Sinha, Padraig Gleeson*, Bóris Marin, Salvador Dura-Bernal, Sotirios Panagiotou⁵, Sharon Crook⁶, Matteo Cantarelli⁷, Robert C Cannon⁸, Andrew P Davison⁹, Harsha Gurnani¹⁰, Robin Angus Silver¹*\n\n1Department of Neuroscience, Physiology and Pharmacology, University College London, London, United Kingdom; ²Universidade Federal do ABC, São Bernardo do Campo, Brazil; ³SUNY Downstate Medical Center, Brooklyn, United States; ⁴Center for Biomedical Imaging and Neuromodulation, Nathan Kline Institute for Psychiatric Research, Orangeburg, United States; ⁵Erasmus University Rotterdam, Rotterdam, Netherlands; ⁶Arizona State University, Tempe, United States; ⁷MetaCell Ltd, Cambridge, United States; ⁸Opus2 International Ltd, London, United Kingdom; ⁹University of Washington, Seattle, United States.","bBox":{"x":168.52,"y":161.5,"w":401.74,"h":170.6}},{"type":"heading","lvl":1,"value":"eLife Assessment","md":"# eLife Assessment","bBox":{"x":168.53,"y":368.3,"w":98,"h":12}},{"type":"text","value":"*For correspondence: p.gleeson@ucl.ac.uk (PG); a.silver@ucl.ac.uk (RAS)\n\nThis important work presents a consolidated overview of the NeuroML2 open community standard and provides convincing evidence for its central role within a broader software ecosystem for the development of neuronal models that are open, shareable, reproducible, and interoperable. A major strength of the work is the continued development over more than two decades to establish, maintain, and adapt this standard to meet the evolving needs of the field. This work is of broad interest to the sub-cellular, cellular, computational, and systems neuroscience communities undertaking studies involving theory, modeling, and simulation.","md":"*For correspondence: p.gleeson@ucl.ac.uk (PG); a.silver@ucl.ac.uk (RAS)\n\nThis important work presents a consolidated overview of the NeuroML2 open community standard and provides convincing evidence for its central role within a broader software ecosystem for the development of neuronal models that are open, shareable, reproducible, and interoperable. A major strength of the work is the continued development over more than two decades to establish, maintain, and adapt this standard to meet the evolving needs of the field. This work is of broad interest to the sub-cellular, cellular, computational, and systems neuroscience communities undertaking studies involving theory, modeling, and simulation.","bBox":{"x":37.01,"y":161.75,"w":539.52,"h":309.2}},{"type":"heading","lvl":1,"value":"Competing interest: See page 38","md":"# Competing interest: See page 38","bBox":{"x":37.01,"y":449.47,"w":113.11,"h":19}},{"type":"heading","lvl":1,"value":"Funding: See page 38","md":"# Funding: See page 38","bBox":{"x":37.01,"y":460.47,"w":79.9,"h":25}},{"type":"heading","lvl":1,"value":"Preprint posted","md":"# Preprint posted","bBox":{"x":37.01,"y":492.47,"w":59,"h":8}},{"type":"text","value":"11 December 2023","md":"11 December 2023","bBox":{"x":37.01,"y":161.75,"w":365.42,"h":349.72}},{"type":"heading","lvl":1,"value":"Sent for Review","md":"# Sent for Review","bBox":{"x":37.01,"y":514.47,"w":59,"h":8}},{"type":"text","value":"31 January 2024","md":"31 January 2024","bBox":{"x":37.01,"y":161.75,"w":365.42,"h":371.72}},{"type":"heading","lvl":1,"value":"Reviewed preprint posted","md":"# Reviewed preprint posted","bBox":{"x":37.01,"y":492.47,"w":98,"h":52}},{"type":"text","value":"03 May 2024","md":"03 May 2024","bBox":{"x":37.01,"y":161.75,"w":365.42,"h":393.72}},{"type":"heading","lvl":1,"value":"Reviewed preprint revised","md":"# Reviewed preprint revised","bBox":{"x":37.01,"y":558.47,"w":99,"h":8}},{"type":"text","value":"30 October 2024","md":"30 October 2024","bBox":{"x":37.01,"y":161.75,"w":365.42,"h":415.72}},{"type":"heading","lvl":1,"value":"Version of Record published","md":"# Version of Record published","bBox":{"x":37.01,"y":580.47,"w":105,"h":8}},{"type":"text","value":"10 January 2025","md":"10 January 2025","bBox":{"x":37.01,"y":161.75,"w":365.42,"h":437.72}},{"type":"heading","lvl":1,"value":"Reviewing Editor: Eilif B Muller, University of Montreal, Canada","md":"# Reviewing Editor: Eilif B Muller, University of Montreal, Canada","bBox":{"x":37.01,"y":608.47,"w":117.75,"h":19}},{"type":"text","value":"Copyright Sinha, Gleeson et al. This article is distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use and redistribution provided that the original author and source are credited.\n\nThe NeuroML ecosystem can be incorporated into research workflows to simplify the construction, testing, and analysis of standardized models of neural systems, and supports the FAIR (Findability, Accessibility, Interoperability, and Reusability) principles, thus promoting open, transparent and reproducible science.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Copyright Sinha, Gleeson et al. This article is distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use and redistribution provided that the original author and source are credited.\n\nThe NeuroML ecosystem can be incorporated into research workflows to simplify the construction, testing, and analysis of standardized models of neural systems, and supports the FAIR (Findability, Accessibility, Interoperability, and Reusability) principles, thus promoting open, transparent and reproducible science.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":37.01,"y":161.75,"w":528.51,"h":557.72}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://en.wikipedia.org/wiki/Open_access","text":""},{"url":"https://creativecommons.org/","text":""},{"url":"https://elifesciences.org/?utm_source=pdf&utm_medium=article-pdf&utm_campaign=PDF_tracking","text":""},{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"mailto:p.gleeson@ucl.ac.uk","text":"p.gleeson@ucl.ac.uk (PG); "},{"url":"mailto:a.silver@ucl.ac.uk","text":"a.silver@ucl.ac.uk (RAS)"},{"url":"https://doi.org/10.1101/2023.12.07.570537","text":"11 December 2023"},{"url":"https://doi.org/10.7554/eLife.95135.1","text":"03 May 2024"},{"url":"https://doi.org/10.7554/eLife.95135.2","text":"30 October 2024"},{"url":"http://creativecommons.org/licenses/by/4.0/","text":""},{"url":"http://creativecommons.org/licenses/by/4.0/","text":"Commons Attribution License, "}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.204},{"page":2,"text":"           Tools  and  resourceseuroscience\n                                 Introduction                                                                                              Introduction                                                                                              Introduction                                                                                              Introduction                                                                                              Introduction                                                                                              Introduction                                                                                              Introduction\n                                 Development of an in-  depth, mechanistic understanding of brain function in health and disease           Development of an in-  depth, mechanistic understanding of brain function in health and disease           Development of an in-  depth, mechanistic understanding of brain function in health and disease           Development of an in-  depth, mechanistic understanding of brain function in health and disease           Development of an in-  depth, mechanistic understanding of brain function in health and disease           Development of an in-  depth, mechanistic understanding of brain function in health and disease           Development of an in-  depth, mechanistic understanding of brain function in health and disease\n                                 requires different scientiﬁc approaches spanning multiple scales, from gene expression to behavior.       requires different scientiﬁc approaches spanning multiple scales, from gene expression to behavior.       requires different scientiﬁc approaches spanning multiple scales, from gene expression to behavior.       requires different scientiﬁc approaches spanning multiple scales, from gene expression to behavior.       requires different scientiﬁc approaches spanning multiple scales, from gene expression to behavior.       requires different scientiﬁc approaches spanning multiple scales, from gene expression to behavior.       requires different scientiﬁc approaches spanning multiple scales, from gene expression to behavior.\n                                 Although ‘wet’ experimental approaches are essential for characterizing the properties of neural          Although ‘wet’ experimental approaches are essential for characterizing the properties of neural          Although ‘wet’ experimental approaches are essential for characterizing the properties of neural          Although ‘wet’ experimental approaches are essential for characterizing the properties of neural          Although ‘wet’ experimental approaches are essential for characterizing the properties of neural          Although ‘wet’ experimental approaches are essential for characterizing the properties of neural          Although ‘wet’ experimental approaches are essential for characterizing the properties of neural\n                                 systems and testing hypotheses, theory and modeling are critical for exploring how these complex          systems and testing hypotheses, theory and modeling are critical for exploring how these complex          systems and testing hypotheses, theory and modeling are critical for exploring how these complex          systems and testing hypotheses, theory and modeling are critical for exploring how these complex          systems and testing hypotheses, theory and modeling are critical for exploring how these complex          systems and testing hypotheses, theory and modeling are critical for exploring how these complex          systems and testing hypotheses, theory and modeling are critical for exploring how these complex\n                                 systems behave across a wider range of conditions, and for generating new experimentally testable,        systems behave across a wider range of conditions, and for generating new experimentally testable,        systems behave across a wider range of conditions, and for generating new experimentally testable,        systems behave across a wider range of conditions, and for generating new experimentally testable,        systems behave across a wider range of conditions, and for generating new experimentally testable,        systems behave across a wider range of conditions, and for generating new experimentally testable,        systems behave across a wider range of conditions, and for generating new experimentally testable,\n                                 physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of         physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of         physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of         physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of         physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of         physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of         physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of\n                                 experimentally measured parameters, functional properties, and responses to perturbations into a          experimentally measured parameters, functional properties, and responses to perturbations into a          experimentally measured parameters, functional properties, and responses to perturbations into a          experimentally measured parameters, functional properties, and responses to perturbations into a          experimentally measured parameters, functional properties, and responses to perturbations into a          experimentally measured parameters, functional properties, and responses to perturbations into a          experimentally measured parameters, functional properties, and responses to perturbations into a\n                                 physio-                                                                                                   physio-                                                                                                   physio-                                                                                                   physio-                                                                                                   physio-                                                                                                   physio-                                                                                                   physio-\nchemically coherent framework that reproduces the properties of the neural system of interest\n                                 (Einevoll et  al., 2019;  Yao et  al., 2022;  Poirazi and Papoutsi, 2020;                                 (Einevoll et  al., 2019;  Yao et  al., 2022;  Poirazi and Papoutsi, 2020;                                 (Einevoll et  al., 2019;  Yao et  al., 2022;  Poirazi and Papoutsi, 2020;                                 (Einevoll et  al., 2019;  Yao et  al., 2022;  Poirazi and Papoutsi, 2020;                                 (Einevoll et  al., 2019;  Yao et  al., 2022;  Poirazi and Papoutsi, 2020;                                 (Einevoll et  al., 2019;  Yao et  al., 2022;  Poirazi and Papoutsi, 2020;                                 (Einevoll et  al., 2019;  Yao et  al., 2022;  Poirazi and Papoutsi, 2020; Gurnani and Silver, 2021;\nleeson et al., 2018; Cayco‐Gajic et al., 2017\nillings et al., 2014; Vervaeke et al., 2010; Kriener\n                                 et al., 2022; Billeh et al., 2020; Markram et al., 2015).                                                 et al., 2022; Billeh et al., 2020; Markram et al., 2015).                                                 et al., 2022; Billeh et al., 2020; Markram et al., 2015).                                                 et al., 2022; Billeh et al., 2020; Markram et al., 2015).                                                 et al., 2022; Billeh et al., 2020; Markram et al., 2015).                                                 et al., 2022; Billeh et al., 2020; Markram et al., 2015).                                                 et al., 2022; Billeh et al., 2020; Markram et al., 2015).\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Computational models in neuroscience often focus on different levels of description. For example,\n                                 a cellular physiologist may construct a complex multi-  compartmental model to explain the dynam-         a cellular physiologist may construct a complex multi-  compartmental model to explain the dynam-         a cellular physiologist may construct a complex multi-  compartmental model to explain the dynam-         a cellular physiologist may construct a complex multi-  compartmental model to explain the dynam-         a cellular physiologist may construct a complex multi-  compartmental model to explain the dynam-         a cellular physiologist may construct a complex multi-  compartmental model to explain the dynam-         a cellular physiologist may construct a complex multi-  compartmental model to explain the dynam-\n                                 ical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic       ical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic       ical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic       ical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic       ical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic       ical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic       ical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic\n                                 conductances (Hay et al., 2011;  De Schutter and Bower, 1994;  Migliore et al., 2005). In contrast,       conductances (Hay et al., 2011;  De Schutter and Bower, 1994;  Migliore et al., 2005). In contrast,       conductances (Hay et al., 2011;  De Schutter and Bower, 1994;  Migliore et al., 2005). In contrast,       conductances (Hay et al., 2011;  De Schutter and Bower, 1994;  Migliore et al., 2005). In contrast,       conductances (Hay et al., 2011;  De Schutter and Bower, 1994;  Migliore et al., 2005). In contrast,       conductances (Hay et al., 2011;  De Schutter and Bower, 1994;  Migliore et al., 2005). In contrast,       conductances (Hay et al., 2011;  De Schutter and Bower, 1994;  Migliore et al., 2005). In contrast,\n                                 to relate neural population activity to sensory processing and behavior, a systems neurophysiologist      to relate neural population activity to sensory processing and behavior, a systems neurophysiologist      to relate neural population activity to sensory processing and behavior, a systems neurophysiologist      to relate neural population activity to sensory processing and behavior, a systems neurophysiologist      to relate neural population activity to sensory processing and behavior, a systems neurophysiologist      to relate neural population activity to sensory processing and behavior, a systems neurophysiologist      to relate neural population activity to sensory processing and behavior, a systems neurophysiologist\n                                 may build a circuit- level model consisting of thousands of much simpler integrate-  and-                 may build a circuit- level model consisting of thousands of much simpler integrate-  and-                 may build a circuit- level model consisting of thousands of much simpler integrate-  and-                 may build a circuit- level model consisting of thousands of much simpler integrate-  and-                 may build a circuit- level model consisting of thousands of much simpler integrate-  and-                 may build a circuit- level model consisting of thousands of much simpler integrate-  and-                 may build a circuit- level model consisting of thousands of much simpler integrate-  and-\nﬁre neurons\n                                 (Lapicque, 1907;  Potjans and Diesmann, 2014;                                                             (Lapicque, 1907;  Potjans and Diesmann, 2014;                                                             (Lapicque, 1907;  Potjans and Diesmann, 2014;                                                             (Lapicque, 1907;  Potjans and Diesmann, 2014;                                                             (Lapicque, 1907;  Potjans and Diesmann, 2014;                                                             (Lapicque, 1907;  Potjans and Diesmann, 2014;                                                             (Lapicque, 1907;  Potjans and Diesmann, 2014; Brunel, 2000). Domain speciﬁc tools have been\n                                 developed to aid the construction and simulation of models at varying levels of biological detail         developed to aid the construction and simulation of models at varying levels of biological detail         developed to aid the construction and simulation of models at varying levels of biological detail         developed to aid the construction and simulation of models at varying levels of biological detail         developed to aid the construction and simulation of models at varying levels of biological detail         developed to aid the construction and simulation of models at varying levels of biological detail         developed to aid the construction and simulation of models at varying levels of biological detail\n                                 and scales. An ecosystem of diverse tools is powerful and ﬂexible, but it also creates serious chal-      and scales. An ecosystem of diverse tools is powerful and ﬂexible, but it also creates serious chal-      and scales. An ecosystem of diverse tools is powerful and ﬂexible, but it also creates serious chal-      and scales. An ecosystem of diverse tools is powerful and ﬂexible, but it also creates serious chal-      and scales. An ecosystem of diverse tools is powerful and ﬂexible, but it also creates serious chal-      and scales. An ecosystem of diverse tools is powerful and ﬂexible, but it also creates serious chal-      and scales. An ecosystem of diverse tools is powerful and ﬂexible, but it also creates serious chal-\n                                 lenges for the research community (Cannon et  al., 2007). Each tool typically has its own design,         lenges for the research community (Cannon et  al., 2007). Each tool typically has its own design,         lenges for the research community (Cannon et  al., 2007). Each tool typically has its own design,         lenges for the research community (Cannon et  al., 2007). Each tool typically has its own design,         lenges for the research community (Cannon et  al., 2007). Each tool typically has its own design,         lenges for the research community (Cannon et  al., 2007). Each tool typically has its own design,         lenges for the research community (Cannon et  al., 2007). Each tool typically has its own design,\n                                 features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and      features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and      features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and      features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and      features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and      features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and      features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and\n                                 ﬁnally, a distinct machine-  readable representation of the model’s physiological components. This        ﬁnally, a distinct machine-  readable representation of the model’s physiological components. This        ﬁnally, a distinct machine-  readable representation of the model’s physiological components. This        ﬁnally, a distinct machine-  readable representation of the model’s physiological components. This        ﬁnally, a distinct machine-  readable representation of the model’s physiological components. This        ﬁnally, a distinct machine-  readable representation of the model’s physiological components. This        ﬁnally, a distinct machine-  readable representation of the model’s physiological components. This\n                                 represents a complex landscape for users to navigate. Additionally, models developed in different         represents a complex landscape for users to navigate. Additionally, models developed in different         represents a complex landscape for users to navigate. Additionally, models developed in different         represents a complex landscape for users to navigate. Additionally, models developed in different         represents a complex landscape for users to navigate. Additionally, models developed in different         represents a complex landscape for users to navigate. Additionally, models developed in different         represents a complex landscape for users to navigate. Additionally, models developed in different\n                                 simulators cannot be mixed and matched or easily compared, and the translation of a model from            simulators cannot be mixed and matched or easily compared, and the translation of a model from            simulators cannot be mixed and matched or easily compared, and the translation of a model from            simulators cannot be mixed and matched or easily compared, and the translation of a model from            simulators cannot be mixed and matched or easily compared, and the translation of a model from            simulators cannot be mixed and matched or easily compared, and the translation of a model from            simulators cannot be mixed and matched or easily compared, and the translation of a model from\n                                 one tool-speciﬁc implementation to another can be non-                                                    one tool-speciﬁc implementation to another can be non-                                                    one tool-speciﬁc implementation to another can be non-                                                    one tool-speciﬁc implementation to another can be non-                                                    one tool-speciﬁc implementation to another can be non-                                                    one tool-speciﬁc implementation to another can be non-                                                    one tool-speciﬁc implementation to another can be non-\ntrivial and error-\nprone. This fragmentation in\n                                 modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their     modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their     modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their     modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their     modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their     modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their     modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their\n                                 research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are       research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are       research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are       research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are       research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are       research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are       research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are\n                                 (Wilkinson et al., 2016).                                                                                 (Wilkinson et al., 2016).                                                                                 (Wilkinson et al., 2016).                                                                                 (Wilkinson et al., 2016).                                                                                 (Wilkinson et al., 2016).                                                                                 (Wilkinson et al., 2016).                                                                                 (Wilkinson et al., 2016).\no counter fragmentation and promote cooperation and interoperability within and across ﬁelds,\n                                 standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (           standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (           standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (           standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (           standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (           standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (           standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (\nbrams\n                                 et al., 2022) has highlighted the need for standards to ‘make research outputs machine-                   et al., 2022) has highlighted the need for standards to ‘make research outputs machine-                   et al., 2022) has highlighted the need for standards to ‘make research outputs machine-                   et al., 2022) has highlighted the need for standards to ‘make research outputs machine-                   et al., 2022) has highlighted the need for standards to ‘make research outputs machine-                   et al., 2022) has highlighted the need for standards to ‘make research outputs machine-                   et al., 2022) has highlighted the need for standards to ‘make research outputs machine-\nreadable and\n                                 computable and are necessary for making research FAIR’ (INCF, 2023). In biology, several community        computable and are necessary for making research FAIR’ (INCF, 2023). In biology, several community        computable and are necessary for making research FAIR’ (INCF, 2023). In biology, several community        computable and are necessary for making research FAIR’ (INCF, 2023). In biology, several community        computable and are necessary for making research FAIR’ (INCF, 2023). In biology, several community        computable and are necessary for making research FAIR’ (INCF, 2023). In biology, several community        computable and are necessary for making research FAIR’ (INCF, 2023). In biology, several community\n                                 standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure            standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure            standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure            standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure            standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure            standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure            standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure\n                                 [BIDS;  Gorgolewski et  al., 2016], Neurodata Without Borders [NWB; Teeters et  al., 2015]) and           [BIDS;  Gorgolewski et  al., 2016], Neurodata Without Borders [NWB; Teeters et  al., 2015]) and           [BIDS;  Gorgolewski et  al., 2016], Neurodata Without Borders [NWB; Teeters et  al., 2015]) and           [BIDS;  Gorgolewski et  al., 2016], Neurodata Without Borders [NWB; Teeters et  al., 2015]) and           [BIDS;  Gorgolewski et  al., 2016], Neurodata Without Borders [NWB; Teeters et  al., 2015]) and           [BIDS;  Gorgolewski et  al., 2016], Neurodata Without Borders [NWB; Teeters et  al., 2015]) and           [BIDS;  Gorgolewski et  al., 2016], Neurodata Without Borders [NWB; Teeters et  al., 2015]) and\n                                 computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML             computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML             computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML             computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML             computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML             computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML             computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML\n                                 [Lloyd et  al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et  al., 2020],           [Lloyd et  al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et  al., 2020],           [Lloyd et  al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et  al., 2020],           [Lloyd et  al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et  al., 2020],           [Lloyd et  al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et  al., 2020],           [Lloyd et  al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et  al., 2020],           [Lloyd et  al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et  al., 2020],\n                                 PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).             PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).             PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).             PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).             PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).             PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).             PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).\n                                 These standards have enabled open and interoperable ecosystems of software applications, libraries,       These standards have enabled open and interoperable ecosystems of software applications, libraries,       These standards have enabled open and interoperable ecosystems of software applications, libraries,       These standards have enabled open and interoperable ecosystems of software applications, libraries,       These standards have enabled open and interoperable ecosystems of software applications, libraries,       These standards have enabled open and interoperable ecosystems of software applications, libraries,       These standards have enabled open and interoperable ecosystems of software applications, libraries,\n                                 and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a        and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a        and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a        and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a        and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a        and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a        and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a\n                                 growing number of funding agencies and scientiﬁc journals.                                                growing number of funding agencies and scientiﬁc journals.                                                growing number of funding agencies and scientiﬁc journals.                                                growing number of funding agencies and scientiﬁc journals.                                                growing number of funding agencies and scientiﬁc journals.                                                growing number of funding agencies and scientiﬁc journals.                                                growing number of funding agencies and scientiﬁc journals.\nhe initial version of the NeuroML standard, version 1 (NeuroMLv1), was originally conceived as a\n                                 model description format (Goddard et al., 2001) and implemented as a three-  layered, declarative,        model description format (Goddard et al., 2001) and implemented as a three-  layered, declarative,        model description format (Goddard et al., 2001) and implemented as a three-  layered, declarative,        model description format (Goddard et al., 2001) and implemented as a three-  layered, declarative,        model description format (Goddard et al., 2001) and implemented as a three-  layered, declarative,        model description format (Goddard et al., 2001) and implemented as a three-  layered, declarative,        model description format (Goddard et al., 2001) and implemented as a three-  layered, declarative,\n                                 modular, simulator-independent language (                                                                 modular, simulator-independent language (                                                                 modular, simulator-independent language (                                                                 modular, simulator-independent language (                                                                 modular, simulator-independent language (                                                                 modular, simulator-independent language (                                                                 modular, simulator-independent language (\nleeson et al., 2010). NeuroMLv1 could describe detailed\n                                 neuronal morphologies and their biophysical properties as well as speciﬁc instantiations of networks.     neuronal morphologies and their biophysical properties as well as speciﬁc instantiations of networks.     neuronal morphologies and their biophysical properties as well as speciﬁc instantiations of networks.     neuronal morphologies and their biophysical properties as well as speciﬁc instantiations of networks.     neuronal morphologies and their biophysical properties as well as speciﬁc instantiations of networks.     neuronal morphologies and their biophysical properties as well as speciﬁc instantiations of networks.     neuronal morphologies and their biophysical properties as well as speciﬁc instantiations of networks.\n                                 It enabled the archiving of models in a standardized format and addressed the issue of simulator frag-    It enabled the archiving of models in a standardized format and addressed the issue of simulator frag-    It enabled the archiving of models in a standardized format and addressed the issue of simulator frag-    It enabled the archiving of models in a standardized format and addressed the issue of simulator frag-    It enabled the archiving of models in a standardized format and addressed the issue of simulator frag-    It enabled the archiving of models in a standardized format and addressed the issue of simulator frag-    It enabled the archiving of models in a standardized format and addressed the issue of simulator frag-\n                                 mentation by acting as the common language for model exchange between established simulation              mentation by acting as the common language for model exchange between established simulation              mentation by acting as the common language for model exchange between established simulation              mentation by acting as the common language for model exchange between established simulation              mentation by acting as the common language for model exchange between established simulation              mentation by acting as the common language for model exchange between established simulation              mentation by acting as the common language for model exchange between established simulation\n                                 environments—NEURON (Hines and Carnevale, 1997;                                                           environments—NEURON (Hines and Carnevale, 1997;                                                           environments—NEURON (Hines and Carnevale, 1997;                                                           environments—NEURON (Hines and Carnevale, 1997;                                                           environments—NEURON (Hines and Carnevale, 1997;                                                           environments—NEURON (Hines and Carnevale, 1997;                                                           environments—NEURON (Hines and Carnevale, 1997; Awile et  al., 2022), GENESIS (Bower and\n                                 Beeman, 1998), and MOOSE (Ray and Bhalla, 2008). While solving a number of long-                          Beeman, 1998), and MOOSE (Ray and Bhalla, 2008). While solving a number of long-                          Beeman, 1998), and MOOSE (Ray and Bhalla, 2008). While solving a number of long-                          Beeman, 1998), and MOOSE (Ray and Bhalla, 2008). While solving a number of long-                          Beeman, 1998), and MOOSE (Ray and Bhalla, 2008). While solving a number of long-                          Beeman, 1998), and MOOSE (Ray and Bhalla, 2008). While solving a number of long-                          Beeman, 1998), and MOOSE (Ray and Bhalla, 2008). While solving a number of long-\nstanding prob-\n                                 lems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of        lems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of        lems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of        lems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of        lems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of        lems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of        lems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of\n                                 these was that the dynamical behavior of model elements was not formally described in the standard        these was that the dynamical behavior of model elements was not formally described in the standard        these was that the dynamical behavior of model elements was not formally described in the standard        these was that the dynamical behavior of model elements was not formally described in the standard        these was that the dynamical behavior of model elements was not formally described in the standard        these was that the dynamical behavior of model elements was not formally described in the standard        these was that the dynamical behavior of model elements was not formally described in the standard\n                                 itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the  itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the  itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the  itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the  itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the  itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the  itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the\n                                 state variables should evolve in time) was only provided in the form of human-  readable documenta-       state variables should evolve in time) was only provided in the form of human-  readable documenta-       state variables should evolve in time) was only provided in the form of human-  readable documenta-       state variables should evolve in time) was only provided in the form of human-  readable documenta-       state variables should evolve in time) was only provided in the form of human-  readable documenta-       state variables should evolve in time) was only provided in the form of human-  readable documenta-       state variables should evolve in time) was only provided in the form of human-  readable documenta-\n                                 tion, requiring the developers of each new simulator to re-implement the behavior of these elements       tion, requiring the developers of each new simulator to re-implement the behavior of these elements       tion, requiring the developers of each new simulator to re-implement the behavior of these elements       tion, requiring the developers of each new simulator to re-implement the behavior of these elements       tion, requiring the developers of each new simulator to re-implement the behavior of these elements       tion, requiring the developers of each new simulator to re-implement the behavior of these elements       tion, requiring the developers of each new simulator to re-implement the behavior of these elements\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLifeof 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Introduction\n\nDevelopment of an in-depth, mechanistic understanding of brain function in health and disease requires different scientific approaches spanning multiple scales, from gene expression to behavior.\n\nAlthough ‘wet’ experimental approaches are essential for characterizing the properties of neural systems and testing hypotheses, theory and modeling are critical for exploring how these complex systems behave across a wider range of conditions, and for generating new experimentally testable, physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of experimentally measured parameters, functional properties, and responses to perturbations into a physio-chemically coherent framework that reproduces the properties of the neural system of interest (Einevoll et al., 2019; Yao et al., 2022; Poirazi and Papoutsi, 2020; Gurnani and Silver, 2021; Gleeson et al., 2018; Cayco‐Gajic et al., 2017; Billings et al., 2014; Vervaeke et al., 2010; Kriener et al., 2022; Billeh et al., 2020; Markram et al., 2015).\n\nComputational models in neuroscience often focus on different levels of description. For example, a cellular physiologist may construct a complex multi-compartmental model to explain the dynamical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic conductances (Hay et al., 2011; De Schutter and Bower, 1994; Migliore et al., 2005). In contrast, to relate neural population activity to sensory processing and behavior, a systems neurophysiologist may build a circuit-level model consisting of thousands of much simpler integrate-and-fire neurons (Lapicque, 1907; Potjans and Diesmann, 2014; Brunel, 2000).\n\nDomain specific tools have been developed to aid the construction and simulation of models at varying levels of biological detail and scales. An ecosystem of diverse tools is powerful and flexible, but it also creates serious challenges for the research community (Cannon et al., 2007). Each tool typically has its own design, features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and finally, a distinct machine-readable representation of the model’s physiological components. This represents a complex landscape for users to navigate. Additionally, models developed in different simulators cannot be mixed and matched or easily compared, and the translation of a model from one tool-specific implementation to another can be non-trivial and error-prone.\n\nThis fragmentation in modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are (Wilkinson et al., 2016).\n\nTo counter fragmentation and promote cooperation and interoperability within and across fields, standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (Abrams et al., 2022) has highlighted the need for standards to ‘make research outputs machine-readable and computable and are necessary for making research FAIR’ (INCF, 2023).\n\nIn biology, several community standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure [BIDS; Gorgolewski et al., 2016], Neurodata Without Borders [NWB; Teeters et al., 2015]) and computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML [Lloyd et al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et al., 2020], PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).\n\nThese standards have enabled open and interoperable ecosystems of software applications, libraries, and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a growing number of funding agencies and scientific journals.\n\nThe initial version of the NeuroML standard, version 1 (NeuroMLv1), was originally conceived as a model description format (Goddard et al., 2001) and implemented as a three-layered, declarative, modular, simulator-independent language (Gleeson et al., 2010). NeuroMLv1 could describe detailed neuronal morphologies and their biophysical properties as well as specific instantiations of networks. It enabled the archiving of models in a standardized format and addressed the issue of simulator fragmentation by acting as the common language for model exchange between established simulation environments—NEURON (Hines and Carnevale, 1997), GENESIS (Bower and Beeman, 1998), and MOOSE (Ray and Bhalla, 2008).\n\nWhile solving a number of long-standing problems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of these was that the dynamical behavior of model elements was not formally described in the standard itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the state variables should evolve in time) was only provided in the form of human-readable documentation, requiring the developers of each new simulator to re-implement the behavior of these elements.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Introduction","md":"# Introduction","bBox":{"x":168.53,"y":50.58,"w":81,"h":14}},{"type":"text","value":"Development of an in-depth, mechanistic understanding of brain function in health and disease requires different scientific approaches spanning multiple scales, from gene expression to behavior.\n\nAlthough ‘wet’ experimental approaches are essential for characterizing the properties of neural systems and testing hypotheses, theory and modeling are critical for exploring how these complex systems behave across a wider range of conditions, and for generating new experimentally testable, physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of experimentally measured parameters, functional properties, and responses to perturbations into a physio-chemically coherent framework that reproduces the properties of the neural system of interest (Einevoll et al., 2019; Yao et al., 2022; Poirazi and Papoutsi, 2020; Gurnani and Silver, 2021; Gleeson et al., 2018; Cayco‐Gajic et al., 2017; Billings et al., 2014; Vervaeke et al., 2010; Kriener et al., 2022; Billeh et al., 2020; Markram et al., 2015).\n\nComputational models in neuroscience often focus on different levels of description. For example, a cellular physiologist may construct a complex multi-compartmental model to explain the dynamical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic conductances (Hay et al., 2011; De Schutter and Bower, 1994; Migliore et al., 2005). In contrast, to relate neural population activity to sensory processing and behavior, a systems neurophysiologist may build a circuit-level model consisting of thousands of much simpler integrate-and-fire neurons (Lapicque, 1907; Potjans and Diesmann, 2014; Brunel, 2000).\n\nDomain specific tools have been developed to aid the construction and simulation of models at varying levels of biological detail and scales. An ecosystem of diverse tools is powerful and flexible, but it also creates serious challenges for the research community (Cannon et al., 2007). Each tool typically has its own design, features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and finally, a distinct machine-readable representation of the model’s physiological components. This represents a complex landscape for users to navigate. Additionally, models developed in different simulators cannot be mixed and matched or easily compared, and the translation of a model from one tool-specific implementation to another can be non-trivial and error-prone.\n\nThis fragmentation in modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are (Wilkinson et al., 2016).\n\nTo counter fragmentation and promote cooperation and interoperability within and across fields, standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (Abrams et al., 2022) has highlighted the need for standards to ‘make research outputs machine-readable and computable and are necessary for making research FAIR’ (INCF, 2023).\n\nIn biology, several community standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure [BIDS; Gorgolewski et al., 2016], Neurodata Without Borders [NWB; Teeters et al., 2015]) and computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML [Lloyd et al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et al., 2020], PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).\n\nThese standards have enabled open and interoperable ecosystems of software applications, libraries, and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a growing number of funding agencies and scientific journals.\n\nThe initial version of the NeuroML standard, version 1 (NeuroMLv1), was originally conceived as a model description format (Goddard et al., 2001) and implemented as a three-layered, declarative, modular, simulator-independent language (Gleeson et al., 2010). NeuroMLv1 could describe detailed neuronal morphologies and their biophysical properties as well as specific instantiations of networks. It enabled the archiving of models in a standardized format and addressed the issue of simulator fragmentation by acting as the common language for model exchange between established simulation environments—NEURON (Hines and Carnevale, 1997), GENESIS (Bower and Beeman, 1998), and MOOSE (Ray and Bhalla, 2008).\n\nWhile solving a number of long-standing problems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of these was that the dynamical behavior of model elements was not formally described in the standard itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the state variables should evolve in time) was only provided in the form of human-readable documentation, requiring the developers of each new simulator to re-implement the behavior of these elements.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Development of an in-depth, mechanistic understanding of brain function in health and disease requires different scientific approaches spanning multiple scales, from gene expression to behavior.\n\nAlthough ‘wet’ experimental approaches are essential for characterizing the properties of neural systems and testing hypotheses, theory and modeling are critical for exploring how these complex systems behave across a wider range of conditions, and for generating new experimentally testable, physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of experimentally measured parameters, functional properties, and responses to perturbations into a physio-chemically coherent framework that reproduces the properties of the neural system of interest (Einevoll et al., 2019; Yao et al., 2022; Poirazi and Papoutsi, 2020; Gurnani and Silver, 2021; Gleeson et al., 2018; Cayco‐Gajic et al., 2017; Billings et al., 2014; Vervaeke et al., 2010; Kriener et al., 2022; Billeh et al., 2020; Markram et al., 2015).\n\nComputational models in neuroscience often focus on different levels of description. For example, a cellular physiologist may construct a complex multi-compartmental model to explain the dynamical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic conductances (Hay et al., 2011; De Schutter and Bower, 1994; Migliore et al., 2005). In contrast, to relate neural population activity to sensory processing and behavior, a systems neurophysiologist may build a circuit-level model consisting of thousands of much simpler integrate-and-fire neurons (Lapicque, 1907; Potjans and Diesmann, 2014; Brunel, 2000).\n\nDomain specific tools have been developed to aid the construction and simulation of models at varying levels of biological detail and scales. An ecosystem of diverse tools is powerful and flexible, but it also creates serious challenges for the research community (Cannon et al., 2007). Each tool typically has its own design, features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and finally, a distinct machine-readable representation of the model’s physiological components. This represents a complex landscape for users to navigate. Additionally, models developed in different simulators cannot be mixed and matched or easily compared, and the translation of a model from one tool-specific implementation to another can be non-trivial and error-prone.\n\nThis fragmentation in modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are (Wilkinson et al., 2016).\n\nTo counter fragmentation and promote cooperation and interoperability within and across fields, standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (Abrams et al., 2022) has highlighted the need for standards to ‘make research outputs machine-readable and computable and are necessary for making research FAIR’ (INCF, 2023).\n\nIn biology, several community standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure [BIDS; Gorgolewski et al., 2016], Neurodata Without Borders [NWB; Teeters et al., 2015]) and computational models (e.g. Systems Biology Markup Language [SBML; Hucka et al., 2003], CellML [Lloyd et al., 2004], Scalable Open Network Architecture TemplAte [SONATA; Dai et al., 2020], PyNN [Davison et al., 2008] and Neural Open Markup Language [NeuroML; Gleeson et al., 2010]).\n\nThese standards have enabled open and interoperable ecosystems of software applications, libraries, and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a growing number of funding agencies and scientific journals.\n\nThe initial version of the NeuroML standard, version 1 (NeuroMLv1), was originally conceived as a model description format (Goddard et al., 2001) and implemented as a three-layered, declarative, modular, simulator-independent language (Gleeson et al., 2010). NeuroMLv1 could describe detailed neuronal morphologies and their biophysical properties as well as specific instantiations of networks. It enabled the archiving of models in a standardized format and addressed the issue of simulator fragmentation by acting as the common language for model exchange between established simulation environments—NEURON (Hines and Carnevale, 1997), GENESIS (Bower and Beeman, 1998), and MOOSE (Ray and Bhalla, 2008).\n\nWhile solving a number of long-standing problems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of these was that the dynamical behavior of model elements was not formally described in the standard itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the state variables should evolve in time) was only provided in the form of human-readable documentation, requiring the developers of each new simulator to re-implement the behavior of these elements.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":34.63,"w":415.01,"h":684.14}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.164},{"page":3,"text":"          Tools  and  resources                                                                                        Neuroscience\n                                                                   Create\n                                                                                                 Validate\n                                       Reuse\n                                                                            NeuroML]                           Visualize\n                                      Share\n                                                                                                Simulate\n                                                                       Fit\n                                Figure 1. The NeuroML software ecosystem supports all stages of the model development life cycle.\n                                in their native format. Additionally, the introduction of new model components required updates to\n                                the standard and all supporting simulators, making extension of the language difﬁcult. Finally, the use\n                                of Extensible Markup Language (XML) as the primary interface language limited usability—applica-\n                                tions would generally have to add their own code to read/write XML ﬁles.\n                                   To address these limitations, NeuroML was redesigned from the ground up in version 2 (NeuroMLv2)\n                                using the Low Entropy Modeling Speciﬁcation (LEMS) language (Cannon et  al., 2014). LEMS was\n                                designed to deﬁne a wide range of physio- chemical systems, enabling the creation of fully machine-\n                                readable, formal deﬁnitions of the structure and dynamics of any model components. Modeling\n                                elements in NeuroMLv2 (cells, ion channels, synapses) have their mathematical and structural deﬁ-\n                                nitions described in LEMS (e.g. the parameters required and how the state variables change with\n                                time). Thus, NeuroMLv2 retains all the features of NeuroMLv1—it remains modular, declarative, and\n                                continues to support multiple simulation engines—but unlike version 1, it is extensible, and all speci-\n                                ﬁcations are fully machine-readable. NeuroMLv2 also moved to Python as its main interface language\n                                and provides a comprehensive set of Python libraries to improve usability (Vella et al., 2014), with\n                                XML retained as a machine- readable serialization format (i.e. the form in which the model ﬁles are\n                                saved/shared).\n                                   Since its release in 2014, the NeuroMLv2 standard, the software ecosystem, and the commu-\n                                nity have all steadily grown. An open, community- based governance structure was put in place—an\n                                elected Editorial Board, overseen by an independent Scientiﬁc Committee, maintains the standard\n                                and core software tools—APIs, reference simulators, and utilities. Although these tools were initially\n                                focused on enabling the simulation of models on multiple platforms, they have been expanded to\n                                support all stages of the model life cycle (Figure 1). Modelers can use these tools to easily create,\n                                inspect and visualize, validate, simulate, ﬁt and optimize, share and disseminate NeuroMLv2 models\n                                and outputs (Billings et al., 2014;\n                                                                 Cayco‐Gajic et al., 2017\n                                                                                         ; Gurnani and Silver, 2021; Kriener et al.,\n                                2022; Gleeson et al., 2019b). To provide clear, concise, searchable information for both users and\n                                developers, the NeuroML documentation has been signiﬁcantly expanded and re-       deployed using\n                                the latest modern web technologies (https://docs.neuroml.org). Increased community-\n                                                                                                                   wide collabora-\n                                tions have also extended the software ecosystem well beyond the NeuroMLv2 tools developed by the\n                                NeuroML team: additional simulators such as Brian (Stimberg et al., 2019), NetPyNE (Dura‐ Bernal\n                                et al., 2019), Arbor (Akar et al., 2019) and EDEN (Panagiotou et al., 2022) all support NeuroMLv2.\n                                We have worked to ensure interoperability with other structured formats for model development\n                                in neuroscience such as PyNN (Davison et  al., 2008) and SONATA (Dai et  al., 2020). Platforms\n                                for collaboratively developing, visualizing, and sharing NeuroML models (Open Source Brain (OSB)\n                                Gleeson et al., 2019b) as well as a searchable database of NeuroML model components NeuroML\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                       3 of 44","md":"# Neuroscience\n\n# Tools and resources\n\nCreate\n\nValidate\n\nReuse\n\nVisualize\n\nSimulate\n\nFit\n\nFigure 1. The NeuroML software ecosystem supports all stages of the model development life cycle.\n\nin their native format. Additionally, the introduction of new model components required updates to the standard and all supporting simulators, making extension of the language difficult. Finally, the use of Extensible Markup Language (XML) as the primary interface language limited usability—applications would generally have to add their own code to read/write XML files.\n\nTo address these limitations, NeuroML was redesigned from the ground up in version 2 (NeuroMLv2) using the Low Entropy Modeling Specification (LEMS) language (Cannon et al., 2014). LEMS was designed to define a wide range of physio-chemical systems, enabling the creation of fully machine-readable, formal definitions of the structure and dynamics of any model components. Modeling elements in NeuroMLv2 (cells, ion channels, synapses) have their mathematical and structural definitions described in LEMS (e.g. the parameters required and how the state variables change with time). Thus, NeuroMLv2 retains all the features of NeuroMLv1—it remains modular, declarative, and continues to support multiple simulation engines—but unlike version 1, it is extensible, and all specifications are fully machine-readable. NeuroMLv2 also moved to Python as its main interface language and provides a comprehensive set of Python libraries to improve usability (Vella et al., 2014), with XML retained as a machine-readable serialization format (i.e. the form in which the model files are saved/shared).\n\nSince its release in 2014, the NeuroMLv2 standard, the software ecosystem, and the community have all steadily grown. An open, community-based governance structure was put in place—an elected Editorial Board, overseen by an independent Scientific Committee, maintains the standard and core software tools—APIs, reference simulators, and utilities. Although these tools were initially focused on enabling the simulation of models on multiple platforms, they have been expanded to support all stages of the model life cycle (Figure 1). Modelers can use these tools to easily create, inspect and visualize, validate, simulate, fit and optimize, share and disseminate NeuroMLv2 models and outputs (Billings et al., 2014; Cayco‐Gajic et al., 2017; Gurnani and Silver, 2021; Kriener et al., 2022; Gleeson et al., 2019b). To provide clear, concise, searchable information for both users and developers, the NeuroML documentation has been significantly expanded and re-deployed using the latest modern web technologies (https://docs.neuroml.org). Increased community-wide collaborations have also extended the software ecosystem well beyond the NeuroMLv2 tools developed by the NeuroML team: additional simulators such as Brian (Stimberg et al., 2019), NetPyNE (Dura‐Bernal et al., 2019), Arbor (Akar et al., 2019) and EDEN (Panagiotou et al., 2022) all support NeuroMLv2. We have worked to ensure interoperability with other structured formats for model development in neuroscience such as PyNN (Davison et al., 2008) and SONATA (Dai et al., 2020). Platforms for collaboratively developing, visualizing, and sharing NeuroML models (Open Source Brain (OSB) Gleeson et al., 2019b) as well as a searchable database of NeuroML model components.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[{"name":"img_p2_1.png","height":180,"width":569,"x":299.5119248,"y":144.45700419999997,"original_width":569,"original_height":180,"ocr":[{"x":210,"y":42,"w":344,"h":74,"confidence":0.885068376300765,"text":"NeuroML]"}]}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"text","value":"Create\n\nValidate\n\nReuse\n\nVisualize\n\nSimulate\n\nFit\n\nFigure 1. The NeuroML software ecosystem supports all stages of the model development life cycle.\n\nin their native format. Additionally, the introduction of new model components required updates to the standard and all supporting simulators, making extension of the language difficult. Finally, the use of Extensible Markup Language (XML) as the primary interface language limited usability—applications would generally have to add their own code to read/write XML files.\n\nTo address these limitations, NeuroML was redesigned from the ground up in version 2 (NeuroMLv2) using the Low Entropy Modeling Specification (LEMS) language (Cannon et al., 2014). LEMS was designed to define a wide range of physio-chemical systems, enabling the creation of fully machine-readable, formal definitions of the structure and dynamics of any model components. Modeling elements in NeuroMLv2 (cells, ion channels, synapses) have their mathematical and structural definitions described in LEMS (e.g. the parameters required and how the state variables change with time). Thus, NeuroMLv2 retains all the features of NeuroMLv1—it remains modular, declarative, and continues to support multiple simulation engines—but unlike version 1, it is extensible, and all specifications are fully machine-readable. NeuroMLv2 also moved to Python as its main interface language and provides a comprehensive set of Python libraries to improve usability (Vella et al., 2014), with XML retained as a machine-readable serialization format (i.e. the form in which the model files are saved/shared).\n\nSince its release in 2014, the NeuroMLv2 standard, the software ecosystem, and the community have all steadily grown. An open, community-based governance structure was put in place—an elected Editorial Board, overseen by an independent Scientific Committee, maintains the standard and core software tools—APIs, reference simulators, and utilities. Although these tools were initially focused on enabling the simulation of models on multiple platforms, they have been expanded to support all stages of the model life cycle (Figure 1). Modelers can use these tools to easily create, inspect and visualize, validate, simulate, fit and optimize, share and disseminate NeuroMLv2 models and outputs (Billings et al., 2014; Cayco‐Gajic et al., 2017; Gurnani and Silver, 2021; Kriener et al., 2022; Gleeson et al., 2019b). To provide clear, concise, searchable information for both users and developers, the NeuroML documentation has been significantly expanded and re-deployed using the latest modern web technologies (https://docs.neuroml.org). Increased community-wide collaborations have also extended the software ecosystem well beyond the NeuroMLv2 tools developed by the NeuroML team: additional simulators such as Brian (Stimberg et al., 2019), NetPyNE (Dura‐Bernal et al., 2019), Arbor (Akar et al., 2019) and EDEN (Panagiotou et al., 2022) all support NeuroMLv2. We have worked to ensure interoperability with other structured formats for model development in neuroscience such as PyNN (Davison et al., 2008) and SONATA (Dai et al., 2020). Platforms for collaboratively developing, visualizing, and sharing NeuroML models (Open Source Brain (OSB) Gleeson et al., 2019b) as well as a searchable database of NeuroML model components.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Create\n\nValidate\n\nReuse\n\nVisualize\n\nSimulate\n\nFit\n\nFigure 1. The NeuroML software ecosystem supports all stages of the model development life cycle.\n\nin their native format. Additionally, the introduction of new model components required updates to the standard and all supporting simulators, making extension of the language difficult. Finally, the use of Extensible Markup Language (XML) as the primary interface language limited usability—applications would generally have to add their own code to read/write XML files.\n\nTo address these limitations, NeuroML was redesigned from the ground up in version 2 (NeuroMLv2) using the Low Entropy Modeling Specification (LEMS) language (Cannon et al., 2014). LEMS was designed to define a wide range of physio-chemical systems, enabling the creation of fully machine-readable, formal definitions of the structure and dynamics of any model components. Modeling elements in NeuroMLv2 (cells, ion channels, synapses) have their mathematical and structural definitions described in LEMS (e.g. the parameters required and how the state variables change with time). Thus, NeuroMLv2 retains all the features of NeuroMLv1—it remains modular, declarative, and continues to support multiple simulation engines—but unlike version 1, it is extensible, and all specifications are fully machine-readable. NeuroMLv2 also moved to Python as its main interface language and provides a comprehensive set of Python libraries to improve usability (Vella et al., 2014), with XML retained as a machine-readable serialization format (i.e. the form in which the model files are saved/shared).\n\nSince its release in 2014, the NeuroMLv2 standard, the software ecosystem, and the community have all steadily grown. An open, community-based governance structure was put in place—an elected Editorial Board, overseen by an independent Scientific Committee, maintains the standard and core software tools—APIs, reference simulators, and utilities. Although these tools were initially focused on enabling the simulation of models on multiple platforms, they have been expanded to support all stages of the model life cycle (Figure 1). Modelers can use these tools to easily create, inspect and visualize, validate, simulate, fit and optimize, share and disseminate NeuroMLv2 models and outputs (Billings et al., 2014; Cayco‐Gajic et al., 2017; Gurnani and Silver, 2021; Kriener et al., 2022; Gleeson et al., 2019b). To provide clear, concise, searchable information for both users and developers, the NeuroML documentation has been significantly expanded and re-deployed using the latest modern web technologies (https://docs.neuroml.org). Increased community-wide collaborations have also extended the software ecosystem well beyond the NeuroMLv2 tools developed by the NeuroML team: additional simulators such as Brian (Stimberg et al., 2019), NetPyNE (Dura‐Bernal et al., 2019), Arbor (Akar et al., 2019) and EDEN (Panagiotou et al., 2022) all support NeuroMLv2. We have worked to ensure interoperability with other structured formats for model development in neuroscience such as PyNN (Davison et al., 2008) and SONATA (Dai et al., 2020). Platforms for collaboratively developing, visualizing, and sharing NeuroML models (Open Source Brain (OSB) Gleeson et al., 2019b) as well as a searchable database of NeuroML model components.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":34.63,"w":420,"h":672.76}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.968},{"page":4,"text":"           Tools  and  resources                                                                                                                                                                                                                    Neuroscience\n                                 Database (NeuroML-                                                                                       Database (NeuroML-                                                                                       Database (NeuroML-\n                                                                                                                                                                                                                                                    DB) (Birgiolas et al., 2023) have been developed. These enhancements, driven\n                                 by an ever-                                                                                              by an ever-                                                                                              by an ever-\n                                                                                                                                                                                                                                                    expanding community, have helped NeuroMLv2 grow into a standard that has been ofﬁ-\n                                 cially endorsed by international organizations such as the INCF and COmputational Modeling in            cially endorsed by international organizations such as the INCF and COmputational Modeling in            cially endorsed by international organizations such as the INCF and COmputational Modeling in\n                                 Biology NEtwork (COMBINE) (Hucka et al., 2015), and that is now sufﬁciently mature to be incorpo-        Biology NEtwork (COMBINE) (Hucka et al., 2015), and that is now sufﬁciently mature to be incorpo-        Biology NEtwork (COMBINE) (Hucka et al., 2015), and that is now sufﬁciently mature to be incorpo-\n                                 rated into a wide range of research workﬂows.                                                            rated into a wide range of research workﬂows.                                                            rated into a wide range of research workﬂows.\n                                                                                                                                                                                                                                                    In this paper, we provide an overview of the current scope of version 2 of the NeuroML standard,\n                                 describe the current software ecosystem and community, and outline the extensive resources to assist     describe the current software ecosystem and community, and outline the extensive resources to assist     describe the current software ecosystem and community, and outline the extensive resources to assist\n                                 researchers in incorporate NeuroML into their modeling work. We demonstrate, with examples, that         researchers in incorporate NeuroML into their modeling work. We demonstrate, with examples, that         researchers in incorporate NeuroML into their modeling work. We demonstrate, with examples, that\n                                 NeuroML supports users at all stages of the model development life cycle (Figure 1) and promotes         NeuroML supports users at all stages of the model development life cycle (Figure 1) and promotes         NeuroML supports users at all stages of the model development life cycle (Figure 1) and promotes\n                                 FAIR principles in computational neuroscience. We highlight the various NeuroML tools and libraries,     FAIR principles in computational neuroscience. We highlight the various NeuroML tools and libraries,     FAIR principles in computational neuroscience. We highlight the various NeuroML tools and libraries,\n                                 additional utilities, supported simulation engines, and the related projects that build upon NeuroML     additional utilities, supported simulation engines, and the related projects that build upon NeuroML     additional utilities, supported simulation engines, and the related projects that build upon NeuroML\n                                 for automated model validation, advanced analysis, visualization, and sharing/re-                        for automated model validation, advanced analysis, visualization, and sharing/re-                        for automated model validation, advanced analysis, visualization, and sharing/re-\n                                                                                                                                                                                                                                                    use of models. Finally,\n                                 we summarize the organizational aspects of NeuroML, its governance structure and its community.          we summarize the organizational aspects of NeuroML, its governance structure and its community.          we summarize the organizational aspects of NeuroML, its governance structure and its community.\n                                 Results                                                                                                  Results                                                                                                  Results\n                                 NeuroML provides a ready-to-use set of curated model elements                                            NeuroML provides a ready-to-use set of curated model elements                                            NeuroML provides a ready-to-use set of curated model elements\n                                 A central aim of the NeuroML initiative is to enable and encourage the use of multi-                     A central aim of the NeuroML initiative is to enable and encourage the use of multi-                     A central aim of the NeuroML initiative is to enable and encourage the use of multi-\n                                                                                                                                                                                                                                                    scale biophysically\n                                 detailed models of neurons and neuronal circuits in neuroscience research. The initiative takes a range  detailed models of neurons and neuronal circuits in neuroscience research. The initiative takes a range  detailed models of neurons and neuronal circuits in neuroscience research. The initiative takes a range\n                                 of steps to achieve this aim.                                                                            of steps to achieve this aim.                                                                            of steps to achieve this aim.\n                                                                                                                                                                                                                                                    NeuroML provides users with a curated library of model elements that form the NeuroML standard\n                                 (An index of all the model elements included in version 2.3 of NeuroML, with links to further online     (An index of all the model elements included in version 2.3 of NeuroML, with links to further online     (An index of all the model elements included in version 2.3 of NeuroML, with links to further online\n                                 documentation, is provided in Tables 1 and 2; Figure 2). The standard is maintained by the NeuroML       documentation, is provided in Tables 1 and 2; Figure 2). The standard is maintained by the NeuroML       documentation, is provided in Tables 1 and 2; Figure 2). The standard is maintained by the NeuroML\n                                 Editorial Board that has identiﬁed a fundamental set of model types to support, to ensure that a         Editorial Board that has identiﬁed a fundamental set of model types to support, to ensure that a         Editorial Board that has identiﬁed a fundamental set of model types to support, to ensure that a\n                                 signiﬁcant proportion of commonly used neurobiological modeling entities can be described with the       signiﬁcant proportion of commonly used neurobiological modeling entities can be described with the       signiﬁcant proportion of commonly used neurobiological modeling entities can be described with the\n                                 language. This includes (but is not limited to): active membrane conductances (using Hodgkin-            language. This includes (but is not limited to): active membrane conductances (using Hodgkin-            language. This includes (but is not limited to): active membrane conductances (using Hodgkin-\n                                                                                                                                                                                                                                                    Huxley\n                                 style [Hodgkin and Huxley, 1952] or kinetic scheme-                                                      style [Hodgkin and Huxley, 1952] or kinetic scheme-                                                      style [Hodgkin and Huxley, 1952] or kinetic scheme-\n                                                                                                                                                                                                                                                    based ionic conductances), multiple synapse and\n                                 plasticity mechanisms, detailed multi-compartmental neuron models with morphologies and biophys-         plasticity mechanisms, detailed multi-compartmental neuron models with morphologies and biophys-         plasticity mechanisms, detailed multi-compartmental neuron models with morphologies and biophys-\n                                 ical properties, abstract point neuron models, and networks of such cells spatially arranged in popula-  ical properties, abstract point neuron models, and networks of such cells spatially arranged in popula-  ical properties, abstract point neuron models, and networks of such cells spatially arranged in popula-\n                                 tions, connected by targeted projections, receiving spiking and currently based inputs.                  tions, connected by targeted projections, receiving spiking and currently based inputs.                  tions, connected by targeted projections, receiving spiking and currently based inputs.\n                                                                                                                                                                                                                                                    The NeuroMLv2 standard consists of two levels that are designed to enable users to easily create\n                                 their models without worrying about simulator-                                                           their models without worrying about simulator-                                                           their models without worrying about simulator-\n                                                                                                                                                                                                                                                    speciﬁc details. The ﬁrst level deﬁnes a formal ‘schema’\n                                 for the standard model elements, their attributes/parameters (e.g. an integrate and ﬁre cell model       for the standard model elements, their attributes/parameters (e.g. an integrate and ﬁre cell model       for the standard model elements, their attributes/parameters (e.g. an integrate and ﬁre cell model\n                                 and its necessary attributes: a threshold parameter, a reset parameter, etc.), and the relationships     and its necessary attributes: a threshold parameter, a reset parameter, etc.), and the relationships     and its necessary attributes: a threshold parameter, a reset parameter, etc.), and the relationships\n                                 between them (e.g. a network contains populations; a multi-                                              between them (e.g. a network contains populations; a multi-                                              between them (e.g. a network contains populations; a multi-\n                                                                                                                                                                                                                                                    compartmental cell morphology contains\n                                 segments). This allows the validation of the completeness of the description of individual NeuroML       segments). This allows the validation of the completeness of the description of individual NeuroML       segments). This allows the validation of the completeness of the description of individual NeuroML\n                                 model elements and models, prior to simulation. The second level deﬁnes the underlying dynamical         model elements and models, prior to simulation. The second level deﬁnes the underlying dynamical         model elements and models, prior to simulation. The second level deﬁnes the underlying dynamical\n                                 behavior of the model elements (e.g. how the time-                                                       behavior of the model elements (e.g. how the time-                                                       behavior of the model elements (e.g. how the time-\n                                                                                                                                                                                                                                                    varying membrane potential of a cell model is to\n                                 be calculated). Most users do not need to interact with this level (which is enabled by LEMS), which,    be calculated). Most users do not need to interact with this level (which is enabled by LEMS), which,    be calculated). Most users do not need to interact with this level (which is enabled by LEMS), which,\n                                 among other features, enables the automated translation of simulator‐ independent NeuroML models         among other features, enables the automated translation of simulator‐ independent NeuroML models         among other features, enables the automated translation of simulator‐ independent NeuroML models\n                                 into simulator‐ speciﬁc code.                                                                            into simulator‐ speciﬁc code.                                                                            into simulator‐ speciﬁc code.\n                                                                                                                                                                                                                                                    Thus, modelers can use the standard NeuroML elements to conveniently build simulator-\n                                 independent models, while also being able to examine and extend the underlying implementations           independent models, while also being able to examine and extend the underlying implementations           independent models, while also being able to examine and extend the underlying implementations\n                                 of models. As a simulator- independent language, NeuroML also promotes interoperability between          of models. As a simulator- independent language, NeuroML also promotes interoperability between          of models. As a simulator- independent language, NeuroML also promotes interoperability between\n                                 different computational modeling tools, and as a result, the standard library is complemented by a       different computational modeling tools, and as a result, the standard library is complemented by a       different computational modeling tools, and as a result, the standard library is complemented by a\n                                 large, well-                                                                                             large, well-                                                                                             large, well-\n                                                                                                                                                                                                                                                    maintained ecosystem of software tools that support all stages of the model life cycle—\n                                 from creation, analysis, simulation, and ﬁtting, to sharing and reuse. Finally, as discussed in later    from creation, analysis, simulation, and ﬁtting, to sharing and reuse. Finally, as discussed in later    from creation, analysis, simulation, and ﬁtting, to sharing and reuse. Finally, as discussed in later\n                                 sections, for advanced use cases where the existing NeuroML model building blocks are insufﬁcient,       sections, for advanced use cases where the existing NeuroML model building blocks are insufﬁcient,       sections, for advanced use cases where the existing NeuroML model building blocks are insufﬁcient,\n                                 NeuroML also includes a framework for creating and including new model elements.                         NeuroML also includes a framework for creating and including new model elements.                         NeuroML also includes a framework for creating and including new model elements.\n                                 NeuroML is a modular, structured language for defining FAIR models                                       NeuroML is a modular, structured language for defining FAIR models                                       NeuroML is a modular, structured language for defining FAIR models\n                                 NeuroMLv2 is a modular, structured, hierarchical, simulator-                                             NeuroMLv2 is a modular, structured, hierarchical, simulator-                                             NeuroMLv2 is a modular, structured, hierarchical, simulator-\n                                                                                                                                                                                                                                                    independent format. All NeuroML elements\n                                 are formally deﬁned, independent, and self- contained with hierarchical relationships between them.      are formally deﬁned, independent, and self- contained with hierarchical relationships between them.      are formally deﬁned, independent, and self- contained with hierarchical relationships between them.\n                                 An ‘ionic conductance’ model element in NeuroML, for example, can contain zero, one, or more             An ‘ionic conductance’ model element in NeuroML, for example, can contain zero, one, or more             An ‘ionic conductance’ model element in NeuroML, for example, can contain zero, one, or more\n                                 ‘gates’ and be added into a ‘cell’ model element along with a ‘morphology’ element, which can then       ‘gates’ and be added into a ‘cell’ model element along with a ‘morphology’ element, which can then       ‘gates’ and be added into a ‘cell’ model element along with a ‘morphology’ element, which can then\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                               4 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nDatabase (NeuroML-DB) (Birgiolas et al., 2023) have been developed. These enhancements, driven by an ever-expanding community, have helped NeuroMLv2 grow into a standard that has been officially endorsed by international organizations such as the INCF and Computational Modeling in Biology NEtwork (COMBINE) (Hucka et al., 2015), and that is now sufficiently mature to be incorporated into a wide range of research workflows.\n\nIn this paper, we provide an overview of the current scope of version 2 of the NeuroML standard, describe the current software ecosystem and community, and outline the extensive resources to assist researchers in incorporating NeuroML into their modeling work. We demonstrate, with examples, that NeuroML supports users at all stages of the model development life cycle (Figure 1) and promotes FAIR principles in computational neuroscience. We highlight the various NeuroML tools and libraries, additional utilities, supported simulation engines, and the related projects that build upon NeuroML for automated model validation, advanced analysis, visualization, and sharing/reuse of models. Finally, we summarize the organizational aspects of NeuroML, its governance structure and its community.\n\n# Results\n\nNeuroML provides a ready-to-use set of curated model elements. A central aim of the NeuroML initiative is to enable and encourage the use of multi-detailed models of neurons and neuronal circuits in neuroscience research. The initiative takes a range of steps to achieve this aim.\n\nNeuroML provides users with a curated library of model elements that form the NeuroML standard (An index of all the model elements included in version 2.3 of NeuroML, with links to further online documentation, is provided in Tables 1 and 2; Figure 2). The standard is maintained by the NeuroML Editorial Board that has identified a fundamental set of model types to support, to ensure that a significant proportion of commonly used neurobiological modeling entities can be described with the language. This includes (but is not limited to): active membrane conductances (using Hodgkin-style [Hodgkin and Huxley, 1952] or kinetic scheme-based ionic conductances), multiple synapse and plasticity mechanisms, detailed multi-compartmental neuron models with morphologies and biophysical properties, abstract point neuron models, and networks of such cells spatially arranged in populations, connected by targeted projections, receiving spiking and currently based inputs.\n\nThe NeuroMLv2 standard consists of two levels that are designed to enable users to easily create their models without worrying about simulator-specific details. The first level defines a formal ‘schema’ for the standard model elements, their attributes/parameters (e.g. an integrate and fire cell model and its necessary attributes: a threshold parameter, a reset parameter, etc.), and the relationships between them (e.g. a network contains populations; a multi-segments). This allows the validation of the completeness of the description of individual NeuroML model elements and models, prior to simulation. The second level defines the underlying dynamical behavior of the model elements (e.g. how the time-varying membrane potential of a cell model is to be calculated). Most users do not need to interact with this level (which is enabled by LEMS), which, among other features, enables the automated translation of simulator-independent NeuroML models into simulator-specific code.\n\nThus, modelers can use the standard NeuroML elements to conveniently build simulator-independent models, while also being able to examine and extend the underlying implementations of models. As a simulator-independent language, NeuroML also promotes interoperability between different computational modeling tools, and as a result, the standard library is complemented by a large, well-maintained ecosystem of software tools that support all stages of the model life cycle—from creation, analysis, simulation, and fitting, to sharing and reuse. Finally, as discussed in later sections, for advanced use cases where the existing NeuroML model building blocks are insufficient, NeuroML also includes a framework for creating and including new model elements.\n\n# NeuroML is a modular, structured language for defining FAIR models\n\nNeuroMLv2 is a modular, structured, hierarchical, simulator-independent format. All NeuroML elements are formally defined, independent, and self-contained with hierarchical relationships between them. An ‘ionic conductance’ model element in NeuroML, for example, can contain zero, one, or more ‘gates’ and be added into a ‘cell’ model element along with a ‘morphology’ element, which can then...\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"Database (NeuroML-DB) (Birgiolas et al., 2023) have been developed. These enhancements, driven by an ever-expanding community, have helped NeuroMLv2 grow into a standard that has been officially endorsed by international organizations such as the INCF and Computational Modeling in Biology NEtwork (COMBINE) (Hucka et al., 2015), and that is now sufficiently mature to be incorporated into a wide range of research workflows.\n\nIn this paper, we provide an overview of the current scope of version 2 of the NeuroML standard, describe the current software ecosystem and community, and outline the extensive resources to assist researchers in incorporating NeuroML into their modeling work. We demonstrate, with examples, that NeuroML supports users at all stages of the model development life cycle (Figure 1) and promotes FAIR principles in computational neuroscience. We highlight the various NeuroML tools and libraries, additional utilities, supported simulation engines, and the related projects that build upon NeuroML for automated model validation, advanced analysis, visualization, and sharing/reuse of models. Finally, we summarize the organizational aspects of NeuroML, its governance structure and its community.","md":"Database (NeuroML-DB) (Birgiolas et al., 2023) have been developed. These enhancements, driven by an ever-expanding community, have helped NeuroMLv2 grow into a standard that has been officially endorsed by international organizations such as the INCF and Computational Modeling in Biology NEtwork (COMBINE) (Hucka et al., 2015), and that is now sufficiently mature to be incorporated into a wide range of research workflows.\n\nIn this paper, we provide an overview of the current scope of version 2 of the NeuroML standard, describe the current software ecosystem and community, and outline the extensive resources to assist researchers in incorporating NeuroML into their modeling work. We demonstrate, with examples, that NeuroML supports users at all stages of the model development life cycle (Figure 1) and promotes FAIR principles in computational neuroscience. We highlight the various NeuroML tools and libraries, additional utilities, supported simulation engines, and the related projects that build upon NeuroML for automated model validation, advanced analysis, visualization, and sharing/reuse of models. Finally, we summarize the organizational aspects of NeuroML, its governance structure and its community.","bBox":{"x":168.53,"y":34.63,"w":413,"h":170.13}},{"type":"heading","lvl":1,"value":"Results","md":"# Results","bBox":{"x":168.53,"y":229.53,"w":47,"h":14}},{"type":"text","value":"NeuroML provides a ready-to-use set of curated model elements. A central aim of the NeuroML initiative is to enable and encourage the use of multi-detailed models of neurons and neuronal circuits in neuroscience research. The initiative takes a range of steps to achieve this aim.\n\nNeuroML provides users with a curated library of model elements that form the NeuroML standard (An index of all the model elements included in version 2.3 of NeuroML, with links to further online documentation, is provided in Tables 1 and 2; Figure 2). The standard is maintained by the NeuroML Editorial Board that has identified a fundamental set of model types to support, to ensure that a significant proportion of commonly used neurobiological modeling entities can be described with the language. This includes (but is not limited to): active membrane conductances (using Hodgkin-style [Hodgkin and Huxley, 1952] or kinetic scheme-based ionic conductances), multiple synapse and plasticity mechanisms, detailed multi-compartmental neuron models with morphologies and biophysical properties, abstract point neuron models, and networks of such cells spatially arranged in populations, connected by targeted projections, receiving spiking and currently based inputs.\n\nThe NeuroMLv2 standard consists of two levels that are designed to enable users to easily create their models without worrying about simulator-specific details. The first level defines a formal ‘schema’ for the standard model elements, their attributes/parameters (e.g. an integrate and fire cell model and its necessary attributes: a threshold parameter, a reset parameter, etc.), and the relationships between them (e.g. a network contains populations; a multi-segments). This allows the validation of the completeness of the description of individual NeuroML model elements and models, prior to simulation. The second level defines the underlying dynamical behavior of the model elements (e.g. how the time-varying membrane potential of a cell model is to be calculated). Most users do not need to interact with this level (which is enabled by LEMS), which, among other features, enables the automated translation of simulator-independent NeuroML models into simulator-specific code.\n\nThus, modelers can use the standard NeuroML elements to conveniently build simulator-independent models, while also being able to examine and extend the underlying implementations of models. As a simulator-independent language, NeuroML also promotes interoperability between different computational modeling tools, and as a result, the standard library is complemented by a large, well-maintained ecosystem of software tools that support all stages of the model life cycle—from creation, analysis, simulation, and fitting, to sharing and reuse. Finally, as discussed in later sections, for advanced use cases where the existing NeuroML model building blocks are insufficient, NeuroML also includes a framework for creating and including new model elements.","md":"NeuroML provides a ready-to-use set of curated model elements. A central aim of the NeuroML initiative is to enable and encourage the use of multi-detailed models of neurons and neuronal circuits in neuroscience research. The initiative takes a range of steps to achieve this aim.\n\nNeuroML provides users with a curated library of model elements that form the NeuroML standard (An index of all the model elements included in version 2.3 of NeuroML, with links to further online documentation, is provided in Tables 1 and 2; Figure 2). The standard is maintained by the NeuroML Editorial Board that has identified a fundamental set of model types to support, to ensure that a significant proportion of commonly used neurobiological modeling entities can be described with the language. This includes (but is not limited to): active membrane conductances (using Hodgkin-style [Hodgkin and Huxley, 1952] or kinetic scheme-based ionic conductances), multiple synapse and plasticity mechanisms, detailed multi-compartmental neuron models with morphologies and biophysical properties, abstract point neuron models, and networks of such cells spatially arranged in populations, connected by targeted projections, receiving spiking and currently based inputs.\n\nThe NeuroMLv2 standard consists of two levels that are designed to enable users to easily create their models without worrying about simulator-specific details. The first level defines a formal ‘schema’ for the standard model elements, their attributes/parameters (e.g. an integrate and fire cell model and its necessary attributes: a threshold parameter, a reset parameter, etc.), and the relationships between them (e.g. a network contains populations; a multi-segments). This allows the validation of the completeness of the description of individual NeuroML model elements and models, prior to simulation. The second level defines the underlying dynamical behavior of the model elements (e.g. how the time-varying membrane potential of a cell model is to be calculated). Most users do not need to interact with this level (which is enabled by LEMS), which, among other features, enables the automated translation of simulator-independent NeuroML models into simulator-specific code.\n\nThus, modelers can use the standard NeuroML elements to conveniently build simulator-independent models, while also being able to examine and extend the underlying implementations of models. As a simulator-independent language, NeuroML also promotes interoperability between different computational modeling tools, and as a result, the standard library is complemented by a large, well-maintained ecosystem of software tools that support all stages of the model life cycle—from creation, analysis, simulation, and fitting, to sharing and reuse. Finally, as discussed in later sections, for advanced use cases where the existing NeuroML model building blocks are insufficient, NeuroML also includes a framework for creating and including new model elements.","bBox":{"x":168.53,"y":34.63,"w":414,"h":608.8}},{"type":"heading","lvl":1,"value":"NeuroML is a modular, structured language for defining FAIR models","md":"# NeuroML is a modular, structured language for defining FAIR models","bBox":{"x":168.53,"y":658.48,"w":391,"h":12}},{"type":"text","value":"NeuroMLv2 is a modular, structured, hierarchical, simulator-independent format. All NeuroML elements are formally defined, independent, and self-contained with hierarchical relationships between them. An ‘ionic conductance’ model element in NeuroML, for example, can contain zero, one, or more ‘gates’ and be added into a ‘cell’ model element along with a ‘morphology’ element, which can then...\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"NeuroMLv2 is a modular, structured, hierarchical, simulator-independent format. All NeuroML elements are formally defined, independent, and self-contained with hierarchical relationships between them. An ‘ionic conductance’ model element in NeuroML, for example, can contain zero, one, or more ‘gates’ and be added into a ‘cell’ model element along with a ‘morphology’ element, which can then...\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":674.48,"w":412.76,"h":44.99}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.379},{"page":5,"text":"                                                        Tools  and  resources                                                                             Neuroscience\nTable 1. Index of standard NeuroMLv2 ComponentTypes.   Table 1. Index of standard NeuroMLv2 ComponentTypes.\nCore components                                        Core components\nannotation                                             annotation                          bqbiol_encodes                   bqbiol_hasPart\nbqbiol_hasProperty                                     bqbiol_hasProperty                  bqbiol_hasTaxon                  bqbiol_hasVersion\nbqbiol_is                                              bqbiol_is                           bqbiol_isDescribedBy             bqbiol_isEncodedBy\nbqbiol_isHomologTo                                     bqbiol_isHomologTo                  bqbiol_isPartOf                  bqbiol_isPropertyOf\nbqbiol_isVersionOf                                     bqbiol_isVersionOf                  bqbiol_occursIn                  bqmodel_is\nbqmodel_isDerivedFrom                                  bqmodel_isDerivedFrom               bqmodel_isDescribedBy            rdf_Bag\nrdf_Description                                        rdf_Description                     rdf_li                           rdf_RDF\nproperty                                               property                            point3DWithDiam                  notes\nCore dimensions                                        Core dimensions\narea                                                   area                                capacitance                      charge\ncharge_per_mole                                        charge_per_mole                     concentration                    conductance\nconductance_per_voltage                                conductance_per_voltage             conductanceDensity               current\ncurrentDensity                                         currentDensity                      idealGasConstantDims             length\nper_time                                               per_time                            per_voltage                      permeability\nresistance                                             resistance                          resistivity                      rho_factor\nspecificCapacitance                                    specificCapacitance                 substance                        temperature\ntime                                                   time                                voltage                          volume\nAbstract cell models                                   Abstract cell models\nadExIaFCell                                            adExIaFCell                         fitzHughNagumoCell               hindmarshRose1984Cell\niafCell                                                iafCell                             iafRefCell                       iafTauCell\niafTauRefCell                                          iafTauRefCell                       izhikevich2007Cell               izhikevichCell\npinskyRinzelCA3Cell                                    pinskyRinzelCA3Cell\nComponentTypes related to biophysically detailed cells ComponentTypes related to biophysically detailed cells\nbiophysical Properties                                 biophysical Properties              biophysicalProperties2CaPools    cell\ncell2CaPools                                           cell2CaPools                        concentration Model              decayingPoolConcentrationModel\ndistal                                                 distal                              distalProperties                 fixedFactorConcentrationModel\nfixedFactorConcentrationModelTraub                     fixedFactorConcentrationModelTraub  from                             include\ninhomogeneousParameter                                 inhomogeneousParameter              inhomogeneousValue               initMembPotential\nintracellular Properties                               intracellular Properties            intracellularProperties2CaPools  member\nmembraneProperties                                     membraneProperties                  membraneProperties2CaPools       morphology\nparent                                                 parent                              path                             pointCellCondBased\npointCellCondBasedCa                                   pointCellCondBasedCa                proximal                         proximalProperties\nsegment                                                segment                             segment Group                    species\nspikeThresh                                            spikeThresh                         subTree                          to\nvariable Parameter                                     variable Parameter                  channel Density                  channelDensityGHK\nchannelDensityGHK2                                     channelDensityGHK2                  channelDensityNernst             channelDensityNernstCa2\nchannelDensityNonUniform                               channelDensityNonUniform            channelDensityNonUniformGHK      channelDensityNonUniformNernst\nchannelDensityVShift                                   channelDensityVShift                channelPopulation                channelPopulationNernst\nComponentTypes related to ion channels                 ComponentTypes related to ion channels\nfixedTimeCourse                                        fixedTimeCourse                     forward Transition               gate\ngateFractional                                         gateFractional                      gateHHInstantaneous              gateHHrates\ngateHHratesInf                                         gateHHratesInf                      gateHHratesTau                   gateHHratesTauInf\n                                                       Table 1 continued on next page\n                                                       Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                      5 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Table 1. Index of standard NeuroMLv2 ComponentTypes.\n\n| Core components                                        |                                    |\n| ------------------------------------------------------ | ---------------------------------- |\n| annotation                                             | bqbiol\\_encodes                    |\n| bqbiol\\_hasProperty                                    | bqbiol\\_hasTaxon                   |\n| bqbiol\\_hasVersion                                     | bqbiol\\_is                         |\n| bqbiol\\_isDescribedBy                                  | bqbiol\\_isEncodedBy                |\n| bqbiol\\_isHomologTo                                    | bqbiol\\_isPartOf                   |\n| bqbiol\\_isPropertyOf                                   | bqbiol\\_isVersionOf                |\n| bqbiol\\_occursIn                                       | bqmodel\\_is                        |\n| bqmodel\\_isDerivedFrom                                 | bqmodel\\_isDescribedBy             |\n| rdf\\_Bag                                               | rdf\\_Description                   |\n| rdf\\_li                                                | rdf\\_RDF                           |\n| property                                               | point3DWithDiam                    |\n| notes                                                  |                                    |\n| Core dimensions                                        |                                    |\n| area                                                   | capacitance                        |\n| charge                                                 | charge\\_per\\_mole                  |\n| concentration                                          | conductance                        |\n| conductance\\_per\\_voltage                              | conductanceDensity                 |\n| current                                                | currentDensity                     |\n| idealGasConstantDims                                   | length                             |\n| per\\_time                                              | per\\_voltage                       |\n| permeability                                           | resistance                         |\n| resistivity                                            | rho\\_factor                        |\n| specificCapacitance                                    | substance                          |\n| temperature                                            | time                               |\n| voltage                                                | volume                             |\n| Abstract cell models                                   |                                    |\n| adExIaFCell                                            | fitzHughNagumoCell                 |\n| hindmarshRose1984Cell                                  | iafCell                            |\n| iafRefCell                                             | iafTauCell                         |\n| iafTauRefCell                                          | izhikevich2007Cell                 |\n| izhikevichCell                                         | pinskyRinzelCA3Cell                |\n| ComponentTypes related to biophysically detailed cells |                                    |\n| biophysical Properties                                 | biophysicalProperties2CaPools      |\n| cell                                                   | cell2CaPools                       |\n| concentration Model                                    | decayingPoolConcentrationModel     |\n| distal                                                 | distalProperties                   |\n| fixedFactorConcentrationModel                          | fixedFactorConcentrationModelTraub |\n| from                                                   | include                            |\n| inhomogeneousParameter                                 | inhomogeneousValue                 |\n| initMembPotential                                      | intracellular Properties           |\n| intracellularProperties2CaPools                        | member                             |\n| membraneProperties                                     | membraneProperties2CaPools         |\n| morphology                                             | parent                             |\n| path                                                   | pointCellCondBased                 |\n| pointCellCondBasedCa                                   | proximal                           |\n| proximalProperties                                     | segment                            |\n| segment Group                                          | species                            |\n| spikeThresh                                            | subTree                            |\n| to                                                     | variable Parameter                 |\n| channel Density                                        | channelDensityGHK                  |\n| channelDensityGHK2                                     | channelDensityNernst               |\n| channelDensityNernstCa2                                | channelDensityNonUniform           |\n| channelDensityNonUniformGHK                            | channelDensityNonUniformNernst     |\n| channelDensityVShift                                   | channelPopulation                  |\n| channelPopulationNernst                                |                                    |\n\nTable 1 continued on next page\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":303.81,"h":552.03}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Table 1. Index of standard NeuroMLv2 ComponentTypes.","md":"# Table 1. Index of standard NeuroMLv2 ComponentTypes.","bBox":{"x":36.5,"y":57.3,"w":232.59,"h":9}},{"type":"table","rows":[["Core components",""],["annotation","bqbiol_encodes"],["bqbiol_hasProperty","bqbiol_hasTaxon"],["bqbiol_hasVersion","bqbiol_is"],["bqbiol_isDescribedBy","bqbiol_isEncodedBy"],["bqbiol_isHomologTo","bqbiol_isPartOf"],["bqbiol_isPropertyOf","bqbiol_isVersionOf"],["bqbiol_occursIn","bqmodel_is"],["bqmodel_isDerivedFrom","bqmodel_isDescribedBy"],["rdf_Bag","rdf_Description"],["rdf_li","rdf_RDF"],["property","point3DWithDiam"],["notes",""],["Core dimensions",""],["area","capacitance"],["charge","charge_per_mole"],["concentration","conductance"],["conductance_per_voltage","conductanceDensity"],["current","currentDensity"],["idealGasConstantDims","length"],["per_time","per_voltage"],["permeability","resistance"],["resistivity","rho_factor"],["specificCapacitance","substance"],["temperature","time"],["voltage","volume"],["Abstract cell models",""],["adExIaFCell","fitzHughNagumoCell"],["hindmarshRose1984Cell","iafCell"],["iafRefCell","iafTauCell"],["iafTauRefCell","izhikevich2007Cell"],["izhikevichCell","pinskyRinzelCA3Cell"],["ComponentTypes related to biophysically detailed cells",""],["biophysical Properties","biophysicalProperties2CaPools"],["cell","cell2CaPools"],["concentration Model","decayingPoolConcentrationModel"],["distal","distalProperties"],["fixedFactorConcentrationModel","fixedFactorConcentrationModelTraub"],["from","include"],["inhomogeneousParameter","inhomogeneousValue"],["initMembPotential","intracellular Properties"],["intracellularProperties2CaPools","member"],["membraneProperties","membraneProperties2CaPools"],["morphology","parent"],["path","pointCellCondBased"],["pointCellCondBasedCa","proximal"],["proximalProperties","segment"],["segment Group","species"],["spikeThresh","subTree"],["to","variable Parameter"],["channel Density","channelDensityGHK"],["channelDensityGHK2","channelDensityNernst"],["channelDensityNernstCa2","channelDensityNonUniform"],["channelDensityNonUniformGHK","channelDensityNonUniformNernst"],["channelDensityVShift","channelPopulation"],["channelPopulationNernst",""]],"md":"| Core components                                        |                                    |\n| ------------------------------------------------------ | ---------------------------------- |\n| annotation                                             | bqbiol\\_encodes                    |\n| bqbiol\\_hasProperty                                    | bqbiol\\_hasTaxon                   |\n| bqbiol\\_hasVersion                                     | bqbiol\\_is                         |\n| bqbiol\\_isDescribedBy                                  | bqbiol\\_isEncodedBy                |\n| bqbiol\\_isHomologTo                                    | bqbiol\\_isPartOf                   |\n| bqbiol\\_isPropertyOf                                   | bqbiol\\_isVersionOf                |\n| bqbiol\\_occursIn                                       | bqmodel\\_is                        |\n| bqmodel\\_isDerivedFrom                                 | bqmodel\\_isDescribedBy             |\n| rdf\\_Bag                                               | rdf\\_Description                   |\n| rdf\\_li                                                | rdf\\_RDF                           |\n| property                                               | point3DWithDiam                    |\n| notes                                                  |                                    |\n| Core dimensions                                        |                                    |\n| area                                                   | capacitance                        |\n| charge                                                 | charge\\_per\\_mole                  |\n| concentration                                          | conductance                        |\n| conductance\\_per\\_voltage                              | conductanceDensity                 |\n| current                                                | currentDensity                     |\n| idealGasConstantDims                                   | length                             |\n| per\\_time                                              | per\\_voltage                       |\n| permeability                                           | resistance                         |\n| resistivity                                            | rho\\_factor                        |\n| specificCapacitance                                    | substance                          |\n| temperature                                            | time                               |\n| voltage                                                | volume                             |\n| Abstract cell models                                   |                                    |\n| adExIaFCell                                            | fitzHughNagumoCell                 |\n| hindmarshRose1984Cell                                  | iafCell                            |\n| iafRefCell                                             | iafTauCell                         |\n| iafTauRefCell                                          | izhikevich2007Cell                 |\n| izhikevichCell                                         | pinskyRinzelCA3Cell                |\n| ComponentTypes related to biophysically detailed cells |                                    |\n| biophysical Properties                                 | biophysicalProperties2CaPools      |\n| cell                                                   | cell2CaPools                       |\n| concentration Model                                    | decayingPoolConcentrationModel     |\n| distal                                                 | distalProperties                   |\n| fixedFactorConcentrationModel                          | fixedFactorConcentrationModelTraub |\n| from                                                   | include                            |\n| inhomogeneousParameter                                 | inhomogeneousValue                 |\n| initMembPotential                                      | intracellular Properties           |\n| intracellularProperties2CaPools                        | member                             |\n| membraneProperties                                     | membraneProperties2CaPools         |\n| morphology                                             | parent                             |\n| path                                                   | pointCellCondBased                 |\n| pointCellCondBasedCa                                   | proximal                           |\n| proximalProperties                                     | segment                            |\n| segment Group                                          | species                            |\n| spikeThresh                                            | subTree                            |\n| to                                                     | variable Parameter                 |\n| channel Density                                        | channelDensityGHK                  |\n| channelDensityGHK2                                     | channelDensityNernst               |\n| channelDensityNernstCa2                                | channelDensityNonUniform           |\n| channelDensityNonUniformGHK                            | channelDensityNonUniformNernst     |\n| channelDensityVShift                                   | channelPopulation                  |\n| channelPopulationNernst                                |                                    |","isPerfectTable":true,"csv":"\"Core components\",\"\"\n\"annotation\",\"bqbiol_encodes\"\n\"bqbiol_hasProperty\",\"bqbiol_hasTaxon\"\n\"bqbiol_hasVersion\",\"bqbiol_is\"\n\"bqbiol_isDescribedBy\",\"bqbiol_isEncodedBy\"\n\"bqbiol_isHomologTo\",\"bqbiol_isPartOf\"\n\"bqbiol_isPropertyOf\",\"bqbiol_isVersionOf\"\n\"bqbiol_occursIn\",\"bqmodel_is\"\n\"bqmodel_isDerivedFrom\",\"bqmodel_isDescribedBy\"\n\"rdf_Bag\",\"rdf_Description\"\n\"rdf_li\",\"rdf_RDF\"\n\"property\",\"point3DWithDiam\"\n\"notes\",\"\"\n\"Core dimensions\",\"\"\n\"area\",\"capacitance\"\n\"charge\",\"charge_per_mole\"\n\"concentration\",\"conductance\"\n\"conductance_per_voltage\",\"conductanceDensity\"\n\"current\",\"currentDensity\"\n\"idealGasConstantDims\",\"length\"\n\"per_time\",\"per_voltage\"\n\"permeability\",\"resistance\"\n\"resistivity\",\"rho_factor\"\n\"specificCapacitance\",\"substance\"\n\"temperature\",\"time\"\n\"voltage\",\"volume\"\n\"Abstract cell models\",\"\"\n\"adExIaFCell\",\"fitzHughNagumoCell\"\n\"hindmarshRose1984Cell\",\"iafCell\"\n\"iafRefCell\",\"iafTauCell\"\n\"iafTauRefCell\",\"izhikevich2007Cell\"\n\"izhikevichCell\",\"pinskyRinzelCA3Cell\"\n\"ComponentTypes related to biophysically detailed cells\",\"\"\n\"biophysical Properties\",\"biophysicalProperties2CaPools\"\n\"cell\",\"cell2CaPools\"\n\"concentration Model\",\"decayingPoolConcentrationModel\"\n\"distal\",\"distalProperties\"\n\"fixedFactorConcentrationModel\",\"fixedFactorConcentrationModelTraub\"\n\"from\",\"include\"\n\"inhomogeneousParameter\",\"inhomogeneousValue\"\n\"initMembPotential\",\"intracellular Properties\"\n\"intracellularProperties2CaPools\",\"member\"\n\"membraneProperties\",\"membraneProperties2CaPools\"\n\"morphology\",\"parent\"\n\"path\",\"pointCellCondBased\"\n\"pointCellCondBasedCa\",\"proximal\"\n\"proximalProperties\",\"segment\"\n\"segment Group\",\"species\"\n\"spikeThresh\",\"subTree\"\n\"to\",\"variable Parameter\"\n\"channel Density\",\"channelDensityGHK\"\n\"channelDensityGHK2\",\"channelDensityNernst\"\n\"channelDensityNernstCa2\",\"channelDensityNonUniform\"\n\"channelDensityNonUniformGHK\",\"channelDensityNonUniformNernst\"\n\"channelDensityVShift\",\"channelPopulation\"\n\"channelPopulationNernst\",\"\"","bBox":{"x":36.5,"y":34.63,"w":538.28,"h":720.13}},{"type":"text","value":"Table 1 continued on next page\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Table 1 continued on next page\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":36.5,"y":711.86,"w":127,"h":9}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-annotation","text":"annotation"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-encodes","text":"bqbiol_encodes"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-haspart","text":"bqbiol_hasPart"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-hasproperty","text":"bqbiol_hasProperty"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-hastaxon","text":"bqbiol_hasTaxon"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-hasversion","text":"bqbiol_hasVersion"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-is","text":"bqbiol_is"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-isdescribedby","text":"bqbiol_isDescribedBy"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-isencodedby","text":"bqbiol_isEncodedBy"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-ishomologto","text":"bqbiol_isHomologTo"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-ispartof","text":"bqbiol_isPartOf"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-ispropertyof","text":"bqbiol_isPropertyOf"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-isversionof","text":"bqbiol_isVersionOf"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqbiol-occursin","text":"bqbiol_occursIn"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqmodel-is","text":"bqmodel_is"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqmodel-isderivedfrom","text":"bqmodel_isDerivedFrom"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-bqmodel-isdescribedby","text":"bqmodel_isDescribedBy"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-rdf-bag","text":"rdf_Bag"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-rdf-description","text":"rdf_Description"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-rdf-li","text":"rdf_li"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-rdf-rdf","text":"rdf_RDF"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-property","text":"property"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-point3dwithdiam","text":"point3DWithDiam"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreCompTypes.html#schema-notes","text":"notes"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-area","text":"area"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-capacitance","text":"capacitance"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-charge","text":"charge"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-charge-per-mole","text":"charge_per_mole"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-concentration","text":"concentration"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-conductance","text":"conductance"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-conductance-per-voltage","text":"conductance_per_voltage"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-conductancedensity","text":"conductanceDensity"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-current","text":"current"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-currentdensity","text":"currentDensity"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-idealgasconstantdims","text":"idealGasConstantDims"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-length","text":"length"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-per-time","text":"per_time"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-per-voltage","text":"per_voltage"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-permeability","text":"permeability"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-resistance","text":"resistance"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-resistivity","text":"resistivity"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-rho-factor","text":"rho_factor"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-specificcapacitance","text":"specificCapacitance"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-substance","text":"substance"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-temperature","text":"temperature"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-time","text":"time"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-voltage","text":"voltage"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/NeuroMLCoreDimensions.html#schema-dimensions-volume","text":"volume"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-adexiafcell","text":"adExIaFCell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-fitzhughnagumocell","text":"fitzHughNagumoCell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-hindmarshrose1984cell","text":"hindmarshRose1984Cell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-iafcell","text":"iafCell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-iafrefcell","text":"iafRefCell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-iaftaucell","text":"iafTauCell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-iaftaurefcell","text":"iafTauRefCell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-izhikevich2007cell","text":"izhikevich2007Cell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-izhikevichcell","text":"izhikevichCell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-pinskyrinzelca3cell","text":"pinskyRinzelCA3Cell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-biophysicalproperties","text":"biophysical Properties"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-biophysicalproperties2capools","text":"biophysicalProperties2CaPools"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-cell","text":"cell"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-cell2capools","text":"cell2CaPools"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-concentrationmodel","text":"concentration Model"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-decayingpoolconcentrationmodel","text":"decayingPoolConcentrationModel"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-distal","text":"distal"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-distalproperties","text":"distalProperties"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-fixedfactorconcentrationmodel","text":"fixedFactorConcentrationModel"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-fixedfactorconcentrationmodeltraub","text":"fixedFactorConcentrationModelTraub"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-from","text":"from"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-include","text":"include"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-inhomogeneousparameter","text":"inhomogeneousParameter"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-inhomogeneousvalue","text":"inhomogeneousValue"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-initmembpotential","text":"initMembPotential"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-intracellularproperties","text":"intracellular Properties"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-intracellularproperties2capools","text":"intracellularProperties2CaPools"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-member","text":"member"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-membraneproperties","text":"membraneProperties"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-membraneproperties2capools","text":"membraneProperties2CaPools"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-morphology","text":"morphology"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-parent","text":"parent"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-path","text":"path"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-pointcellcondbased","text":"pointCellCondBased"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-pointcellcondbasedca","text":"pointCellCondBasedCa"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-proximal","text":"proximal"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-proximalproperties","text":"proximalProperties"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-segment","text":"segment"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-segmentgroup","text":"segment Group"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-species","text":"species"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-spikethresh","text":"spikeThresh"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-subtree","text":"subTree"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-to","text":"to"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-variableparameter","text":"variable Parameter"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channeldensity","text":"channel Density"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channeldensityghk","text":"channelDensityGHK"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channeldensityghk2","text":"channelDensityGHK2"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channeldensitynernst","text":"channelDensityNernst"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channeldensitynernstca2","text":"channelDensityNernstCa2"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channeldensitynonuniform","text":"channelDensityNonUniform"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channeldensitynonuniformghk","text":"channelDensityNonUniformGHK"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channeldensitynonuniformnernst","text":"channelDensityNonUniformNernst"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channeldensityvshift","text":"channelDensityVShift"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channelpopulation","text":"channelPopulation"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#schema-channelpopulationnernst","text":"channelPopulationNernst"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-fixedtimecourse","text":"fixedTimeCourse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-forwardtransition","text":"forward Transition"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gate","text":"gate"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gatefractional","text":"gateFractional"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gatehhinstantaneous","text":"gateHHInstantaneous"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gatehhrates","text":"gateHHrates"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gatehhratesinf","text":"gateHHratesInf"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gatehhratestau","text":"gateHHratesTau"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gatehhratestauinf","text":"gateHHratesTauInf"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.652},{"page":6,"text":"                     Tools  and  resources                                                                                                                           Neuroscience\nTable 1 continued   Table 1 continued\nCore components     Core components\ngateHHtauInf        gateHHtauInf                                                                                                              gateKS                 HHExpLinearRate\nHHExpLinearVariable HHExpLinearVariable                                                                                                       HHExpRate              HHExpVariable\nHHSigmoidRate       HHSigmoidRate                                                                                                             HHSigmoidVariable      ionChannel\nionChannelHH        ionChannelHH                                                                                                              ionChannelKS           ionChannelPassive\nionChannelVShift    ionChannelVShift                                                                                                          KSState                KSTransition\nopen State          open State                                                                                                                q10ConductanceScaling  q10ExpTemp\nq10Fixed            q10Fixed                                                                                                                  reverse Transition     sub Gate\ntauInfTransition    tauInfTransition                                                                                                          vHalfTransition        closedState\n                                  ﬁt into a ‘population’ of a ‘network’ (Figure 2). To support the range of electrical properties found in   ﬁt into a ‘population’ of a ‘network’ (Figure 2). To support the range of electrical properties found in\n                                  biological neurons, ionic conductances with distinct ionic selectivities and dynamics can be generated     biological neurons, ionic conductances with distinct ionic selectivities and dynamics can be generated\n                                  in NeuroML through the inclusion of different types of gates (e.g. activation, inactivation), their depen- in NeuroML through the inclusion of different types of gates (e.g. activation, inactivation), their depen-\n                                  dence on variables such as voltage and [Ca                                                                 dence on variables such as voltage and [Ca 2+] and their reversal potential. Cell types with different\n                                  functional and biophysical properties can then be generated by conferring combinations of ionic            functional and biophysical properties can then be generated by conferring combinations of ionic\n                                  conductances on their membranes. The conductance density can be adjusted to generate the elec-             conductances on their membranes. The conductance density can be adjusted to generate the elec-\n                                  trophysiological properties found in real neurons. In practice, many examples of ionic conductances        trophysiological properties found in real neurons. In practice, many examples of ionic conductances\n                                  that underlie the electrical behavior of neurons are already available in NeuroMLv2 and can simply be      that underlie the electrical behavior of neurons are already available in NeuroMLv2 and can simply be\n                                  inserted into a cell membrane (Figure 2). Indeed, a model element, once deﬁned in NeuroML, acts as         inserted into a cell membrane (Figure 2). Indeed, a model element, once deﬁned in NeuroML, acts as\n                                  a building block that may be reused any number of times within or across models. Elements such as          a building block that may be reused any number of times within or across models. Elements such as\n                                  ionic conductances, cell biophysics, cell morphologies, and cell deﬁnitions that incorporate them can      ionic conductances, cell biophysics, cell morphologies, and cell deﬁnitions that incorporate them can\n                                  be serialized in separate ﬁles and ‘included’ in other models (e.g. morphologies https://docs.neuroml.     be serialized in separate ﬁles and ‘included’ in other models (e.g. morphologies https://docs.neuroml.\n                                  org/Userdocs/ImportingMorphologyFiles.html#neuroml2). Such reuse of model components speeds                org/Userdocs/ImportingMorphologyFiles.html#neuroml2). Such reuse of model components speeds\n                                  model construction and prototyping irrespective of the simulation engine used.                             model construction and prototyping irrespective of the simulation engine used.\n                                                                                                                                             The deﬁned structure of each model element and the relationships between them inform users of\n                                  exactly how model elements are to be created and combined. This encourages the construction of             exactly how model elements are to be created and combined. This encourages the construction of\n                                  well-                                                                                                      well-\n                                                                                                                                             structured models, reduces errors and redundancy, and ensures that FAIR principles are ﬁrmly\n                                  embedded in NeuroML models and the ecosystem of tools. As we will see in the following sections,           embedded in NeuroML models and the ecosystem of tools. As we will see in the following sections,\n                                  NeuroML’s formal structure also enables features such as model validation prior to simulation, trans-      NeuroML’s formal structure also enables features such as model validation prior to simulation, trans-\n                                  lation into simulation speciﬁc formats, and the use of NeuroML as a common language of exchange            lation into simulation speciﬁc formats, and the use of NeuroML as a common language of exchange\n                                  between different tools.                                                                                   between different tools.\n                                  NeuroML supports a large ecosystem of software tools that cover all                                        NeuroML supports a large ecosystem of software tools that cover all\n                                  stages of the model life cycle                                                                             stages of the model life cycle\n                                  Model building and the generation of scientiﬁc knowledge from simulation and analysis of models is         Model building and the generation of scientiﬁc knowledge from simulation and analysis of models is\n                                  a multi-step, iterative process requiring an array of software tools. NeuroML supports all stages of the   a multi-step, iterative process requiring an array of software tools. NeuroML supports all stages of the\n                                  model development life cycle (Figure 1), by providing a single model description format that interacts     model development life cycle (Figure 1), by providing a single model description format that interacts\n                                  with a myriad of tools throughout the process. Researchers typically assemble ad- hoc sets of scripts,     with a myriad of tools throughout the process. Researchers typically assemble ad- hoc sets of scripts,\n                                  applications, and processes to help them in their investigations. In the absence of standardization, they  applications, and processes to help them in their investigations. In the absence of standardization, they\n                                  must work with the speciﬁc model formats and APIs that each tool they use requires, and somehow            must work with the speciﬁc model formats and APIs that each tool they use requires, and somehow\n                                  convert model descriptions when using multiple applications in a toolchain. NeuroML addresses this         convert model descriptions when using multiple applications in a toolchain. NeuroML addresses this\n                                  issue by providing a common language for the use and exchange of models and their components               issue by providing a common language for the use and exchange of models and their components\n                                  between different simulation engines and modeling tools. The NeuroML ecosystem includes a large            between different simulation engines and modeling tools. The NeuroML ecosystem includes a large\n                                  collection of software tools, both developed and maintained by the main NeuroML contributors (the          collection of software tools, both developed and maintained by the main NeuroML contributors (the\n                                  ‘core NeuroML tools and libraries:’ jNeuroML, pyNeuroML, APIs) and those external applications that        ‘core NeuroML tools and libraries:’ jNeuroML, pyNeuroML, APIs) and those external applications that\n                                  have added NeuroML support (Figures 3 and 4a, Tables 3 and 4).                                             have added NeuroML support (Figures 3 and 4a, Tables 3 and 4).\n                                                                                                                                             The core NeuroML tools and libraries include APIs in several programming languages—Python,\n                                  Java, C++, and MATLAB. These tools provide critical functionality to allow users to interact with          Java, C++, and MATLAB. These tools provide critical functionality to allow users to interact with\n                                  NeuroML components and build models. Using these, researchers can build models from scratch,               NeuroML components and build models. Using these, researchers can build models from scratch,\n                                  or read, modify, analyze, visualize, and simulate existing NeuroML models on supported simulation          or read, modify, analyze, visualize, and simulate existing NeuroML models on supported simulation\n                    Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                            6 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n| Core components       | Core components     |\n| --------------------- | ------------------- |\n| gateHHtauInf          | gateHHtauInf        |\n| gateKS                | HHExpLinearRate     |\n| HHExpLinearVariable   | HHExpLinearVariable |\n| HHExpRate             | HHExpVariable       |\n| HHSigmoidRate         | HHSigmoidRate       |\n| HHSigmoidVariable     | ionChannel          |\n| ionChannelHH          | ionChannelHH        |\n| ionChannelKS          | ionChannelPassive   |\n| ionChannelVShift      | KSState             |\n| KSTransition          | open State          |\n| q10ConductanceScaling | q10ExpTemp          |\n| q10Fixed              | reverse Transition  |\n| sub Gate              | tauInfTransition    |\n| tauInfTransition      | vHalfTransition     |\n| closedState           |                     |\n\nfit into a ‘population’ of a ‘network’ (Figure 2). To support the range of electrical properties found in biological neurons, ionic conductances with distinct ionic selectivities and dynamics can be generated in NeuroML through the inclusion of different types of gates (e.g. activation, inactivation), their dependence on variables such as voltage and [Ca2+] and their reversal potential. Cell types with different functional and biophysical properties can then be generated by conferring combinations of ionic conductances on their membranes. The conductance density can be adjusted to generate the electrophysiological properties found in real neurons. In practice, many examples of ionic conductances that underlie the electrical behavior of neurons are already available in NeuroMLv2 and can simply be inserted into a cell membrane (Figure 2). Indeed, a model element, once defined in NeuroML, acts as a building block that may be reused any number of times within or across models. Elements such as ionic conductances, cell biophysics, cell morphologies, and cell definitions that incorporate them can be serialized in separate files and ‘included’ in other models (e.g. morphologies https://docs.neuroml.org/Userdocs/ImportingMorphologyFiles.html#neuroml2). Such reuse of model components speeds model construction and prototyping irrespective of the simulation engine used.\n\nThe defined structure of each model element and the relationships between them inform users of exactly how model elements are to be created and combined. This encourages the construction of well-structured models, reduces errors and redundancy, and ensures that FAIR principles are firmly embedded in NeuroML models and the ecosystem of tools. As we will see in the following sections, NeuroML’s formal structure also enables features such as model validation prior to simulation, translation into simulation specific formats, and the use of NeuroML as a common language of exchange between different tools.\n\nNeuroML supports a large ecosystem of software tools that cover all stages of the model life cycle. Model building and the generation of scientific knowledge from simulation and analysis of models is a multi-step, iterative process requiring an array of software tools. NeuroML supports all stages of the model development life cycle (Figure 1), by providing a single model description format that interacts with a myriad of tools throughout the process. Researchers typically assemble ad-hoc sets of scripts, applications, and processes to help them in their investigations. In the absence of standardization, they must work with the specific model formats and APIs that each tool they use requires, and somehow convert model descriptions when using multiple applications in a toolchain. NeuroML addresses this issue by providing a common language for the use and exchange of models and their components between different simulation engines and modeling tools. The NeuroML ecosystem includes a large collection of software tools, both developed and maintained by the main NeuroML contributors (the ‘core NeuroML tools and libraries:’ jNeuroML, pyNeuroML, APIs) and those external applications that have added NeuroML support (Figures 3 and 4a, Tables 3 and 4).\n\nThe core NeuroML tools and libraries include APIs in several programming languages—Python, Java, C++, and MATLAB. These tools provide critical functionality to allow users to interact with NeuroML components and build models. Using these, researchers can build models from scratch, or read, modify, analyze, visualize, and simulate existing NeuroML models on supported simulation engines.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"table","rows":[["Core components","Core components"],["gateHHtauInf","gateHHtauInf"],["gateKS","HHExpLinearRate"],["HHExpLinearVariable","HHExpLinearVariable"],["HHExpRate","HHExpVariable"],["HHSigmoidRate","HHSigmoidRate"],["HHSigmoidVariable","ionChannel"],["ionChannelHH","ionChannelHH"],["ionChannelKS","ionChannelPassive"],["ionChannelVShift","KSState"],["KSTransition","open State"],["q10ConductanceScaling","q10ExpTemp"],["q10Fixed","reverse Transition"],["sub Gate","tauInfTransition"],["tauInfTransition","vHalfTransition"],["closedState",""]],"md":"| Core components       | Core components     |\n| --------------------- | ------------------- |\n| gateHHtauInf          | gateHHtauInf        |\n| gateKS                | HHExpLinearRate     |\n| HHExpLinearVariable   | HHExpLinearVariable |\n| HHExpRate             | HHExpVariable       |\n| HHSigmoidRate         | HHSigmoidRate       |\n| HHSigmoidVariable     | ionChannel          |\n| ionChannelHH          | ionChannelHH        |\n| ionChannelKS          | ionChannelPassive   |\n| ionChannelVShift      | KSState             |\n| KSTransition          | open State          |\n| q10ConductanceScaling | q10ExpTemp          |\n| q10Fixed              | reverse Transition  |\n| sub Gate              | tauInfTransition    |\n| tauInfTransition      | vHalfTransition     |\n| closedState           |                     |","isPerfectTable":true,"csv":"\"Core components\",\"Core components\"\n\"gateHHtauInf\",\"gateHHtauInf\"\n\"gateKS\",\"HHExpLinearRate\"\n\"HHExpLinearVariable\",\"HHExpLinearVariable\"\n\"HHExpRate\",\"HHExpVariable\"\n\"HHSigmoidRate\",\"HHSigmoidRate\"\n\"HHSigmoidVariable\",\"ionChannel\"\n\"ionChannelHH\",\"ionChannelHH\"\n\"ionChannelKS\",\"ionChannelPassive\"\n\"ionChannelVShift\",\"KSState\"\n\"KSTransition\",\"open State\"\n\"q10ConductanceScaling\",\"q10ExpTemp\"\n\"q10Fixed\",\"reverse Transition\"\n\"sub Gate\",\"tauInfTransition\"\n\"tauInfTransition\",\"vHalfTransition\"\n\"closedState\",\"\"","bBox":{"x":36.5,"y":34.63,"w":550.02,"h":720.13}},{"type":"text","value":"fit into a ‘population’ of a ‘network’ (Figure 2). To support the range of electrical properties found in biological neurons, ionic conductances with distinct ionic selectivities and dynamics can be generated in NeuroML through the inclusion of different types of gates (e.g. activation, inactivation), their dependence on variables such as voltage and [Ca2+] and their reversal potential. Cell types with different functional and biophysical properties can then be generated by conferring combinations of ionic conductances on their membranes. The conductance density can be adjusted to generate the electrophysiological properties found in real neurons. In practice, many examples of ionic conductances that underlie the electrical behavior of neurons are already available in NeuroMLv2 and can simply be inserted into a cell membrane (Figure 2). Indeed, a model element, once defined in NeuroML, acts as a building block that may be reused any number of times within or across models. Elements such as ionic conductances, cell biophysics, cell morphologies, and cell definitions that incorporate them can be serialized in separate files and ‘included’ in other models (e.g. morphologies https://docs.neuroml.org/Userdocs/ImportingMorphologyFiles.html#neuroml2). Such reuse of model components speeds model construction and prototyping irrespective of the simulation engine used.\n\nThe defined structure of each model element and the relationships between them inform users of exactly how model elements are to be created and combined. This encourages the construction of well-structured models, reduces errors and redundancy, and ensures that FAIR principles are firmly embedded in NeuroML models and the ecosystem of tools. As we will see in the following sections, NeuroML’s formal structure also enables features such as model validation prior to simulation, translation into simulation specific formats, and the use of NeuroML as a common language of exchange between different tools.\n\nNeuroML supports a large ecosystem of software tools that cover all stages of the model life cycle. Model building and the generation of scientific knowledge from simulation and analysis of models is a multi-step, iterative process requiring an array of software tools. NeuroML supports all stages of the model development life cycle (Figure 1), by providing a single model description format that interacts with a myriad of tools throughout the process. Researchers typically assemble ad-hoc sets of scripts, applications, and processes to help them in their investigations. In the absence of standardization, they must work with the specific model formats and APIs that each tool they use requires, and somehow convert model descriptions when using multiple applications in a toolchain. NeuroML addresses this issue by providing a common language for the use and exchange of models and their components between different simulation engines and modeling tools. The NeuroML ecosystem includes a large collection of software tools, both developed and maintained by the main NeuroML contributors (the ‘core NeuroML tools and libraries:’ jNeuroML, pyNeuroML, APIs) and those external applications that have added NeuroML support (Figures 3 and 4a, Tables 3 and 4).\n\nThe core NeuroML tools and libraries include APIs in several programming languages—Python, Java, C++, and MATLAB. These tools provide critical functionality to allow users to interact with NeuroML components and build models. Using these, researchers can build models from scratch, or read, modify, analyze, visualize, and simulate existing NeuroML models on supported simulation engines.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"fit into a ‘population’ of a ‘network’ (Figure 2). To support the range of electrical properties found in biological neurons, ionic conductances with distinct ionic selectivities and dynamics can be generated in NeuroML through the inclusion of different types of gates (e.g. activation, inactivation), their dependence on variables such as voltage and [Ca2+] and their reversal potential. Cell types with different functional and biophysical properties can then be generated by conferring combinations of ionic conductances on their membranes. The conductance density can be adjusted to generate the electrophysiological properties found in real neurons. In practice, many examples of ionic conductances that underlie the electrical behavior of neurons are already available in NeuroMLv2 and can simply be inserted into a cell membrane (Figure 2). Indeed, a model element, once defined in NeuroML, acts as a building block that may be reused any number of times within or across models. Elements such as ionic conductances, cell biophysics, cell morphologies, and cell definitions that incorporate them can be serialized in separate files and ‘included’ in other models (e.g. morphologies https://docs.neuroml.org/Userdocs/ImportingMorphologyFiles.html#neuroml2). Such reuse of model components speeds model construction and prototyping irrespective of the simulation engine used.\n\nThe defined structure of each model element and the relationships between them inform users of exactly how model elements are to be created and combined. This encourages the construction of well-structured models, reduces errors and redundancy, and ensures that FAIR principles are firmly embedded in NeuroML models and the ecosystem of tools. As we will see in the following sections, NeuroML’s formal structure also enables features such as model validation prior to simulation, translation into simulation specific formats, and the use of NeuroML as a common language of exchange between different tools.\n\nNeuroML supports a large ecosystem of software tools that cover all stages of the model life cycle. Model building and the generation of scientific knowledge from simulation and analysis of models is a multi-step, iterative process requiring an array of software tools. NeuroML supports all stages of the model development life cycle (Figure 1), by providing a single model description format that interacts with a myriad of tools throughout the process. Researchers typically assemble ad-hoc sets of scripts, applications, and processes to help them in their investigations. In the absence of standardization, they must work with the specific model formats and APIs that each tool they use requires, and somehow convert model descriptions when using multiple applications in a toolchain. NeuroML addresses this issue by providing a common language for the use and exchange of models and their components between different simulation engines and modeling tools. The NeuroML ecosystem includes a large collection of software tools, both developed and maintained by the main NeuroML contributors (the ‘core NeuroML tools and libraries:’ jNeuroML, pyNeuroML, APIs) and those external applications that have added NeuroML support (Figures 3 and 4a, Tables 3 and 4).\n\nThe core NeuroML tools and libraries include APIs in several programming languages—Python, Java, C++, and MATLAB. These tools provide critical functionality to allow users to interact with NeuroML components and build models. Using these, researchers can build models from scratch, or read, modify, analyze, visualize, and simulate existing NeuroML models on supported simulation engines.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":245.37,"w":418,"h":473.94}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/Userdocs/ImportingMorphologyFiles.html#neuroml2","text":""},{"url":"https://docs.neuroml.org/Userdocs/ImportingMorphologyFiles.html#neuroml2","text":"org/Userdocs/ImportingMorphologyFiles.html#neuroml2). Such reuse of model components speeds "},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gatehhtauinf","text":"gateHHtauInf"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-gateks","text":"gateKS"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-hhexplinearrate","text":"HHExpLinearRate"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-hhexplinearvariable","text":"HHExpLinearVariable"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-hhexprate","text":"HHExpRate"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-hhexpvariable","text":"HHExpVariable"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-hhsigmoidrate","text":"HHSigmoidRate"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-hhsigmoidvariable","text":"HHSigmoidVariable"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-ionchannel","text":"ionChannel"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-ionchannelhh","text":"ionChannelHH"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-ionchannelks","text":"ionChannelKS"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-ionchannelpassive","text":"ionChannelPassive"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-ionchannelvshift","text":"ionChannelVShift"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-ksstate","text":"KSState"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-kstransition","text":"KSTransition"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-openstate","text":"open State"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-q10conductancescaling","text":"q10ConductanceScaling"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-q10exptemp","text":"q10ExpTemp"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-q10fixed","text":"q10Fixed"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-reversetransition","text":"reverse Transition"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-subgate","text":"sub Gate"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-tauinftransition","text":"tauInfTransition"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-vhalftransition","text":"vHalfTransition"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Channels.html#schema-closedstate","text":"closedState"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.546},{"page":7,"text":"                                                                                                                                                                             Tools  and  resources                                                                                    Neuroscience\n                                                                                                                                                                            Table 2. Index of standard NeuroMLv2 ComponentTypes (continued).\nComponentTypes related to synapses         ComponentTypes related to synapses         ComponentTypes related to synapses         ComponentTypes related to synapses         ComponentTypes related to synapses\nalphaCurrentSynapse                        alphaCurrentSynapse                        alphaCurrentSynapse                        alphaCurrentSynapse                        alphaCurrentSynapse                                                                                       alphaSynapse  blockingPlasticSynapse\n                                                                                                                                                                            doubleSynapse                                                                                             expOneSynapse  expThreeSynapse\n                                                                                                                                                                            expTwoSynapse                                                                                             gap Junction  gradedSynapse\n                                                                                                                                                                            linearGradedSynapse                                                                                       silentSynapse  stdpSynapse\n                                                                                                                                                                            tsodyksMarkramDepFacMechanism                                                                             tsodyksMarkramDepMechanism  voltageConcDepBlockMechanism\nComponentTypes related to inputs           ComponentTypes related to inputs           ComponentTypes related to inputs           ComponentTypes related to inputs           ComponentTypes related to inputs\ncompoundInput                              compoundInput                              compoundInput                              compoundInput                              compoundInput                                                                                             compoundInputDL  poissonFiringSynapse\n                                                                                                                                                                            pulseGenerator                                                                                            pulseGeneratorDL  rampGenerator\n                                                                                                                                                                            rampGeneratorDL                                                                                           sineGenerator  sineGeneratorDL\n                                                                                                                                                                            spike                                                                                                     spikeArray  spike Generator\n                                                                                                                                                                            spikeGeneratorPoisson                                                                                     spikeGeneratorRandom  spikeGeneratorRefPoisson\n                                                                                                                                                                            timedSynapticInput                                                                                        transientPoissonFiringSynapse  voltage Clamp\nvoltageClampTriple                         voltageClampTriple                         voltageClampTriple                         voltageClampTriple                         voltageClampTriple\nComponentTypes related to networks         ComponentTypes related to networks         ComponentTypes related to networks         ComponentTypes related to networks         ComponentTypes related to networks\nconnection                                 connection                                 connection                                 connection                                 connection                                                                                                connectionWD  continuous Connection\n                                                                                                                                                                            continuousConnectionInstance                                                                              continuousConnectionInstanceW  continuous Projection\n                                                                                                                                                                            electrical Connection                                                                                     electricalConnectionInstance  electricalConnectionInstanceW\n                                                                                                                                                                            electrical Projection                                                                                     explicit Connection  explicitInput\n                                                                                                                                                                            input                                                                                                     inputList  inputW\n                                                                                                                                                                            instance                                                                                                  location  network\n                                                                                                                                                                            networkWithTemperature                                                                                    population  population List\n                                                                                                                                                                            projection                                                                                                rectangularExtent  region\nsynaptic Connection                        synaptic Connection                        synaptic Connection                        synaptic Connection                        synaptic Connection                                                                                       synapticConnectionWD\nComponentTypes related to model simulation ComponentTypes related to model simulation ComponentTypes related to model simulation ComponentTypes related to model simulation ComponentTypes related to model simulation\nDisplay                                    Display                                    Display                                    Display                                    Display                                                                                                   EventOutputFile  EventSelection\n                                                                                                                                                                            Line                                                                                                      OutputColumn  OutputFile\nSimulation                                 Simulation                                 Simulation                                 Simulation                                 Simulation\nComponentTypes related to PyNN             ComponentTypes related to PyNN             ComponentTypes related to PyNN             ComponentTypes related to PyNN             ComponentTypes related to PyNN\nalphaCondSynapse                           alphaCondSynapse                           alphaCondSynapse                           alphaCondSynapse                           alphaCondSynapse                                                                                          alphaCurrSynapse  EIF_cond_alpha_isfa_ista\n                                                                                                                                                                            EIF_cond_exp_isfa_ista                                                                                    expCondSynapse  expCurrSynapse\n                                                                                                                                                                            HH_cond_exp                                                                                               IF_cond_alpha  IF_cond_exp\n                                                                                                                                                                            IF_curr_alpha                                                                                             IF_curr_exp  SpikeSourcePoisson\n                                                                                                                                                                             platforms. Furthermore, developers can also use the core tools, libraries, and APIs to support NeuroML  platforms. Furthermore, developers can also use the core tools, libraries, and APIs to support NeuroML\n                                                                                                                                                                             in their own applications.                                                                              in their own applications.\n                                                                                                                                                                                                                                                                                     The simulation platforms e.g. EDEN (Panagiotou et  al., 2022), NEURON (Hines and Carne‐\n                                                                                                                                                                             vale, 1997), along with other independently developed tools, form the next layer of the software        vale, 1997), along with other independently developed tools, form the next layer of the software\n                                                                                                                                                                             ecosystem—providing extra functionality such as interactive model construction (e.g. neuroConstruct     ecosystem—providing extra functionality such as interactive model construction (e.g. neuroConstruct\n                                                                                                                                                                             Gleeson et al., 2007), NetPyNE (Dura‐                                                                   Gleeson et al., 2007), NetPyNE (Dura‐\n                                                                                                                                                                                                                                                                                      Bernal et al., 2019\n                                                                                                                                                                                                                                                                                      ), additional visualization (e.g. OSB Gleeson\n                                                                                                                                                                             et al., 2019b), analysis (e.g. NeuroML-                                                                 et al., 2019b), analysis (e.g. NeuroML-\n                                                                                                                                                                                                                                                                                      DB Birgiolas et al., 2023), data-\n                                                                                                                                                                                                                                                                                      driven validation (e.g. SciUnit\n                                                                                                                                                                             Gerkin et al., 2019), and archival/sharing (e.g. OSB, NeuroML-  DB). Indeed, OSB and NeuroML- DB        Gerkin et al., 2019), and archival/sharing (e.g. OSB, NeuroML-  DB). Indeed, OSB and NeuroML- DB\n                                                                                                                                                                             are prime examples of how advanced neuroinformatics resources can be built on top of standards          are prime examples of how advanced neuroinformatics resources can be built on top of standards\n                                                                                                                                                                             such as NeuroML.                                                                                        such as NeuroML.\n                                                                                                                                                                            Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                     7 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Table 2. Index of standard NeuroMLv2 ComponentTypes (continued).\n\n| ComponentTypes related to synapses         |                               |                               |                               |                       |\n| ------------------------------------------ | ----------------------------- | ----------------------------- | ----------------------------- | --------------------- |\n| alphaCurrentSynapse                        | alphaCurrentSynapse           | alphaCurrentSynapse           | alphaCurrentSynapse           | alphaCurrentSynapse   |\n| alphaSynapse                               | blockingPlasticSynapse        | doubleSynapse                 | expOneSynapse                 | expThreeSynapse       |\n| expTwoSynapse                              | gap Junction                  | gradedSynapse                 | linearGradedSynapse           | silentSynapse         |\n| stdpSynapse                                | tsodyksMarkramDepFacMechanism | tsodyksMarkramDepMechanism    | voltageConcDepBlockMechanism  |                       |\n| ComponentTypes related to inputs           |                               |                               |                               |                       |\n| compoundInput                              | compoundInput                 | compoundInput                 | compoundInput                 | compoundInput         |\n| compoundInputDL                            | poissonFiringSynapse          | pulseGenerator                | pulseGeneratorDL              | rampGenerator         |\n| rampGeneratorDL                            | sineGenerator                 | sineGeneratorDL               | spike                         | spikeArray            |\n| spike Generator                            | spikeGeneratorPoisson         | spikeGeneratorRandom          | spikeGeneratorRefPoisson      | timedSynapticInput    |\n| transientPoissonFiringSynapse              | voltage Clamp                 | voltageClampTriple            | voltageClampTriple            | voltageClampTriple    |\n| voltageClampTriple                         |                               |                               |                               |                       |\n| ComponentTypes related to networks         |                               |                               |                               |                       |\n| connection                                 | connection                    | connection                    | connection                    | connection            |\n| connectionWD                               | continuous Connection         | continuousConnectionInstance  | continuousConnectionInstanceW | continuous Projection |\n| electrical Connection                      | electricalConnectionInstance  | electricalConnectionInstanceW | electrical Projection         | explicit Connection   |\n| explicitInput                              | input                         | inputList                     | inputW                        | instance              |\n| location                                   | network                       | networkWithTemperature        | population                    | population List       |\n| projection                                 | rectangularExtent             | region                        | synaptic Connection           | synaptic Connection   |\n| synaptic Connection                        | synaptic Connection           | synaptic Connection           | synaptic Connection           | synapticConnectionWD  |\n| ComponentTypes related to model simulation |                               |                               |                               |                       |\n| Display                                    | Display                       | Display                       | Display                       | Display               |\n| EventOutputFile                            | EventSelection                | Line                          | OutputColumn                  | OutputFile            |\n| Simulation                                 | Simulation                    | Simulation                    | Simulation                    | Simulation            |\n| ComponentTypes related to PyNN             |                               |                               |                               |                       |\n| alphaCondSynapse                           | alphaCondSynapse              | alphaCondSynapse              | alphaCondSynapse              | alphaCondSynapse      |\n| alphaCurrSynapse                           | EIF\\_cond\\_alpha\\_isfa\\_ista  | EIF\\_cond\\_exp\\_isfa\\_ista    | expCondSynapse                | expCurrSynapse        |\n| HH\\_cond\\_exp                              | IF\\_cond\\_alpha               | IF\\_cond\\_exp                 | IF\\_curr\\_alpha               | IF\\_curr\\_exp         |\n\nplatforms. Furthermore, developers can also use the core tools, libraries, and APIs to support NeuroML in their own applications.\n\nThe simulation platforms e.g. EDEN (Panagiotou et al., 2022), NEURON (Hines and Carnevale, 1997), along with other independently developed tools, form the next layer of the software ecosystem—providing extra functionality such as interactive model construction (e.g. neuroConstruct Gleeson et al., 2007), NetPyNE (Dura-Bernal et al., 2019), additional visualization (e.g. OSB Gleeson et al., 2019b), analysis (e.g. NeuroML-DB Birgiolas et al., 2023), data-driven validation (e.g. SciUnit Gerkin et al., 2019), and archival/sharing (e.g. OSB, NeuroML-DB). Indeed, OSB and NeuroML-DB are prime examples of how advanced neuroinformatics resources can be built on top of standards such as NeuroML.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Table 2. Index of standard NeuroMLv2 ComponentTypes (continued).","md":"# Table 2. Index of standard NeuroMLv2 ComponentTypes (continued).","bBox":{"x":36.5,"y":51.84,"w":280.6,"h":9}},{"type":"table","rows":[["ComponentTypes related to synapses","","","",""],["alphaCurrentSynapse","alphaCurrentSynapse","alphaCurrentSynapse","alphaCurrentSynapse","alphaCurrentSynapse"],["alphaSynapse","blockingPlasticSynapse","doubleSynapse","expOneSynapse","expThreeSynapse"],["expTwoSynapse","gap Junction","gradedSynapse","linearGradedSynapse","silentSynapse"],["stdpSynapse","tsodyksMarkramDepFacMechanism","tsodyksMarkramDepMechanism","voltageConcDepBlockMechanism",""],["ComponentTypes related to inputs","","","",""],["compoundInput","compoundInput","compoundInput","compoundInput","compoundInput"],["compoundInputDL","poissonFiringSynapse","pulseGenerator","pulseGeneratorDL","rampGenerator"],["rampGeneratorDL","sineGenerator","sineGeneratorDL","spike","spikeArray"],["spike Generator","spikeGeneratorPoisson","spikeGeneratorRandom","spikeGeneratorRefPoisson","timedSynapticInput"],["transientPoissonFiringSynapse","voltage Clamp","voltageClampTriple","voltageClampTriple","voltageClampTriple"],["voltageClampTriple","","","",""],["ComponentTypes related to networks","","","",""],["connection","connection","connection","connection","connection"],["connectionWD","continuous Connection","continuousConnectionInstance","continuousConnectionInstanceW","continuous Projection"],["electrical Connection","electricalConnectionInstance","electricalConnectionInstanceW","electrical Projection","explicit Connection"],["explicitInput","input","inputList","inputW","instance"],["location","network","networkWithTemperature","population","population List"],["projection","rectangularExtent","region","synaptic Connection","synaptic Connection"],["synaptic Connection","synaptic Connection","synaptic Connection","synaptic Connection","synapticConnectionWD"],["ComponentTypes related to model simulation","","","",""],["Display","Display","Display","Display","Display"],["EventOutputFile","EventSelection","Line","OutputColumn","OutputFile"],["Simulation","Simulation","Simulation","Simulation","Simulation"],["ComponentTypes related to PyNN","","","",""],["alphaCondSynapse","alphaCondSynapse","alphaCondSynapse","alphaCondSynapse","alphaCondSynapse"],["alphaCurrSynapse","EIF_cond_alpha_isfa_ista","EIF_cond_exp_isfa_ista","expCondSynapse","expCurrSynapse"],["HH_cond_exp","IF_cond_alpha","IF_cond_exp","IF_curr_alpha","IF_curr_exp"]],"md":"| ComponentTypes related to synapses         |                               |                               |                               |                       |\n| ------------------------------------------ | ----------------------------- | ----------------------------- | ----------------------------- | --------------------- |\n| alphaCurrentSynapse                        | alphaCurrentSynapse           | alphaCurrentSynapse           | alphaCurrentSynapse           | alphaCurrentSynapse   |\n| alphaSynapse                               | blockingPlasticSynapse        | doubleSynapse                 | expOneSynapse                 | expThreeSynapse       |\n| expTwoSynapse                              | gap Junction                  | gradedSynapse                 | linearGradedSynapse           | silentSynapse         |\n| stdpSynapse                                | tsodyksMarkramDepFacMechanism | tsodyksMarkramDepMechanism    | voltageConcDepBlockMechanism  |                       |\n| ComponentTypes related to inputs           |                               |                               |                               |                       |\n| compoundInput                              | compoundInput                 | compoundInput                 | compoundInput                 | compoundInput         |\n| compoundInputDL                            | poissonFiringSynapse          | pulseGenerator                | pulseGeneratorDL              | rampGenerator         |\n| rampGeneratorDL                            | sineGenerator                 | sineGeneratorDL               | spike                         | spikeArray            |\n| spike Generator                            | spikeGeneratorPoisson         | spikeGeneratorRandom          | spikeGeneratorRefPoisson      | timedSynapticInput    |\n| transientPoissonFiringSynapse              | voltage Clamp                 | voltageClampTriple            | voltageClampTriple            | voltageClampTriple    |\n| voltageClampTriple                         |                               |                               |                               |                       |\n| ComponentTypes related to networks         |                               |                               |                               |                       |\n| connection                                 | connection                    | connection                    | connection                    | connection            |\n| connectionWD                               | continuous Connection         | continuousConnectionInstance  | continuousConnectionInstanceW | continuous Projection |\n| electrical Connection                      | electricalConnectionInstance  | electricalConnectionInstanceW | electrical Projection         | explicit Connection   |\n| explicitInput                              | input                         | inputList                     | inputW                        | instance              |\n| location                                   | network                       | networkWithTemperature        | population                    | population List       |\n| projection                                 | rectangularExtent             | region                        | synaptic Connection           | synaptic Connection   |\n| synaptic Connection                        | synaptic Connection           | synaptic Connection           | synaptic Connection           | synapticConnectionWD  |\n| ComponentTypes related to model simulation |                               |                               |                               |                       |\n| Display                                    | Display                       | Display                       | Display                       | Display               |\n| EventOutputFile                            | EventSelection                | Line                          | OutputColumn                  | OutputFile            |\n| Simulation                                 | Simulation                    | Simulation                    | Simulation                    | Simulation            |\n| ComponentTypes related to PyNN             |                               |                               |                               |                       |\n| alphaCondSynapse                           | alphaCondSynapse              | alphaCondSynapse              | alphaCondSynapse              | alphaCondSynapse      |\n| alphaCurrSynapse                           | EIF\\_cond\\_alpha\\_isfa\\_ista  | EIF\\_cond\\_exp\\_isfa\\_ista    | expCondSynapse                | expCurrSynapse        |\n| HH\\_cond\\_exp                              | IF\\_cond\\_alpha               | IF\\_cond\\_exp                 | IF\\_curr\\_alpha               | IF\\_curr\\_exp         |","isPerfectTable":true,"csv":"\"ComponentTypes related to synapses\",\"\",\"\",\"\",\"\"\n\"alphaCurrentSynapse\",\"alphaCurrentSynapse\",\"alphaCurrentSynapse\",\"alphaCurrentSynapse\",\"alphaCurrentSynapse\"\n\"alphaSynapse\",\"blockingPlasticSynapse\",\"doubleSynapse\",\"expOneSynapse\",\"expThreeSynapse\"\n\"expTwoSynapse\",\"gap Junction\",\"gradedSynapse\",\"linearGradedSynapse\",\"silentSynapse\"\n\"stdpSynapse\",\"tsodyksMarkramDepFacMechanism\",\"tsodyksMarkramDepMechanism\",\"voltageConcDepBlockMechanism\",\"\"\n\"ComponentTypes related to inputs\",\"\",\"\",\"\",\"\"\n\"compoundInput\",\"compoundInput\",\"compoundInput\",\"compoundInput\",\"compoundInput\"\n\"compoundInputDL\",\"poissonFiringSynapse\",\"pulseGenerator\",\"pulseGeneratorDL\",\"rampGenerator\"\n\"rampGeneratorDL\",\"sineGenerator\",\"sineGeneratorDL\",\"spike\",\"spikeArray\"\n\"spike Generator\",\"spikeGeneratorPoisson\",\"spikeGeneratorRandom\",\"spikeGeneratorRefPoisson\",\"timedSynapticInput\"\n\"transientPoissonFiringSynapse\",\"voltage Clamp\",\"voltageClampTriple\",\"voltageClampTriple\",\"voltageClampTriple\"\n\"voltageClampTriple\",\"\",\"\",\"\",\"\"\n\"ComponentTypes related to networks\",\"\",\"\",\"\",\"\"\n\"connection\",\"connection\",\"connection\",\"connection\",\"connection\"\n\"connectionWD\",\"continuous Connection\",\"continuousConnectionInstance\",\"continuousConnectionInstanceW\",\"continuous Projection\"\n\"electrical Connection\",\"electricalConnectionInstance\",\"electricalConnectionInstanceW\",\"electrical Projection\",\"explicit Connection\"\n\"explicitInput\",\"input\",\"inputList\",\"inputW\",\"instance\"\n\"location\",\"network\",\"networkWithTemperature\",\"population\",\"population List\"\n\"projection\",\"rectangularExtent\",\"region\",\"synaptic Connection\",\"synaptic Connection\"\n\"synaptic Connection\",\"synaptic Connection\",\"synaptic Connection\",\"synaptic Connection\",\"synapticConnectionWD\"\n\"ComponentTypes related to model simulation\",\"\",\"\",\"\",\"\"\n\"Display\",\"Display\",\"Display\",\"Display\",\"Display\"\n\"EventOutputFile\",\"EventSelection\",\"Line\",\"OutputColumn\",\"OutputFile\"\n\"Simulation\",\"Simulation\",\"Simulation\",\"Simulation\",\"Simulation\"\n\"ComponentTypes related to PyNN\",\"\",\"\",\"\",\"\"\n\"alphaCondSynapse\",\"alphaCondSynapse\",\"alphaCondSynapse\",\"alphaCondSynapse\",\"alphaCondSynapse\"\n\"alphaCurrSynapse\",\"EIF_cond_alpha_isfa_ista\",\"EIF_cond_exp_isfa_ista\",\"expCondSynapse\",\"expCurrSynapse\"\n\"HH_cond_exp\",\"IF_cond_alpha\",\"IF_cond_exp\",\"IF_curr_alpha\",\"IF_curr_exp\"","bBox":{"x":36.5,"y":34.63,"w":551.03,"h":720.13}},{"type":"text","value":"platforms. Furthermore, developers can also use the core tools, libraries, and APIs to support NeuroML in their own applications.\n\nThe simulation platforms e.g. EDEN (Panagiotou et al., 2022), NEURON (Hines and Carnevale, 1997), along with other independently developed tools, form the next layer of the software ecosystem—providing extra functionality such as interactive model construction (e.g. neuroConstruct Gleeson et al., 2007), NetPyNE (Dura-Bernal et al., 2019), additional visualization (e.g. OSB Gleeson et al., 2019b), analysis (e.g. NeuroML-DB Birgiolas et al., 2023), data-driven validation (e.g. SciUnit Gerkin et al., 2019), and archival/sharing (e.g. OSB, NeuroML-DB). Indeed, OSB and NeuroML-DB are prime examples of how advanced neuroinformatics resources can be built on top of standards such as NeuroML.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"platforms. Furthermore, developers can also use the core tools, libraries, and APIs to support NeuroML in their own applications.\n\nThe simulation platforms e.g. EDEN (Panagiotou et al., 2022), NEURON (Hines and Carnevale, 1997), along with other independently developed tools, form the next layer of the software ecosystem—providing extra functionality such as interactive model construction (e.g. neuroConstruct Gleeson et al., 2007), NetPyNE (Dura-Bernal et al., 2019), additional visualization (e.g. OSB Gleeson et al., 2019b), analysis (e.g. NeuroML-DB Birgiolas et al., 2023), data-driven validation (e.g. SciUnit Gerkin et al., 2019), and archival/sharing (e.g. OSB, NeuroML-DB). Indeed, OSB and NeuroML-DB are prime examples of how advanced neuroinformatics resources can be built on top of standards such as NeuroML.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":36.65,"y":480.19,"w":550.88,"h":239.31}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-alphacurrentsynapse","text":"alphaCurrentSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-alphasynapse","text":"alphaSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-blockingplasticsynapse","text":"blockingPlasticSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-doublesynapse","text":"doubleSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-exponesynapse","text":"expOneSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-expthreesynapse","text":"expThreeSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-exptwosynapse","text":"expTwoSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-gapjunction","text":"gap Junction"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-gradedsynapse","text":"gradedSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-lineargradedsynapse","text":"linearGradedSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-silentsynapse","text":"silentSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-stdpsynapse","text":"stdpSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-tsodyksmarkramdepfacmechanism","text":"tsodyksMarkramDepFacMechanism"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-tsodyksmarkramdepmechanism","text":"tsodyksMarkramDepMechanism"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Synapses.html#schema-voltageconcdepblockmechanism","text":"voltageConcDepBlockMechanism"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-compoundinput","text":"compoundInput"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-compoundinputdl","text":"compoundInputDL"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-poissonfiringsynapse","text":"poissonFiringSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-pulsegenerator","text":"pulseGenerator"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-pulsegeneratordl","text":"pulseGeneratorDL"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-rampgenerator","text":"rampGenerator"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-rampgeneratordl","text":"rampGeneratorDL"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-sinegenerator","text":"sineGenerator"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-sinegeneratordl","text":"sineGeneratorDL"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-spike","text":"spike"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-spikearray","text":"spikeArray"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-spikegenerator","text":"spike Generator"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-spikegeneratorpoisson","text":"spikeGeneratorPoisson"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-spikegeneratorrandom","text":"spikeGeneratorRandom"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-spikegeneratorrefpoisson","text":"spikeGeneratorRefPoisson"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-timedsynapticinput","text":"timedSynapticInput"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-transientpoissonfiringsynapse","text":"transientPoissonFiringSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-voltageclamp","text":"voltage Clamp"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Inputs.html#schema-voltageclamptriple","text":"voltageClampTriple"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-connection","text":"connection"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-connectionwd","text":"connectionWD"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-continuousconnection","text":"continuous Connection"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-continuousconnectioninstance","text":"continuousConnectionInstance"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-continuousconnectioninstancew","text":"continuousConnectionInstanceW"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-continuousprojection","text":"continuous Projection"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-electricalconnection","text":"electrical Connection"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-electricalconnectioninstance","text":"electricalConnectionInstance"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-electricalconnectioninstancew","text":"electricalConnectionInstanceW"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-electricalprojection","text":"electrical Projection"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-explicitconnection","text":"explicit Connection"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-explicitinput","text":"explicitInput"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-input","text":"input"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-inputlist","text":"inputList"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-inputw","text":"inputW"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-instance","text":"instance"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-location","text":"location"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-network","text":"network"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-networkwithtemperature","text":"networkWithTemperature"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-population","text":"population"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-populationlist","text":"population List"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-projection","text":"projection"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-rectangularextent","text":"rectangularExtent"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-region","text":"region"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-synapticconnection","text":"synaptic Connection"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Networks.html#schema-synapticconnectionwd","text":"synapticConnectionWD"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Simulation.html#schema-display","text":"Display"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Simulation.html#schema-eventoutputfile","text":"EventOutputFile"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Simulation.html#schema-eventselection","text":"EventSelection"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Simulation.html#schema-line","text":"Line"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Simulation.html#schema-outputcolumn","text":"OutputColumn"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Simulation.html#schema-outputfile","text":"OutputFile"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Simulation.html#id1","text":"Simulation"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-alphacondsynapse","text":"alphaCondSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-alphacurrsynapse","text":"alphaCurrSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-eif-cond-alpha-isfa-ista","text":"EIF_cond_alpha_isfa_ista"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-eif-cond-exp-isfa-ista","text":"EIF_cond_exp_isfa_ista"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-expcondsynapse","text":"expCondSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.htm#schema-expcurrsynapse","text":"expCurrSynapse"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-hh-cond-exp","text":"HH_cond_exp"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-if-cond-alpha","text":"IF_cond_alpha"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-if-cond-exp","text":"IF_cond_exp"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-if-curr-alpha","text":"IF_curr_alpha"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-if-curr-exp","text":"IF_curr_exp"},{"url":"https://docs.neuroml.org/Userdocs/Schemas/PyNN.html#schema-spikesourcepoisson","text":"SpikeSourcePoisson"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.672},{"page":8,"text":"            Tools  and  resources                                                                                                                                                                                                                                                                           Neuroscience\n                                                                                                                                                                                                                                                                         a  Na  b.           C_\n                                                                                                                                                                                                                                                                          Na\n                                                                                                                                                                                                                                                                         Conductances  Cells   Networks\n                                                                                                                                                                                                                                                                          8\n                                                                                                                                                                                                                                                                         8 0     morphl\n                                                                                                                                                                                                                                                                            P                 pop\n                                                                                                                                                                                                                                                                          8 gate\n                                                                                                                                                                                                                                                                          0       morph2'     projection\n                                                                                                                                                                                                                                                                          gate                     pop\n                                                                                                                                                                                                                                                                         gate\n                                                                                                                                                                                                                                                                         d.               spike\n                                                                                                                                                                                                                                                                                  pulse Generator\n                                                                                                                                                                                                                                                                                  Generator  spike\n                                                                                                                                                                                                                                                                         conductance         Array\n                                                                                                                                                                                                                                                                         gateKs  voltage  Inputs\n                                                                                                                                                                                                                                                                                 Clamp         population\n                                                                                                                                                                                                                                                                          Kinetic\n                                                                                                                                                                                                                                                                          Scheme\n                                                                                                                                                                                                                                                                          lon Channels             inputList\n                                                                                                                                                                                                                                                                         conductance          Networks\n                                                                                                                                                                                                                                                                          Hodgkin-  NeuroML    projection\n                                                                                                                                                                                                                                                                         gateHh  Huxley\n                                                                                                                                                                                                                                                                         Rates                iaf\n                                                                                                                                                                                                                                                                                             Cell  intracellular\n                                                                                                                                                                                                                                                                          Synapses                 Properties  channel\n                                                                                                                                                                                                                                                                                  expone                    Densities\n                                                                                                                                                                                                                                                                                  Synapse     biophysical  membrane\n                                                                                                                                                                                                                                                                          gap     Cells        cell        Properties specific\n                                                                                                                                                                                                                                                                          Junction alpha                    Capacitances\n                                                                                                                                                                                                                                                                                  Synapse          morphology\n                                                                                                                                                                                                                                                                                              izhikevich    segment\n                                                                                                                                                                                                                                                                                  HindmarshRose  Cell       Group\n                                                                                                                                                                                                                                                                                  Cell             segment\n                                                                                                                                                                                                                                                                         Figure 2. NeuroML is a modular, hierarchical format that supports multi-\n                                                                                                                                                                                                                                                                                             scale modeling. Elements in NeuroML\n                                     are formally defined, independent, self-                                                                          are formally defined, independent, self-                                                                          are formally defined, independent, self-\n                                                                                                                                                                                                                                                                          contained building blocks with hierarchical relationships between them.\n                                     (a) Models of ionic conductances can be defined as a composition of gates, each with specific voltage (and        (a) Models of ionic conductances can be defined as a composition of gates, each with specific voltage (and        (a) Models of ionic conductances can be defined as a composition of gates, each with specific voltage (and\n                                     potentially [Ca²⁺]) dependence that controls the conductance. (b) Morphologically detailed neuronal models        potentially [Ca²⁺]) dependence that controls the conductance. (b) Morphologically detailed neuronal models        potentially [Ca²⁺]) dependence that controls the conductance. (b) Morphologically detailed neuronal models\n                                     specify the 3D structure of the cells, along with passive electrical properties, and reference ion channels that  specify the 3D structure of the cells, along with passive electrical properties, and reference ion channels that  specify the 3D structure of the cells, along with passive electrical properties, and reference ion channels that\n                                     confer membrane conductances. (c) Network models contain populations of these cells connected via synaptic        confer membrane conductances. (c) Network models contain populations of these cells connected via synaptic        confer membrane conductances. (c) Network models contain populations of these cells connected via synaptic\n                                     projections. (d) A truncated illustration of the main categories of the NeuroMLv2 standard elements and their     projections. (d) A truncated illustration of the main categories of the NeuroMLv2 standard elements and their     projections. (d) A truncated illustration of the main categories of the NeuroMLv2 standard elements and their\n                                     hierarchies. The standard includes commonly used model elements/building blocks that have been pre-               hierarchies. The standard includes commonly used model elements/building blocks that have been pre-               hierarchies. The standard includes commonly used model elements/building blocks that have been pre-\n                                                                                                                                                                                                                                                                                                            defined\n                                     for users: Cells: neuronal models ranging from simple spiking point neurons to biophysically detailed cells with  for users: Cells: neuronal models ranging from simple spiking point neurons to biophysically detailed cells with  for users: Cells: neuronal models ranging from simple spiking point neurons to biophysically detailed cells with\n                                     multi-                                                                                                            multi-                                                                                                            multi-\n                                                                                                                                                                                                                                                                         compartmental morphologies and active membrane conductances; Synapses and ionic conductance\n                                     models: commonly used chemical and electrical synapse models (gap junctions), and multiple representations for    models: commonly used chemical and electrical synapse models (gap junctions), and multiple representations for    models: commonly used chemical and electrical synapse models (gap junctions), and multiple representations for\n                                     Figure 2 continued on next page                                                                                   Figure 2 continued on next page                                                                                   Figure 2 continued on next page\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                       8 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Conductances\n\n# Cells\n\n# Networks\n\n| morphl        | P          | morph2'    | projection      | gate            |\n| ------------- | ---------- | ---------- | --------------- | --------------- |\n| gate          | d.         | spike      | pulse Generator | Generator spike |\n| conductance   | Array      | gateKs     | voltage         | Inputs          |\n| Clamp         | Kinetic    | Scheme     | lon Channels    | inputList       |\n| conductance   | Hodgkin-   | NeuroML    | projection      | gateHh          |\n| Huxley        | Rates      | iaf        | Cell            | intracellular   |\n| Synapses      | Properties | channel    | densities       |                 |\n| gap           | Junction   | alpha      | Synapse         |                 |\n| biophysical   | membrane   | cell       | Properties      | specific        |\n| Capacitances  | morphology | izhikevich | segment         |                 |\n| HindmarshRose | Cell       | Group      | segment         |                 |\n\nFigure 2. NeuroML is a modular, hierarchical format that supports multi-scale modeling. Elements in NeuroML are formally defined, independent, self-contained building blocks with hierarchical relationships between them.\n\n(a) Models of ionic conductances can be defined as a composition of gates, each with specific voltage (and potentially [Ca²⁺]) dependence that controls the conductance. (b) Morphologically detailed neuronal models specify the 3D structure of the cells, along with passive electrical properties, and reference ion channels that confer membrane conductances. (c) Network models contain populations of these cells connected via synaptic projections. (d) A truncated illustration of the main categories of the NeuroMLv2 standard elements and their hierarchies. The standard includes commonly used model elements/building blocks that have been predefined for users: Cells: neuronal models ranging from simple spiking point neurons to biophysically detailed cells with multi-compartmental morphologies and active membrane conductances; Synapses and ionic conductance models: commonly used chemical and electrical synapse models (gap junctions), and multiple representations for.\n\nFigure 2 continued on next page\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[{"name":"img_p7_1.png","height":2144,"width":1620,"x":174.6389771,"y":60.072997999999984,"original_width":1620,"original_height":2144,"ocr":[{"x":22,"y":16,"w":30,"h":30,"confidence":0.999767317003716,"text":"a"},{"x":539,"y":11,"w":40,"h":36,"confidence":0.7517571899718434,"text":"b."},{"x":1054,"y":16,"w":26,"h":28,"confidence":0.7035917513610702,"text":"C_"},{"x":281,"y":41,"w":30,"h":20,"confidence":0.9999994942378553,"text":"Na"},{"x":395,"y":125,"w":30,"h":20,"confidence":0.9999984827137908,"text":"Na"},{"x":141,"y":357,"w":272,"h":44,"confidence":0.7184244667363627,"text":"Conductances"},{"x":745,"y":359,"w":96,"h":42,"confidence":0.9999731307018334,"text":"Cells"},{"x":1218,"y":360,"w":187,"h":42,"confidence":0.9997911111814025,"text":"Networks"},{"x":312,"y":528,"w":34,"h":32,"confidence":0.22444374546467216,"text":"0"},{"x":241,"y":599,"w":36,"h":36,"confidence":0.6355222714967255,"text":"P"},{"x":218,"y":720,"w":34,"h":32,"confidence":0.21045414155915765,"text":"0"},{"x":31,"y":931,"w":36,"h":36,"confidence":0.9958762340633238,"text":"d."},{"x":854,"y":958,"w":66,"h":28,"confidence":0.9997757133838923,"text":"spike"},{"x":828,"y":990,"w":122,"h":26,"confidence":0.9999936421611184,"text":"Generator"},{"x":673,"y":1014,"w":71,"h":36,"confidence":0.9999881647244039,"text":"pulse"},{"x":650,"y":1052,"w":120,"h":24,"confidence":0.9936898946678769,"text":"Generator"},{"x":1008,"y":1091,"w":71,"h":32,"confidence":0.8449852457366361,"text":"Array"},{"x":172,"y":1110,"w":150,"h":26,"confidence":0.9999989576540002,"text":"conductance"},{"x":819,"y":1177,"w":81,"h":30,"confidence":0.8897154212809587,"text":"Inputs"},{"x":40,"y":1204,"w":87,"h":33,"confidence":0.8378950234093467,"text":"gateKs"},{"x":602,"y":1190,"w":93,"h":36,"confidence":0.9999456158728227,"text":"voltage"},{"x":607,"y":1222,"w":85,"h":38,"confidence":0.9993786256742274,"text":"Clamp"},{"x":1169,"y":1246,"w":134,"h":43,"confidence":0.9806196578519184,"text":"population"},{"x":224,"y":1300,"w":84,"h":26,"confidence":0.9999935568599867,"text":"Kinetic"},{"x":218,"y":1332,"w":94,"h":26,"confidence":0.999957659518406,"text":"Scheme"},{"x":396,"y":1366,"w":152,"h":28,"confidence":0.69936357835591,"text":"lon Channels"},{"x":1280,"y":1382,"w":110,"h":32,"confidence":0.9998852776366542,"text":"inputList"},{"x":1071,"y":1435,"w":116,"h":26,"confidence":0.9971180248028865,"text":"Networks"},{"x":142,"y":1448,"w":150,"h":26,"confidence":0.9985464920364764,"text":"conductance"},{"x":314,"y":1536,"w":106,"h":30,"confidence":0.999949929024726,"text":"Hodgkin-"},{"x":684,"y":1520,"w":208,"h":44,"confidence":0.999722347082015,"text":"NeuroML"},{"x":1250,"y":1539,"w":125,"h":38,"confidence":0.9999431515516628,"text":"projection"},{"x":324,"y":1570,"w":82,"h":28,"confidence":0.999992359276219,"text":"Huxley"},{"x":118,"y":1592,"w":93,"h":32,"confidence":0.8718312567437579,"text":"gateHh"},{"x":126,"y":1626,"w":68,"h":26,"confidence":0.9999877382276774,"text":"Rates"},{"x":1068,"y":1628,"w":36,"h":26,"confidence":0.5592552423477173,"text":"iaf"},{"x":1062,"y":1660,"w":48,"h":26,"confidence":0.9999857544898987,"text":"Cell"},{"x":1272,"y":1662,"w":146,"h":26,"confidence":0.8804519604115271,"text":"intracellular"},{"x":424,"y":1702,"w":110,"h":30,"confidence":0.6905854695176579,"text":"Synapses"},{"x":1272,"y":1694,"w":124,"h":30,"confidence":0.9999407765424586,"text":"Properties"},{"x":1444,"y":1700,"w":96,"h":24,"confidence":0.9999986032365197,"text":"channel"},{"x":1446,"y":1732,"w":108,"h":26,"confidence":0.9999987284338405,"text":"Densities"},{"x":635,"y":1739,"w":99,"h":39,"confidence":0.9516812903125956,"text":"expone"},{"x":636,"y":1778,"w":100,"h":30,"confidence":0.9999788231957394,"text":"Synapse"},{"x":1124,"y":1784,"w":136,"h":32,"confidence":0.9997260900005092,"text":"biophysical"},{"x":1324,"y":1782,"w":126,"h":26,"confidence":0.9999801908999307,"text":"membrane"},{"x":950,"y":1826,"w":60,"h":26,"confidence":0.999967266359555,"text":"Cells"},{"x":1168,"y":1818,"w":46,"h":24,"confidence":0.9999668598175049,"text":"cell"},{"x":1321,"y":1814,"w":125,"h":30,"confidence":0.8847353023156453,"text":"Properties"},{"x":1454,"y":1842,"w":95,"h":33,"confidence":0.9999696962257295,"text":"specific"},{"x":350,"y":1876,"w":46,"h":26,"confidence":0.9994081258773804,"text":"gap"},{"x":526,"y":1886,"w":70,"h":30,"confidence":0.9997543879864361,"text":"alpha"},{"x":1457,"y":1875,"w":155,"h":33,"confidence":0.9999890222861819,"text":"Capacitances"},{"x":319,"y":1902,"w":103,"h":32,"confidence":0.9999916127625772,"text":"Junction"},{"x":512,"y":1918,"w":100,"h":32,"confidence":0.9999838695962789,"text":"Synapse"},{"x":1274,"y":1918,"w":138,"h":30,"confidence":0.999982960741767,"text":"morphology"},{"x":1070,"y":1962,"w":120,"h":28,"confidence":0.9953879216339794,"text":"izhikevich"},{"x":1400,"y":1978,"w":104,"h":28,"confidence":0.999983734424943,"text":"segment"},{"x":1106,"y":1996,"w":48,"h":24,"confidence":0.9999557733535767,"text":"Cell"},{"x":878,"y":2022,"w":184,"h":28,"confidence":0.9999222340830041,"text":"HindmarshRose"},{"x":1400,"y":2006,"w":79,"h":33,"confidence":0.9997431921312782,"text":"Group"},{"x":928,"y":2056,"w":48,"h":26,"confidence":0.946482907134299,"text":"Cell"},{"x":1309,"y":2061,"w":105,"h":31,"confidence":0.996692534919381,"text":"segment"},{"x":257.81521909904495,"y":472.1423983060844,"w":81.3695618019101,"h":50.71520338783125,"confidence":0.6360133079724619,"text":"8"},{"x":600.572320221216,"y":572.1471370618368,"w":167.8553595575679,"h":34.29427412367363,"confidence":0.8716421843233264,"text":"morphl"},{"x":187.8418973634698,"y":546.1359689265731,"w":80.3162052730604,"h":51.728062146853745,"confidence":0.8368562922242404,"text":"8"},{"x":1098.295216003452,"y":602.9885648010356,"w":120.40956799309606,"h":1.0228703979287275,"confidence":0.9996973803440418,"text":"pop"},{"x":1151.120938695087,"y":734.0554156911875,"w":229.75812260982593,"h":65.11083138237495,"confidence":0.9999912165096363,"text":"projection"},{"x":260.6712678358369,"y":674.5754088880901,"w":95.65746432832623,"h":10.150817776180247,"confidence":0.9999991655349731,"text":"gate"},{"x":163.9594617776757,"y":662.1094703550758,"w":78.0810764446486,"h":56.78105928984837,"confidence":0.8158825982840234,"text":"8"},{"x":703.6984172530881,"y":753.1428776388963,"w":145.60316549382378,"h":33.28575527779253,"confidence":0.6732037640775738,"text":"morph2'"},{"x":332.6712678358369,"y":802.5754088880901,"w":94.65746432832623,"h":10.150817776180247,"confidence":0.9999985098838806,"text":"gate"},{"x":1314.253042288673,"y":811.2759126866019,"w":116.49391542265403,"h":0.4481746267961171,"confidence":0.9999362678448231,"text":"pop"},{"x":74.85033209803827,"y":817.4856974058804,"w":95.29933580392348,"h":11.971394811760774,"confidence":0.9999992847442627,"text":"gate"},{"x":1008.6027607015021,"y":1061.3452453328541,"w":69.79447859699576,"h":24.30950933429176,"confidence":0.7949362746339242,"text":"spike"}]}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":111.29,"h":36.21}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Conductances","md":"# Conductances","bBox":{"x":180,"y":64,"w":93,"h":350}},{"type":"heading","lvl":1,"value":"Cells","md":"# Cells","bBox":{"x":353,"y":146,"w":113,"h":414}},{"type":"heading","lvl":1,"value":"Networks","md":"# Networks","bBox":{"x":432,"y":146,"w":80,"h":265}},{"type":"table","rows":[["morphl","P","morph2'","projection","gate"],["gate","d.","spike","pulse Generator","Generator spike"],["conductance","Array","gateKs","voltage","Inputs"],["Clamp","Kinetic","Scheme","lon Channels","inputList"],["conductance","Hodgkin-","NeuroML","projection","gateHh"],["Huxley","Rates","iaf","Cell","intracellular"],["Synapses","Properties","channel","densities",""],["gap","Junction","alpha","Synapse",""],["biophysical","membrane","cell","Properties","specific"],["Capacitances","morphology","izhikevich","segment",""],["HindmarshRose","Cell","Group","segment",""]],"md":"| morphl        | P          | morph2'    | projection      | gate            |\n| ------------- | ---------- | ---------- | --------------- | --------------- |\n| gate          | d.         | spike      | pulse Generator | Generator spike |\n| conductance   | Array      | gateKs     | voltage         | Inputs          |\n| Clamp         | Kinetic    | Scheme     | lon Channels    | inputList       |\n| conductance   | Hodgkin-   | NeuroML    | projection      | gateHh          |\n| Huxley        | Rates      | iaf        | Cell            | intracellular   |\n| Synapses      | Properties | channel    | densities       |                 |\n| gap           | Junction   | alpha      | Synapse         |                 |\n| biophysical   | membrane   | cell       | Properties      | specific        |\n| Capacitances  | morphology | izhikevich | segment         |                 |\n| HindmarshRose | Cell       | Group      | segment         |                 |","isPerfectTable":true,"csv":"\"morphl\",\"P\",\"morph2'\",\"projection\",\"gate\"\n\"gate\",\"d.\",\"spike\",\"pulse Generator\",\"Generator spike\"\n\"conductance\",\"Array\",\"gateKs\",\"voltage\",\"Inputs\"\n\"Clamp\",\"Kinetic\",\"Scheme\",\"lon Channels\",\"inputList\"\n\"conductance\",\"Hodgkin-\",\"NeuroML\",\"projection\",\"gateHh\"\n\"Huxley\",\"Rates\",\"iaf\",\"Cell\",\"intracellular\"\n\"Synapses\",\"Properties\",\"channel\",\"densities\",\"\"\n\"gap\",\"Junction\",\"alpha\",\"Synapse\",\"\"\n\"biophysical\",\"membrane\",\"cell\",\"Properties\",\"specific\"\n\"Capacitances\",\"morphology\",\"izhikevich\",\"segment\",\"\"\n\"HindmarshRose\",\"Cell\",\"Group\",\"segment\",\"\"","bBox":{"x":37.01,"y":34.63,"w":537.78,"h":720.13}},{"type":"text","value":"Figure 2. NeuroML is a modular, hierarchical format that supports multi-scale modeling. Elements in NeuroML are formally defined, independent, self-contained building blocks with hierarchical relationships between them.\n\n(a) Models of ionic conductances can be defined as a composition of gates, each with specific voltage (and potentially [Ca²⁺]) dependence that controls the conductance. (b) Morphologically detailed neuronal models specify the 3D structure of the cells, along with passive electrical properties, and reference ion channels that confer membrane conductances. (c) Network models contain populations of these cells connected via synaptic projections. (d) A truncated illustration of the main categories of the NeuroMLv2 standard elements and their hierarchies. The standard includes commonly used model elements/building blocks that have been predefined for users: Cells: neuronal models ranging from simple spiking point neurons to biophysically detailed cells with multi-compartmental morphologies and active membrane conductances; Synapses and ionic conductance models: commonly used chemical and electrical synapse models (gap junctions), and multiple representations for.\n\nFigure 2 continued on next page\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Figure 2. NeuroML is a modular, hierarchical format that supports multi-scale modeling. Elements in NeuroML are formally defined, independent, self-contained building blocks with hierarchical relationships between them.\n\n(a) Models of ionic conductances can be defined as a composition of gates, each with specific voltage (and potentially [Ca²⁺]) dependence that controls the conductance. (b) Morphologically detailed neuronal models specify the 3D structure of the cells, along with passive electrical properties, and reference ion channels that confer membrane conductances. (c) Network models contain populations of these cells connected via synaptic projections. (d) A truncated illustration of the main categories of the NeuroMLv2 standard elements and their hierarchies. The standard includes commonly used model elements/building blocks that have been predefined for users: Cells: neuronal models ranging from simple spiking point neurons to biophysically detailed cells with multi-compartmental morphologies and active membrane conductances; Synapses and ionic conductance models: commonly used chemical and electrical synapse models (gap junctions), and multiple representations for.\n\nFigure 2 continued on next page\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.52,"y":64,"w":402.38,"h":655.3}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.471},{"page":9,"text":"          Tools  and  resourceseuroscience\netPyNE     N2A PyNN\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           neuroConstruct          NEURON  SciUnit\neuro       pyNeuroML   MATLAB/  OMV\norpho.Org  libNeuroML  C++ APIs jNeuroML\npyNeuroML  Create   pyNeuroML\nalidate  NetPyNE\neuroML-DB  Reuse  {NeuroML]  pyNeuroML OSB\nisualize\nhare               NeuroML-DB\npyNeuroML   Fit         Simulate  jLEMS neuroConstruct\neuroML-DB   pyNeuroML   jNeuroML  NEURON\npyNeuroML  Arbor\neuroTune               MOOSE  PyNN NEST\nluePyOpt   SciUnit     EDEN Brian2\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       NetPyNE     NetPyNE\n                              Figure 3. NeuroML compliant tools and their relation to the model life cycle. The inner circle shows the core          Figure 3. NeuroML compliant tools and their relation to the model life cycle. The inner circle shows the core          Figure 3. NeuroML compliant tools and their relation to the model life cycle. The inner circle shows the core          Figure 3. NeuroML compliant tools and their relation to the model life cycle. The inner circle shows the core          Figure 3. NeuroML compliant tools and their relation to the model life cycle. The inner circle shows the core\n                              NeuroML tools and libraries that are maintained by the NeuroML developers. These provide the functionality to          NeuroML tools and libraries that are maintained by the NeuroML developers. These provide the functionality to          NeuroML tools and libraries that are maintained by the NeuroML developers. These provide the functionality to          NeuroML tools and libraries that are maintained by the NeuroML developers. These provide the functionality to          NeuroML tools and libraries that are maintained by the NeuroML developers. These provide the functionality to\nread, modify, or create new NeuroML models, as well as to validate, analyze, visualize and simulate the models.\n                              The outermost layer shows NeuroML-                                                                                     The outermost layer shows NeuroML-                                                                                     The outermost layer shows NeuroML-                                                                                     The outermost layer shows NeuroML-                                                                                     The outermost layer shows NeuroML-\ncompliant tools that have been developed independently to allow various\n                              interactions with NeuroML models. These complement the core tools by facilitating model creation, validation,          interactions with NeuroML models. These complement the core tools by facilitating model creation, validation,          interactions with NeuroML models. These complement the core tools by facilitating model creation, validation,          interactions with NeuroML models. These complement the core tools by facilitating model creation, validation,          interactions with NeuroML models. These complement the core tools by facilitating model creation, validation,\n                              visualization, simulation, fitting/optimization, sharing, and reuse. Further information on each of the tools shown    visualization, simulation, fitting/optimization, sharing, and reuse. Further information on each of the tools shown    visualization, simulation, fitting/optimization, sharing, and reuse. Further information on each of the tools shown    visualization, simulation, fitting/optimization, sharing, and reuse. Further information on each of the tools shown    visualization, simulation, fitting/optimization, sharing, and reuse. Further information on each of the tools shown\n                              here can be found in Tables 3 and 4.                                                                                   here can be found in Tables 3 and 4.                                                                                   here can be found in Tables 3 and 4.                                                                                   here can be found in Tables 3 and 4.                                                                                   here can be found in Tables 3 and 4.\nable 5 lists interactive, step-\nby-\nstep guides in the NeuroML documentation, which can be followed\nto learn the fundamental NeuroML concepts, as well as illustrate how NeuroML-  compliant tools can\n                              be used to achieve speciﬁc tasks across the model development life cycle. In the following sections,                   be used to achieve speciﬁc tasks across the model development life cycle. In the following sections,                   be used to achieve speciﬁc tasks across the model development life cycle. In the following sections,                   be used to achieve speciﬁc tasks across the model development life cycle. In the following sections,                   be used to achieve speciﬁc tasks across the model development life cycle. In the following sections,\n                              we discuss the speciﬁc functionality available at each stage of model development.                                     we discuss the speciﬁc functionality available at each stage of model development.                                     we discuss the speciﬁc functionality available at each stage of model development.                                     we discuss the speciﬁc functionality available at each stage of model development.                                     we discuss the speciﬁc functionality available at each stage of model development.\n                              Creating NeuroML models                                                                                                Creating NeuroML models                                                                                                Creating NeuroML models                                                                                                Creating NeuroML models                                                                                                Creating NeuroML models\n                              The structured declarative elements of NeuroMLv2, when combined with a procedural scripting                            The structured declarative elements of NeuroMLv2, when combined with a procedural scripting                            The structured declarative elements of NeuroMLv2, when combined with a procedural scripting                            The structured declarative elements of NeuroMLv2, when combined with a procedural scripting                            The structured declarative elements of NeuroMLv2, when combined with a procedural scripting\n                              language such as Python, provide a powerful and yet intuitive ‘building block’ approach to model                       language such as Python, provide a powerful and yet intuitive ‘building block’ approach to model                       language such as Python, provide a powerful and yet intuitive ‘building block’ approach to model                       language such as Python, provide a powerful and yet intuitive ‘building block’ approach to model                       language such as Python, provide a powerful and yet intuitive ‘building block’ approach to model\n                              construction. For this reason, Python is now the recommended language for interacting with NeuroML                     construction. For this reason, Python is now the recommended language for interacting with NeuroML                     construction. For this reason, Python is now the recommended language for interacting with NeuroML                     construction. For this reason, Python is now the recommended language for interacting with NeuroML                     construction. For this reason, Python is now the recommended language for interacting with NeuroML\n                              (Figure 4), although XML remains the primary serialization language for the format (i.e. for saving to                 (Figure 4), although XML remains the primary serialization language for the format (i.e. for saving to                 (Figure 4), although XML remains the primary serialization language for the format (i.e. for saving to                 (Figure 4), although XML remains the primary serialization language for the format (i.e. for saving to                 (Figure 4), although XML remains the primary serialization language for the format (i.e. for saving to\n                              disk and depositing in model repositories (Figure  5)). Python has emerged as a key programming                        disk and depositing in model repositories (Figure  5)). Python has emerged as a key programming                        disk and depositing in model repositories (Figure  5)). Python has emerged as a key programming                        disk and depositing in model repositories (Figure  5)). Python has emerged as a key programming                        disk and depositing in model repositories (Figure  5)). Python has emerged as a key programming\n                              language in science, including many areas of neuroscience (Muller et  al., 2015). A Python-                            language in science, including many areas of neuroscience (Muller et  al., 2015). A Python-                            language in science, including many areas of neuroscience (Muller et  al., 2015). A Python-                            language in science, including many areas of neuroscience (Muller et  al., 2015). A Python-                            language in science, including many areas of neuroscience (Muller et  al., 2015). A Python-  based\n                              NeuroML ecosystem ensures that users can take advantage of Python’s features, and also use pack-                       NeuroML ecosystem ensures that users can take advantage of Python’s features, and also use pack-                       NeuroML ecosystem ensures that users can take advantage of Python’s features, and also use pack-                       NeuroML ecosystem ensures that users can take advantage of Python’s features, and also use pack-                       NeuroML ecosystem ensures that users can take advantage of Python’s features, and also use pack-\n                              ages from the wider Python ecosystem in their work (e.g. Numpy (Harris et  al., 2020), Matplotlib                      ages from the wider Python ecosystem in their work (e.g. Numpy (Harris et  al., 2020), Matplotlib                      ages from the wider Python ecosystem in their work (e.g. Numpy (Harris et  al., 2020), Matplotlib                      ages from the wider Python ecosystem in their work (e.g. Numpy (Harris et  al., 2020), Matplotlib                      ages from the wider Python ecosystem in their work (e.g. Numpy (Harris et  al., 2020), Matplotlib\n                              Hunter, 2007). pyNeuroML, the Python interface for working with NeuroML, is built on top of the                        Hunter, 2007). pyNeuroML, the Python interface for working with NeuroML, is built on top of the                        Hunter, 2007). pyNeuroML, the Python interface for working with NeuroML, is built on top of the                        Hunter, 2007). pyNeuroML, the Python interface for working with NeuroML, is built on top of the                        Hunter, 2007). pyNeuroML, the Python interface for working with NeuroML, is built on top of the\n                              Python NeuroML API, libNeuroML (Vella et al., 2014; Sinha, 2023; Figure 4).                                            Python NeuroML API, libNeuroML (Vella et al., 2014; Sinha, 2023; Figure 4).                                            Python NeuroML API, libNeuroML (Vella et al., 2014; Sinha, 2023; Figure 4).                                            Python NeuroML API, libNeuroML (Vella et al., 2014; Sinha, 2023; Figure 4).                                            Python NeuroML API, libNeuroML (Vella et al., 2014; Sinha, 2023; Figure 4).\ns illustrated in Figure  5, Python can be used to combine different NeuroML components into\n                              a model. NeuroML supports several pathways for the creation of new models. Modelers may use                            a model. NeuroML supports several pathways for the creation of new models. Modelers may use                            a model. NeuroML supports several pathways for the creation of new models. Modelers may use                            a model. NeuroML supports several pathways for the creation of new models. Modelers may use                            a model. NeuroML supports several pathways for the creation of new models. Modelers may use\n                              Figure 2 continued                                                                                                     Figure 2 continued                                                                                                     Figure 2 continued                                                                                                     Figure 2 continued                                                                                                     Figure 2 continued\n                              ionic conductances; Inputs: to drive cell and network activity, e.g., current or voltage clamp, spiking background     ionic conductances; Inputs: to drive cell and network activity, e.g., current or voltage clamp, spiking background     ionic conductances; Inputs: to drive cell and network activity, e.g., current or voltage clamp, spiking background     ionic conductances; Inputs: to drive cell and network activity, e.g., current or voltage clamp, spiking background     ionic conductances; Inputs: to drive cell and network activity, e.g., current or voltage clamp, spiking background\n                              inputs; Networks: of populations (containing any of the aforementioned cell types), and projections. The full list of  inputs; Networks: of populations (containing any of the aforementioned cell types), and projections. The full list of  inputs; Networks: of populations (containing any of the aforementioned cell types), and projections. The full list of  inputs; Networks: of populations (containing any of the aforementioned cell types), and projections. The full list of  inputs; Networks: of populations (containing any of the aforementioned cell types), and projections. The full list of\n                              standard NeuroML elements can be found in Tables 1 and 2.                                                              standard NeuroML elements can be found in Tables 1 and 2.                                                              standard NeuroML elements can be found in Tables 1 and 2.                                                              standard NeuroML elements can be found in Tables 1 and 2.                                                              standard NeuroML elements can be found in Tables 1 and 2.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                                                                                                                                                                                                              9 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n| NetPyNE        | N2A        | PyNN           |\n| -------------- | ---------- | -------------- |\n| neuroConstruct | NEURON     | SciUnit        |\n| Neuro          | pyNeuroML  | MATLAB/OMV     |\n| Morpho.Org     | libNeuroML | C++ APIs       |\n| jNeuroML       | OSB        | pyNeuroML      |\n| Create         | pyNeuroML  | Validate       |\n| NetPyNE        | NeuroML-DB | Reuse          |\n| {NeuroML}      | pyNeuroML  | OSB            |\n| Visualize      | OSB        | Share          |\n| NeuroML-DB     | pyNeuroML  | Fit            |\n| Simulate       | jLEMS      | neuroConstruct |\n| NeuroML-DB     | pyNeuroML  | jNeuroML       |\n| NEURON         | pyNeuroML  | Arbor          |\n| NeuroTune      | MOOSE      | PyNN           |\n| NEST           | BluePyOpt  | SciUnit        |\n| EDEN           | Brian2     | NetPyNE        |\n\nFigure 3. NeuroML compliant tools and their relation to the model life cycle. The inner circle shows the core NeuroML tools and libraries that are maintained by the NeuroML developers. These provide the functionality to read, modify, or create new NeuroML models, as well as to validate, analyze, visualize and simulate the models.\n\nThe outermost layer shows NeuroML-compliant tools that have been developed independently to allow various interactions with NeuroML models. These complement the core tools by facilitating model creation, validation, visualization, simulation, fitting/optimization, sharing, and reuse. Further information on each of the tools shown here can be found in Tables 3 and 4.\n\nTable 5 lists interactive, step-by-step guides in the NeuroML documentation, which can be followed to learn the fundamental NeuroML concepts, as well as illustrate how NeuroML-compliant tools can be used to achieve specific tasks across the model development life cycle. In the following sections, we discuss the specific functionality available at each stage of model development.\n\n# Creating NeuroML models\n\nThe structured declarative elements of NeuroMLv2, when combined with a procedural scripting language such as Python, provide a powerful and yet intuitive ‘building block’ approach to model construction. For this reason, Python is now the recommended language for interacting with NeuroML (Figure 4), although XML remains the primary serialization language for the format (i.e. for saving to disk and depositing in model repositories (Figure 5)). Python has emerged as a key programming language in science, including many areas of neuroscience (Muller et al., 2015). A Python-based NeuroML ecosystem ensures that users can take advantage of Python’s features, and also use packages from the wider Python ecosystem in their work (e.g. Numpy (Harris et al., 2020), Matplotlib Hunter, 2007). pyNeuroML, the Python interface for working with NeuroML, is built on top of the Python NeuroML API, libNeuroML (Vella et al., 2014; Sinha, 2023; Figure 4).\n\nAs illustrated in Figure 5, Python can be used to combine different NeuroML components into a model. NeuroML supports several pathways for the creation of new models. Modelers may use ionic conductances; Inputs: to drive cell and network activity, e.g., current or voltage clamp, spiking background inputs; Networks: of populations (containing any of the aforementioned cell types), and projections. The full list of standard NeuroML elements can be found in Tables 1 and 2.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[{"name":"img_p8_1.png","height":115,"width":363,"x":325.6680957,"y":169.02251740000003,"original_width":363,"original_height":115,"ocr":[{"x":124,"y":22,"w":234,"h":52,"confidence":0.9043089541525373,"text":"{NeuroML]"}]}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":226.09,"y":34.63,"w":348.54,"h":81.2}},{"type":"table","rows":[["NetPyNE","N2A","PyNN"],["neuroConstruct","NEURON","SciUnit"],["Neuro","pyNeuroML","MATLAB/OMV"],["Morpho.Org","libNeuroML","C++ APIs"],["jNeuroML","OSB","pyNeuroML"],["Create","pyNeuroML","Validate"],["NetPyNE","NeuroML-DB","Reuse"],["{NeuroML}","pyNeuroML","OSB"],["Visualize","OSB","Share"],["NeuroML-DB","pyNeuroML","Fit"],["Simulate","jLEMS","neuroConstruct"],["NeuroML-DB","pyNeuroML","jNeuroML"],["NEURON","pyNeuroML","Arbor"],["NeuroTune","MOOSE","PyNN"],["NEST","BluePyOpt","SciUnit"],["EDEN","Brian2","NetPyNE"]],"md":"| NetPyNE        | N2A        | PyNN           |\n| -------------- | ---------- | -------------- |\n| neuroConstruct | NEURON     | SciUnit        |\n| Neuro          | pyNeuroML  | MATLAB/OMV     |\n| Morpho.Org     | libNeuroML | C++ APIs       |\n| jNeuroML       | OSB        | pyNeuroML      |\n| Create         | pyNeuroML  | Validate       |\n| NetPyNE        | NeuroML-DB | Reuse          |\n| {NeuroML}      | pyNeuroML  | OSB            |\n| Visualize      | OSB        | Share          |\n| NeuroML-DB     | pyNeuroML  | Fit            |\n| Simulate       | jLEMS      | neuroConstruct |\n| NeuroML-DB     | pyNeuroML  | jNeuroML       |\n| NEURON         | pyNeuroML  | Arbor          |\n| NeuroTune      | MOOSE      | PyNN           |\n| NEST           | BluePyOpt  | SciUnit        |\n| EDEN           | Brian2     | NetPyNE        |","isPerfectTable":true,"csv":"\"NetPyNE\",\"N2A\",\"PyNN\"\n\"neuroConstruct\",\"NEURON\",\"SciUnit\"\n\"Neuro\",\"pyNeuroML\",\"MATLAB/OMV\"\n\"Morpho.Org\",\"libNeuroML\",\"C++ APIs\"\n\"jNeuroML\",\"OSB\",\"pyNeuroML\"\n\"Create\",\"pyNeuroML\",\"Validate\"\n\"NetPyNE\",\"NeuroML-DB\",\"Reuse\"\n\"{NeuroML}\",\"pyNeuroML\",\"OSB\"\n\"Visualize\",\"OSB\",\"Share\"\n\"NeuroML-DB\",\"pyNeuroML\",\"Fit\"\n\"Simulate\",\"jLEMS\",\"neuroConstruct\"\n\"NeuroML-DB\",\"pyNeuroML\",\"jNeuroML\"\n\"NEURON\",\"pyNeuroML\",\"Arbor\"\n\"NeuroTune\",\"MOOSE\",\"PyNN\"\n\"NEST\",\"BluePyOpt\",\"SciUnit\"\n\"EDEN\",\"Brian2\",\"NetPyNE\"","bBox":{"x":168.53,"y":34.63,"w":415,"h":661.07}},{"type":"text","value":"Figure 3. NeuroML compliant tools and their relation to the model life cycle. The inner circle shows the core NeuroML tools and libraries that are maintained by the NeuroML developers. These provide the functionality to read, modify, or create new NeuroML models, as well as to validate, analyze, visualize and simulate the models.\n\nThe outermost layer shows NeuroML-compliant tools that have been developed independently to allow various interactions with NeuroML models. These complement the core tools by facilitating model creation, validation, visualization, simulation, fitting/optimization, sharing, and reuse. Further information on each of the tools shown here can be found in Tables 3 and 4.\n\nTable 5 lists interactive, step-by-step guides in the NeuroML documentation, which can be followed to learn the fundamental NeuroML concepts, as well as illustrate how NeuroML-compliant tools can be used to achieve specific tasks across the model development life cycle. In the following sections, we discuss the specific functionality available at each stage of model development.","md":"Figure 3. NeuroML compliant tools and their relation to the model life cycle. The inner circle shows the core NeuroML tools and libraries that are maintained by the NeuroML developers. These provide the functionality to read, modify, or create new NeuroML models, as well as to validate, analyze, visualize and simulate the models.\n\nThe outermost layer shows NeuroML-compliant tools that have been developed independently to allow various interactions with NeuroML models. These complement the core tools by facilitating model creation, validation, visualization, simulation, fitting/optimization, sharing, and reuse. Further information on each of the tools shown here can be found in Tables 3 and 4.\n\nTable 5 lists interactive, step-by-step guides in the NeuroML documentation, which can be followed to learn the fundamental NeuroML concepts, as well as illustrate how NeuroML-compliant tools can be used to achieve specific tasks across the model development life cycle. In the following sections, we discuss the specific functionality available at each stage of model development.","bBox":{"x":168.53,"y":105.83,"w":414.32,"h":332.98}},{"type":"heading","lvl":1,"value":"Creating NeuroML models","md":"# Creating NeuroML models","bBox":{"x":168.53,"y":105.83,"w":150,"h":380.98}},{"type":"text","value":"The structured declarative elements of NeuroMLv2, when combined with a procedural scripting language such as Python, provide a powerful and yet intuitive ‘building block’ approach to model construction. For this reason, Python is now the recommended language for interacting with NeuroML (Figure 4), although XML remains the primary serialization language for the format (i.e. for saving to disk and depositing in model repositories (Figure 5)). Python has emerged as a key programming language in science, including many areas of neuroscience (Muller et al., 2015). A Python-based NeuroML ecosystem ensures that users can take advantage of Python’s features, and also use packages from the wider Python ecosystem in their work (e.g. Numpy (Harris et al., 2020), Matplotlib Hunter, 2007). pyNeuroML, the Python interface for working with NeuroML, is built on top of the Python NeuroML API, libNeuroML (Vella et al., 2014; Sinha, 2023; Figure 4).\n\nAs illustrated in Figure 5, Python can be used to combine different NeuroML components into a model. NeuroML supports several pathways for the creation of new models. Modelers may use ionic conductances; Inputs: to drive cell and network activity, e.g., current or voltage clamp, spiking background inputs; Networks: of populations (containing any of the aforementioned cell types), and projections. The full list of standard NeuroML elements can be found in Tables 1 and 2.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"The structured declarative elements of NeuroMLv2, when combined with a procedural scripting language such as Python, provide a powerful and yet intuitive ‘building block’ approach to model construction. For this reason, Python is now the recommended language for interacting with NeuroML (Figure 4), although XML remains the primary serialization language for the format (i.e. for saving to disk and depositing in model repositories (Figure 5)). Python has emerged as a key programming language in science, including many areas of neuroscience (Muller et al., 2015). A Python-based NeuroML ecosystem ensures that users can take advantage of Python’s features, and also use packages from the wider Python ecosystem in their work (e.g. Numpy (Harris et al., 2020), Matplotlib Hunter, 2007). pyNeuroML, the Python interface for working with NeuroML, is built on top of the Python NeuroML API, libNeuroML (Vella et al., 2014; Sinha, 2023; Figure 4).\n\nAs illustrated in Figure 5, Python can be used to combine different NeuroML components into a model. NeuroML supports several pathways for the creation of new models. Modelers may use ionic conductances; Inputs: to drive cell and network activity, e.g., current or voltage clamp, spiking background inputs; Networks: of populations (containing any of the aforementioned cell types), and projections. The full list of standard NeuroML elements can be found in Tables 1 and 2.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":34.63,"w":415,"h":650.07}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.267},{"page":10,"text":"           Tools  and  resources                                                                                                   Neuroscience\n                                                                                pyNeuroML\n                                                  Python interface to NeuroML. Gives access to all jNeuroML functionality, adds\n                                                    helper methods for summarising, visualizing and analyzing NeuroML\n                                                              libNeuroML                        pyLEMS\n                                                   Python API for reading, writing                 Python implementation of\n                                                        and validating NeuroML                     LEMS parser & simulator\n                                                                             jNeuroML\n                                                 Can validate & simulate NeuroML models & convert to other formats, e.g:\n                                                                                  NEURON\n                                                             NeuroML2 LEMS                                   jLEMS\n                                                              Definitions                          Can load and simulate LEMS\n                                                      Define structurelbehavior of        models   not neuroscience\n                                                       NeuroML core types in LEMS                  specific\n                                   Figure 4. The core NeuroML software stack, and an example NeuroML model created using the Python NeuroML\n                                   tools. (a) The core NeuroML software stack consists of Java (blue) and Python (orange) based applications/libraries,\n                                   and the LEMS model ComponentType definitions (green), wrapped up in a single package, pyNeuroML. Each of\n                                   these modules can be used independently or the whole stack can be obtained by installing pyNeuroML with the\n                                   default Python package manager, Pip: pip install pyneuroml. (b) An example of how to create a simple NeuroML\n                                   model is shown, using the NeuroMLv2 Python API (libNeuroML) to describe a model consisting of a population\n                                   of 10 integrate and fire point neurons (IafTauCell) in a network. The IafTauCell, Network, Population, and\n                                   NeuroMLDocument model ComponentTypes are provided by the NeuroMLv2 standard. The underlying dynamics\n                                   of the model are hidden from the user, being specified in the LEMS ComponentType definitions of the elements\n                                   (see Methods). The simulator-\n                                                               independent NeuroML model description can be simulated on any of the supported\n                                   simulation engines. (c) Extensible Markup Language (XML) serialization of the NeuroMLv2 model description\n                                   shows the correspondence between the Python object model and the XML serialization.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                   10 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n| pyNeuroML     | Python interface to NeuroML. Gives access to all jNeuroML functionality, adds helper methods for summarising, visualizing and analyzing NeuroML |\n| ------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| libNeuroML    |                                                                                                                                                 |\n| pyLEMS        | Python implementation of LEMS parser & simulator                                                                                                |\n| jNeuroML      | Can validate & simulate NeuroML models & convert to other formats, e.g:                                                                         |\n| NEURON        |                                                                                                                                                 |\n| NeuroML2 LEMS |                                                                                                                                                 |\n| jLEMS         | Can load and simulate LEMS models not neuroscience specific                                                                                     |\n\nFigure 4. The core NeuroML software stack, and an example NeuroML model created using the Python NeuroML tools. (a) The core NeuroML software stack consists of Java (blue) and Python (orange) based applications/libraries, and the LEMS model ComponentType definitions (green), wrapped up in a single package, pyNeuroML. Each of these modules can be used independently or the whole stack can be obtained by installing pyNeuroML with the default Python package manager, Pip: pip install pyneuroml. (b) An example of how to create a simple NeuroML model is shown, using the NeuroMLv2 Python API (libNeuroML) to describe a model consisting of a population of 10 integrate and fire point neurons (IafTauCell) in a network. The IafTauCell, Network, Population, and NeuroMLDocument model ComponentTypes are provided by the NeuroMLv2 standard. The underlying dynamics of the model are hidden from the user, being specified in the LEMS ComponentType definitions of the elements (see Methods). The simulator-independent NeuroML model description can be simulated on any of the supported simulation engines. (c) Extensible Markup Language (XML) serialization of the NeuroMLv2 model description shows the correspondence between the Python object model and the XML serialization.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[{"name":"img_p9_1.png","height":1016,"width":1330,"x":194.5142365,"y":62.256440699999985,"original_width":1330,"original_height":1016,"ocr":[{"x":520,"y":20,"w":291,"h":77,"confidence":0.9968526619976709,"text":"pyNeuroML"},{"x":125,"y":96,"w":1082,"h":41,"confidence":0.6698644053741117,"text":"Python interface to NeuroML. Gives access to all jNeuroML functionality, adds"},{"x":189,"y":131,"w":952,"h":44,"confidence":0.6699222316564304,"text":"helper methods for summarising, visualizing and analyzing NeuroML"},{"x":246,"y":248,"w":281,"h":50,"confidence":0.7916305045923413,"text":"libNeuroML"},{"x":835,"y":236,"w":215,"h":80,"confidence":0.7619539581769075,"text":"pyLEMS"},{"x":175,"y":312,"w":426,"h":45,"confidence":0.889500476521476,"text":"Python API for reading, writing"},{"x":763,"y":311,"w":362,"h":45,"confidence":0.9068182931252476,"text":"Python implementation of"},{"x":219,"y":352,"w":338,"h":40,"confidence":0.736730823192064,"text":"and validating NeuroML"},{"x":767,"y":351,"w":354,"h":42,"confidence":0.999918234613761,"text":"LEMS parser & simulator"},{"x":537,"y":471,"w":243,"h":57,"confidence":0.9993479844899111,"text":"jNeuroML"},{"x":155,"y":538,"w":1014,"h":41,"confidence":0.6576876890697373,"text":"Can validate & simulate NeuroML models & convert to other formats, e.g:"},{"x":592,"y":576,"w":140,"h":36,"confidence":0.9999871518964423,"text":"NEURON"},{"x":198,"y":655,"w":400,"h":53,"confidence":0.9780836624891331,"text":"NeuroML2 LEMS"},{"x":843,"y":652,"w":174,"h":73,"confidence":0.9774387680777389,"text":"jLEMS"},{"x":265,"y":715,"w":266,"h":54,"confidence":0.834570839343889,"text":"Definitions"},{"x":729,"y":729,"w":410,"h":36,"confidence":0.7956191454142377,"text":"Can load and simulate LEMS"},{"x":204,"y":774,"w":392,"h":32,"confidence":0.7261944161729339,"text":"Define structurelbehavior of"},{"x":747,"y":767,"w":110,"h":36,"confidence":0.9999624289261246,"text":"models"},{"x":873,"y":767,"w":248,"h":36,"confidence":0.914616122583713,"text":"not neuroscience"},{"x":191,"y":809,"w":416,"h":40,"confidence":0.7816759711028352,"text":"NeuroML core types in LEMS"},{"x":874,"y":799,"w":119,"h":49,"confidence":0.9979216868995711,"text":"specific"}]}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"table","rows":[["pyNeuroML","Python interface to NeuroML. Gives access to all jNeuroML functionality, adds helper methods for summarising, visualizing and analyzing NeuroML"],["libNeuroML",""],["pyLEMS","Python implementation of LEMS parser & simulator"],["jNeuroML","Can validate & simulate NeuroML models & convert to other formats, e.g:"],["NEURON",""],["NeuroML2 LEMS",""],["jLEMS","Can load and simulate LEMS models not neuroscience specific"]],"md":"| pyNeuroML     | Python interface to NeuroML. Gives access to all jNeuroML functionality, adds helper methods for summarising, visualizing and analyzing NeuroML |\n| ------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| libNeuroML    |                                                                                                                                                 |\n| pyLEMS        | Python implementation of LEMS parser & simulator                                                                                                |\n| jNeuroML      | Can validate & simulate NeuroML models & convert to other formats, e.g:                                                                         |\n| NEURON        |                                                                                                                                                 |\n| NeuroML2 LEMS |                                                                                                                                                 |\n| jLEMS         | Can load and simulate LEMS models not neuroscience specific                                                                                     |","isPerfectTable":true,"csv":"\"pyNeuroML\",\"Python interface to NeuroML. Gives access to all jNeuroML functionality, adds helper methods for summarising, visualizing and analyzing NeuroML\"\n\"libNeuroML\",\"\"\n\"pyLEMS\",\"Python implementation of LEMS parser & simulator\"\n\"jNeuroML\",\"Can validate & simulate NeuroML models & convert to other formats, e.g:\"\n\"NEURON\",\"\"\n\"NeuroML2 LEMS\",\"\"\n\"jLEMS\",\"Can load and simulate LEMS models not neuroscience specific\"","bBox":{"x":37.01,"y":34.63,"w":539.55,"h":720.13}},{"type":"text","value":"Figure 4. The core NeuroML software stack, and an example NeuroML model created using the Python NeuroML tools. (a) The core NeuroML software stack consists of Java (blue) and Python (orange) based applications/libraries, and the LEMS model ComponentType definitions (green), wrapped up in a single package, pyNeuroML. Each of these modules can be used independently or the whole stack can be obtained by installing pyNeuroML with the default Python package manager, Pip: pip install pyneuroml. (b) An example of how to create a simple NeuroML model is shown, using the NeuroMLv2 Python API (libNeuroML) to describe a model consisting of a population of 10 integrate and fire point neurons (IafTauCell) in a network. The IafTauCell, Network, Population, and NeuroMLDocument model ComponentTypes are provided by the NeuroMLv2 standard. The underlying dynamics of the model are hidden from the user, being specified in the LEMS ComponentType definitions of the elements (see Methods). The simulator-independent NeuroML model description can be simulated on any of the supported simulation engines. (c) Extensible Markup Language (XML) serialization of the NeuroMLv2 model description shows the correspondence between the Python object model and the XML serialization.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Figure 4. The core NeuroML software stack, and an example NeuroML model created using the Python NeuroML tools. (a) The core NeuroML software stack consists of Java (blue) and Python (orange) based applications/libraries, and the LEMS model ComponentType definitions (green), wrapped up in a single package, pyNeuroML. Each of these modules can be used independently or the whole stack can be obtained by installing pyNeuroML with the default Python package manager, Pip: pip install pyneuroml. (b) An example of how to create a simple NeuroML model is shown, using the NeuroMLv2 Python API (libNeuroML) to describe a model consisting of a population of 10 integrate and fire point neurons (IafTauCell) in a network. The IafTauCell, Network, Population, and NeuroMLDocument model ComponentTypes are provided by the NeuroMLv2 standard. The underlying dynamics of the model are hidden from the user, being specified in the LEMS ComponentType definitions of the elements (see Methods). The simulator-independent NeuroML model description can be simulated on any of the supported simulation engines. (c) Extensible Markup Language (XML) serialization of the NeuroMLv2 model description shows the correspondence between the Python object model and the XML serialization.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":67,"w":405.96,"h":594.7}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.928},{"page":11,"text":"                                                                                                                                    Tools  and  resources                                                                                                                                                                                                                                                                                                                                                                              Neuroscience\nTable 3. NeuroML software core tools and libraries, with a description of their scope, the main programming language they use (or  Table 3. NeuroML software core tools and libraries, with a description of their scope, the main programming language they use (or\nother interaction means, e.g. Command Line Interface (CLI)), and links for more information.                                       other interaction means, e.g. Command Line Interface (CLI)), and links for more information.\n                                                                                                                                   Tool                Language/interface                                                                                                                                                                                                                                                                                                     Description                                              URL\nhttps://docs.neuroml.org/\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Recommended Python library for NeuroML; provides         Userdocs/Software/pyNeuroML.\npyNeuroML                                                                                                                          pyNeuroML           Python/CLI                                                                                                                                                                                                                                                                                                             pynml, primary command line tool for NeuroML             html\nhttps://docs.neuroml.org/\nserdocs/Software/libNeuroML.\nlibNeuroML                                                                                                                         libNeuroML          Python                                                                                                                                                                                                                                                                                                                 Python API for NeuroML                                   html\nhttps://docs.neuroml.org/\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              High level library for creating NeuroML network models   Userdocs/Software/NeuroMLlite.\nNeuroMLlite                                                                                                                        NeuroMLlite         Python                                                                                                                                                                                                                                                                                                                 (beta)                                                   html\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       https://docs.neuroml.org/\nPyLEMS                                                                                                                             PyLEMS              Python/CLI                                                                                                                                                                                                                                                                                                             Python API and simulator for LEMS                        Userdocs/Software/pyLEMS.html\nhttps://docs.neuroml.org/\njLEMS                                                                                                                              jLEMS               Java/CLI                                                                                                                                                                                                                                                                                                               Java API for LEMS and reference simulator                Userdocs/Software/jLEMS.html\nhttps://github.com/NeuroML/\norg.neuroml.model                                                                                                                  org.neuroml.model   Java                                                                                                                                                                                                                                                                                                                   Java API for NeuroML, DOI:10.5281/zenodo.5783290         org.neuroml.model/\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Java API for translating NeuroML into different formats such  https://github.com/NeuroML/\norg.neuroml.export                                                                                                                 org.neuroml.export  Java                                                                                                                                                                                                                                                                                                                   as NEURON, DOI:10.5281/zenodo.1346272                    org.neuroml.export\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Java API for importing formats into LEMS and NeuroML,    https://github.com/NeuroML/\norg.neuroml.import                                                                                                                 org.neuroml.import  Java                                                                                                                                                                                                                                                                                                                   DOI:10.5281/zenodo.5783295                               org.neuroml.import\nhttps://docs.neuroml.org/\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Wraps jLEMS and all export/import packages and provides  Userdocs/Software/jNeuroML.\njNeuroML                                                                                                                           jNeuroML            Java/CLI                                                                                                                                                                                                                                                                                                               the jnml tool, DOI:10.5281/zenodo.593108                 html\nhttps://docs.neuroml.org/\nserdocs/Software/NeuroML_\nNeuroML- C++                                                                                                                       NeuroML- C++        C++                                                                                                                                                                                                                                                                                                                    C++ API for NeuroML                                      API.html\nhttps://docs.neuroml.org/\nNeuroML Toolbox                                                                                                                    NeuroML Toolbox     MATLAB                                                                                                                                                                                                                                                                                                                 MATLAB NeuroML Toolbox                                   Userdocs/Software/MatLab.html\n                                                                                                                                                        elements included in the NeuroML standard, re-                                                         elements included in the NeuroML standard, re-                                                         elements included in the NeuroML standard, re-                                                         elements included in the NeuroML standard, re-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              use user-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              deﬁned NeuroML model elements from other\n                                                                                                                                                        models, or deﬁne completely new model elements using LEMS (Figure 5) (see section on extending         models, or deﬁne completely new model elements using LEMS (Figure 5) (see section on extending         models, or deﬁne completely new model elements using LEMS (Figure 5) (see section on extending         models, or deﬁne completely new model elements using LEMS (Figure 5) (see section on extending\n                                                                                                                                                        NeuroML below). It is common for models to use a combination of these strategies, e.g., Gurnani        NeuroML below). It is common for models to use a combination of these strategies, e.g., Gurnani        NeuroML below). It is common for models to use a combination of these strategies, e.g., Gurnani        NeuroML below). It is common for models to use a combination of these strategies, e.g., Gurnani\n                                                                                                                                                        and Silver, 2021; Kriener et al., 2022; Cayco‐                                                         and Silver, 2021; Kriener et al., 2022; Cayco‐                                                         and Silver, 2021; Kriener et al., 2022; Cayco‐                                                         and Silver, 2021; Kriener et al., 2022; Cayco‐\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Gajic et al., 2017, highlighting the ﬂexibility provided\n                                                                                                                                                        by the modular design of NeuroML. NeuroML APIs support all of these workﬂows. The Python tools         by the modular design of NeuroML. NeuroML APIs support all of these workﬂows. The Python tools         by the modular design of NeuroML. NeuroML APIs support all of these workﬂows. The Python tools         by the modular design of NeuroML. NeuroML APIs support all of these workﬂows. The Python tools\n                                                                                                                                                        also include many additional higher-  level utilities to speed up model construction, such as factory  also include many additional higher-  level utilities to speed up model construction, such as factory  also include many additional higher-  level utilities to speed up model construction, such as factory  also include many additional higher-  level utilities to speed up model construction, such as factory\n                                                                                                                                                        functions, type hints, and convenience functions for building complex multi-  compartmental neuron     functions, type hints, and convenience functions for building complex multi-  compartmental neuron     functions, type hints, and convenience functions for building complex multi-  compartmental neuron     functions, type hints, and convenience functions for building complex multi-  compartmental neuron\n                                                                                                                                                        models (Figure 6).                                                                                     models (Figure 6).                                                                                     models (Figure 6).                                                                                     models (Figure 6).\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             For the construction of complex 3D circuit models, or for users who are not experienced with\n                                                                                                                                                        Python, a range of NeuroML-                                                                            Python, a range of NeuroML-                                                                            Python, a range of NeuroML-                                                                            Python, a range of NeuroML-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              compliant online and standalone applications with graphical user inter -\n                                                                                                                                                        faces are available. These include NetPyNE’s interactive web interface (Dura‐                          faces are available. These include NetPyNE’s interactive web interface (Dura‐                          faces are available. These include NetPyNE’s interactive web interface (Dura‐                          faces are available. These include NetPyNE’s interactive web interface (Dura‐  Bernal et  al., 2019)\n                                                                                                                                                        (which is available on the latest version of OSB (https://v2.opensourcebrain.org)) and neuroConstruct  (which is available on the latest version of OSB (https://v2.opensourcebrain.org)) and neuroConstruct  (which is available on the latest version of OSB (https://v2.opensourcebrain.org)) and neuroConstruct  (which is available on the latest version of OSB (https://v2.opensourcebrain.org)) and neuroConstruct\n                                                                                                                                                        (Gleeson et al., 2007) which can export models directly into NeuroML and LEMS. These applications      (Gleeson et al., 2007) which can export models directly into NeuroML and LEMS. These applications      (Gleeson et al., 2007) which can export models directly into NeuroML and LEMS. These applications      (Gleeson et al., 2007) which can export models directly into NeuroML and LEMS. These applications\n                                                                                                                                                        can be used to build and simulate new NeuroML models without requiring programming. Thus, users        can be used to build and simulate new NeuroML models without requiring programming. Thus, users        can be used to build and simulate new NeuroML models without requiring programming. Thus, users        can be used to build and simulate new NeuroML models without requiring programming. Thus, users\n                                                                                                                                                        can take advantage of the individual features provided by these applications to generate NeuroML-      can take advantage of the individual features provided by these applications to generate NeuroML-      can take advantage of the individual features provided by these applications to generate NeuroML-      can take advantage of the individual features provided by these applications to generate NeuroML-\n                                                                                                                                                        compliant models and model elements.                                                                   compliant models and model elements.                                                                   compliant models and model elements.                                                                   compliant models and model elements.\n                                                                                                                                                        Validating NeuroML models                                                                              Validating NeuroML models                                                                              Validating NeuroML models                                                                              Validating NeuroML models\n                                                                                                                                                        Ensuring a model is ‘valid’ can have different meanings at different stages of the life cycle—from     Ensuring a model is ‘valid’ can have different meanings at different stages of the life cycle—from     Ensuring a model is ‘valid’ can have different meanings at different stages of the life cycle—from     Ensuring a model is ‘valid’ can have different meanings at different stages of the life cycle—from\n                                                                                                                                                        checking whether the source ﬁles are in the correct format, to ensuring the model reproduces a signif- checking whether the source ﬁles are in the correct format, to ensuring the model reproduces a signif- checking whether the source ﬁles are in the correct format, to ensuring the model reproduces a signif- checking whether the source ﬁles are in the correct format, to ensuring the model reproduces a signif-\n                                                                                                                                                        icant feature of its biological counterpart. NeuroML’s hierarchical, well-                             icant feature of its biological counterpart. NeuroML’s hierarchical, well-                             icant feature of its biological counterpart. NeuroML’s hierarchical, well-                             icant feature of its biological counterpart. NeuroML’s hierarchical, well-\ndeﬁned structure allows users\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             to check their model descriptions for correctness at multiple levels (Figure 7), in a manner similar to\n                                                                                                                                   Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                                                               11 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Table 3. NeuroML software core tools and libraries, with a description of their scope, the main programming language they use (or other interaction means, e.g. Command Line Interface (CLI)), and links for more information.\n\n| Tool               | Language/interface | Description                                                                                        | URL                                                                 |\n| ------------------ | ------------------ | -------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- |\n| pyNeuroML          | Python/CLI         | Recommended Python library for NeuroML; provides pynml, primary command line tool for NeuroML      | Userdocs/Software/pyNeuroML.html       |\n| libNeuroML         | Python             | Python API for NeuroML                                                                             | Userdocs/Software/libNeuroML.html      |\n| NeuroMLlite        | Python             | High level library for creating NeuroML network models (beta)                                      | Userdocs/Software/NeuroMLlite.html     |\n| PyLEMS             | Python/CLI         | Python API and simulator for LEMS                                                                  | Userdocs/Software/pyLEMS.html          |\n| jLEMS              | Java/CLI           | Java API for LEMS and reference simulator                                                          | Userdocs/Software/jLEMS.html           |\n| org.neuroml.model  | Java               | Java API for NeuroML, DOI:10.5281/zenodo.5783290                                                   | org.neuroml.model/ |\n| org.neuroml.export | Java               | Java API for translating NeuroML into different formats such as NEURON, DOI:10.5281/zenodo.1346272 | org.neuroml.export |\n| org.neuroml.import | Java               | Java API for importing formats into LEMS and NeuroML, DOI:10.5281/zenodo.5783295                   | org.neuroml.import |\n| jNeuroML           | Java/CLI           | Wraps jLEMS and all export/import packages and provides the jnml tool, DOI:10.5281/zenodo.593108   | Userdocs/Software/jNeuroML.html        |\n| NeuroML- C++       | C++                | C++ API for NeuroML                                                                                | Userdocs/Software/NeuroML\\_API.html    |\n| NeuroML Toolbox    | MATLAB             | MATLAB NeuroML Toolbox                                                                             | Userdocs/Software/MatLab.html          |\n\nelements included in the NeuroML standard, re-use user-defined NeuroML model elements from other models, or define completely new model elements using LEMS (Figure 5) (see section on extending NeuroML below). It is common for models to use a combination of these strategies, e.g., Gurnani and Silver, 2021; Kriener et al., 2022; Cayco‐Gajic et al., 2017, highlighting the flexibility provided by the modular design of NeuroML. NeuroML APIs support all of these workflows. The Python tools also include many additional higher-level utilities to speed up model construction, such as factory functions, type hints, and convenience functions for building complex multi-compartmental neuron models (Figure 6).\n\nFor the construction of complex 3D circuit models, or for users who are not experienced with Python, a range of NeuroML-compliant online and standalone applications with graphical user interfaces are available. These include NetPyNE’s interactive web interface (Dura‐Bernal et al., 2019) (which is available on the latest version of OSB (https://v2.opensourcebrain.org)) and neuroConstruct (Gleeson et al., 2007) which can export models directly into NeuroML and LEMS. These applications can be used to build and simulate new NeuroML models without requiring programming. Thus, users can take advantage of the individual features provided by these applications to generate NeuroML-compliant models and model elements.\n\n# Validating NeuroML models\n\nEnsuring a model is ‘valid’ can have different meanings at different stages of the life cycle—from checking whether the source files are in the correct format, to ensuring the model reproduces a significant feature of its biological counterpart. NeuroML’s hierarchical, well-defined structure allows users to check their model descriptions for correctness at multiple levels (Figure 7), in a manner similar to Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135.","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":36.5,"y":34.79,"w":130.16,"h":52.19}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Table 3. NeuroML software core tools and libraries, with a description of their scope, the main programming language they use (or other interaction means, e.g. Command Line Interface (CLI)), and links for more information.","md":"# Table 3. NeuroML software core tools and libraries, with a description of their scope, the main programming language they use (or other interaction means, e.g. Command Line Interface (CLI)), and links for more information.","bBox":{"x":36.5,"y":51.79,"w":530.6,"h":35.18}},{"type":"table","rows":[["Tool","Language/interface","Description","URL"],["pyNeuroML","Python/CLI","Recommended Python library for NeuroML; provides pynml, primary command line tool for NeuroML","Userdocs/Software/pyNeuroML.html"],["libNeuroML","Python","Python API for NeuroML","Userdocs/Software/libNeuroML.html"],["NeuroMLlite","Python","High level library for creating NeuroML network models (beta)","Userdocs/Software/NeuroMLlite.html"],["PyLEMS","Python/CLI","Python API and simulator for LEMS","Userdocs/Software/pyLEMS.html"],["jLEMS","Java/CLI","Java API for LEMS and reference simulator","Userdocs/Software/jLEMS.html"],["org.neuroml.model","Java","Java API for NeuroML, DOI:10.5281/zenodo.5783290","org.neuroml.model/"],["org.neuroml.export","Java","Java API for translating NeuroML into different formats such as NEURON, DOI:10.5281/zenodo.1346272","org.neuroml.export"],["org.neuroml.import","Java","Java API for importing formats into LEMS and NeuroML, DOI:10.5281/zenodo.5783295","org.neuroml.import"],["jNeuroML","Java/CLI","Wraps jLEMS and all export/import packages and provides the jnml tool, DOI:10.5281/zenodo.593108","Userdocs/Software/jNeuroML.html"],["NeuroML- C++","C++","C++ API for NeuroML","Userdocs/Software/NeuroML_API.html"],["NeuroML Toolbox","MATLAB","MATLAB NeuroML Toolbox","Userdocs/Software/MatLab.html"]],"md":"| Tool               | Language/interface | Description                                                                                        | URL                                 |\n| ------------------ | ------------------ | -------------------------------------------------------------------------------------------------- | ----------------------------------- |\n| pyNeuroML          | Python/CLI         | Recommended Python library for NeuroML; provides pynml, primary command line tool for NeuroML      | Userdocs/Software/pyNeuroML.html    |\n| libNeuroML         | Python             | Python API for NeuroML                                                                             | Userdocs/Software/libNeuroML.html   |\n| NeuroMLlite        | Python             | High level library for creating NeuroML network models (beta)                                      | Userdocs/Software/NeuroMLlite.html  |\n| PyLEMS             | Python/CLI         | Python API and simulator for LEMS                                                                  | Userdocs/Software/pyLEMS.html       |\n| jLEMS              | Java/CLI           | Java API for LEMS and reference simulator                                                          | Userdocs/Software/jLEMS.html        |\n| org.neuroml.model  | Java               | Java API for NeuroML, DOI:10.5281/zenodo.5783290                                                   | org.neuroml.model/                  |\n| org.neuroml.export | Java               | Java API for translating NeuroML into different formats such as NEURON, DOI:10.5281/zenodo.1346272 | org.neuroml.export                  |\n| org.neuroml.import | Java               | Java API for importing formats into LEMS and NeuroML, DOI:10.5281/zenodo.5783295                   | org.neuroml.import                  |\n| jNeuroML           | Java/CLI           | Wraps jLEMS and all export/import packages and provides the jnml tool, DOI:10.5281/zenodo.593108   | Userdocs/Software/jNeuroML.html     |\n| NeuroML- C++       | C++                | C++ API for NeuroML                                                                                | Userdocs/Software/NeuroML\\_API.html |\n| NeuroML Toolbox    | MATLAB             | MATLAB NeuroML Toolbox                                                                             | Userdocs/Software/MatLab.html       |","isPerfectTable":false,"csv":"\"Tool\",\"Language/interface\",\"Description\",\"URL\"\n\"pyNeuroML\",\"Python/CLI\",\"Recommended Python library for NeuroML; provides pynml, primary command line tool for NeuroML\",\"Userdocs/Software/pyNeuroML.html\"\n\"libNeuroML\",\"Python\",\"Python API for NeuroML\",\"Userdocs/Software/libNeuroML.html\"\n\"NeuroMLlite\",\"Python\",\"High level library for creating NeuroML network models (beta)\",\"Userdocs/Software/NeuroMLlite.html\"\n\"PyLEMS\",\"Python/CLI\",\"Python API and simulator for LEMS\",\"Userdocs/Software/pyLEMS.html\"\n\"jLEMS\",\"Java/CLI\",\"Java API for LEMS and reference simulator\",\"Userdocs/Software/jLEMS.html\"\n\"org.neuroml.model\",\"Java\",\"Java API for NeuroML, DOI:10.5281/zenodo.5783290\",\"org.neuroml.model/\"\n\"org.neuroml.export\",\"Java\",\"Java API for translating NeuroML into different formats such as NEURON, DOI:10.5281/zenodo.1346272\",\"org.neuroml.export\"\n\"org.neuroml.import\",\"Java\",\"Java API for importing formats into LEMS and NeuroML, DOI:10.5281/zenodo.5783295\",\"org.neuroml.import\"\n\"jNeuroML\",\"Java/CLI\",\"Wraps jLEMS and all export/import packages and provides the jnml tool, DOI:10.5281/zenodo.593108\",\"Userdocs/Software/jNeuroML.html\"\n\"NeuroML- C++\",\"C++\",\"C++ API for NeuroML\",\"Userdocs/Software/NeuroML_API.html\"\n\"NeuroML Toolbox\",\"MATLAB\",\"MATLAB NeuroML Toolbox\",\"Userdocs/Software/MatLab.html\"","bBox":{"x":36.5,"y":34.79,"w":537.42,"h":684.54}},{"type":"text","value":"elements included in the NeuroML standard, re-use user-defined NeuroML model elements from other models, or define completely new model elements using LEMS (Figure 5) (see section on extending NeuroML below). It is common for models to use a combination of these strategies, e.g., Gurnani and Silver, 2021; Kriener et al., 2022; Cayco‐Gajic et al., 2017, highlighting the flexibility provided by the modular design of NeuroML. NeuroML APIs support all of these workflows. The Python tools also include many additional higher-level utilities to speed up model construction, such as factory functions, type hints, and convenience functions for building complex multi-compartmental neuron models (Figure 6).\n\nFor the construction of complex 3D circuit models, or for users who are not experienced with Python, a range of NeuroML-compliant online and standalone applications with graphical user interfaces are available. These include NetPyNE’s interactive web interface (Dura‐Bernal et al., 2019) (which is available on the latest version of OSB (https://v2.opensourcebrain.org)) and neuroConstruct (Gleeson et al., 2007) which can export models directly into NeuroML and LEMS. These applications can be used to build and simulate new NeuroML models without requiring programming. Thus, users can take advantage of the individual features provided by these applications to generate NeuroML-compliant models and model elements.","md":"elements included in the NeuroML standard, re-use user-defined NeuroML model elements from other models, or define completely new model elements using LEMS (Figure 5) (see section on extending NeuroML below). It is common for models to use a combination of these strategies, e.g., Gurnani and Silver, 2021; Kriener et al., 2022; Cayco‐Gajic et al., 2017, highlighting the flexibility provided by the modular design of NeuroML. NeuroML APIs support all of these workflows. The Python tools also include many additional higher-level utilities to speed up model construction, such as factory functions, type hints, and convenience functions for building complex multi-compartmental neuron models (Figure 6).\n\nFor the construction of complex 3D circuit models, or for users who are not experienced with Python, a range of NeuroML-compliant online and standalone applications with graphical user interfaces are available. These include NetPyNE’s interactive web interface (Dura‐Bernal et al., 2019) (which is available on the latest version of OSB (https://v2.opensourcebrain.org)) and neuroConstruct (Gleeson et al., 2007) which can export models directly into NeuroML and LEMS. These applications can be used to build and simulate new NeuroML models without requiring programming. Thus, users can take advantage of the individual features provided by these applications to generate NeuroML-compliant models and model elements.","bBox":{"x":36.5,"y":78.98,"w":542.02,"h":560.25}},{"type":"heading","lvl":1,"value":"Validating NeuroML models","md":"# Validating NeuroML models","bBox":{"x":168.53,"y":657.25,"w":158,"h":12}},{"type":"text","value":"Ensuring a model is ‘valid’ can have different meanings at different stages of the life cycle—from checking whether the source files are in the correct format, to ensuring the model reproduces a significant feature of its biological counterpart. NeuroML’s hierarchical, well-defined structure allows users to check their model descriptions for correctness at multiple levels (Figure 7), in a manner similar to Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135.","md":"Ensuring a model is ‘valid’ can have different meanings at different stages of the life cycle—from checking whether the source files are in the correct format, to ensuring the model reproduces a significant feature of its biological counterpart. NeuroML’s hierarchical, well-defined structure allows users to check their model descriptions for correctness at multiple levels (Figure 7), in a manner similar to Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135.","bBox":{"x":168.53,"y":78.98,"w":391,"h":628.08}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://v2.opensourcebrain.org/","text":""},{"url":"https://docs.neuroml.org/Userdocs/Software/pyNeuroML.html","text":"https://docs.neuroml.org/ Userdocs/Software/pyNeuroML."},{"url":"https://docs.neuroml.org/Userdocs/Software/pyNeuroML.html","text":"Userdocs/Software/pyNeuroML. html"},{"url":"https://docs.neuroml.org/Userdocs/Software/pyNeuroML.html","text":"html"},{"url":"https://docs.neuroml.org/Userdocs/Software/libNeuroML.html","text":"https://docs.neuroml.org/ Userdocs/Software/libNeuroML."},{"url":"https://docs.neuroml.org/Userdocs/Software/libNeuroML.html","text":"Userdocs/Software/libNeuroML. html"},{"url":"https://docs.neuroml.org/Userdocs/Software/libNeuroML.html","text":"html"},{"url":"https://docs.neuroml.org/Userdocs/Software/NeuroMLlite.html","text":"https://docs.neuroml.org/ Userdocs/Software/NeuroMLlite."},{"url":"https://docs.neuroml.org/Userdocs/Software/NeuroMLlite.html","text":"Userdocs/Software/NeuroMLlite. html"},{"url":"https://docs.neuroml.org/Userdocs/Software/NeuroMLlite.html","text":"html"},{"url":"https://docs.neuroml.org/Userdocs/Software/pyLEMS.html","text":"https://docs.neuroml.org/ Userdocs/Software/pyLEMS.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/pyLEMS.html","text":"Userdocs/Software/pyLEMS.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/jLEMS.html","text":"https://docs.neuroml.org/ Userdocs/Software/jLEMS.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/jLEMS.html","text":"Userdocs/Software/jLEMS.html"},{"url":"https://doi.org/10.5281/zenodo.5783290","text":""},{"url":"https://github.com/NeuroML/org.neuroml.model/","text":"https://github.com/NeuroML/ org.neuroml.model/"},{"url":"https://github.com/NeuroML/org.neuroml.model/","text":"org.neuroml.model/"},{"url":"https://doi.org/10.5281/zenodo.1346272","text":""},{"url":"https://github.com/NeuroML/org.neuroml.export","text":"https://github.com/NeuroML/ org.neuroml.export"},{"url":"https://github.com/NeuroML/org.neuroml.export","text":"org.neuroml.export"},{"url":"https://doi.org/10.5281/zenodo.5783295","text":""},{"url":"https://github.com/NeuroML/org.neuroml.import","text":"https://github.com/NeuroML/ org.neuroml.import"},{"url":"https://github.com/NeuroML/org.neuroml.import","text":"org.neuroml.import"},{"url":"https://doi.org/10.5281/zenodo.593108","text":""},{"url":"https://docs.neuroml.org/Userdocs/Software/jNeuroML.html","text":"https://docs.neuroml.org/ Userdocs/Software/jNeuroML."},{"url":"https://docs.neuroml.org/Userdocs/Software/jNeuroML.html","text":"Userdocs/Software/jNeuroML. html"},{"url":"https://docs.neuroml.org/Userdocs/Software/jNeuroML.html","text":"html"},{"url":"https://docs.neuroml.org/Userdocs/Software/NeuroML_API.html","text":"https://docs.neuroml.org/ Userdocs/Software/NeuroML_"},{"url":"https://docs.neuroml.org/Userdocs/Software/NeuroML_API.html","text":"Userdocs/Software/NeuroML_ API.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/NeuroML_API.html","text":"API.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/MatLab.html","text":"https://docs.neuroml.org/ Userdocs/Software/MatLab.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/MatLab.html","text":"Userdocs/Software/MatLab.html"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.446},{"page":12,"text":"                                                                                                                                                                                                                                                                 Tools  and  resources                                                                                                                                                                                                            Neuroscience\nTable 4. Tools in the wi main programming language they use (or other interaction means, e.g. through a web browser, Graphical  Table 4. Tools in the wi main programming language they use (or other interaction means, e.g. through a web browser, Graphical  Table 4. Tools in the wi main programming language they use (or other interaction means, e.g. through a web browser, Graphical\nUser Interface (GUI) or Command Line Interface (CLI)), and links for more information.                                          User Interface (GUI) or Command Line Interface (CLI)), and links for more information.                                          User Interface (GUI) or Command Line Interface (CLI)), and links for more information.\nTool                                                                                                                            Tool                                                                                                                            Tool                             Language/interface  Description                                                    Description                           URL                                 URL                                 URL\nSimulation engines                                                                                                              Simulation engines                                                                                                              Simulation engines\n                                                                                                                                                                                                                                                                                                                     Empirically-based simulations of                               Empirically-based simulations of\n                                                                                                                                                                                                                                                                                                                                                                                                                          https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/\nNEURON                                                                                                                          NEURON                                                                                                                          NEURON       Python/Hoc/CLI/GUI  Python/Hoc/CLI/GUI  neurons and networks of neurons                                neurons and networks of neurons       Software/Tools/NEURON.html          Software/Tools/NEURON.html          Software/Tools/NEURON.html\n                                                                                                                                                                                                                                                                                                                     Package to facilitate the                                      Package to facilitate the\n                                                                                                                                                                                                                                                                                                                     development, parallel simulation,                              development, parallel simulation,\n                                                                                                                                                                                                                                                                                                                     analysis, and optimization of                                  analysis, and optimization of\n                                                                                                                                                                                                                                                                                                                     biological neuronal networks using                             biological neuronal networks using\n                                                                                                                                                                                                                                                                                                                     the NEURON simulator. Also has a                               the NEURON simulator. Also has a      https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/\nNetPyNE                                                                                                                         NetPyNE                                                                                                                         NetPyNE      Python/web          Python/web          graphical web interface, NetPyNE-                              graphical web interface, NetPyNE-\n                                                                                                                                                                                                                                                                                                                                                                                    UI                                    Software/Tools/NetPyNE.html         Software/Tools/NetPyNE.html         Software/Tools/NetPyNE.html\n                                                                                                                                                                                                                                                                                                                                                                                                                          https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/\n                                                                                                                                                                                                                                                                EDEN                             NeuroML                                                                            NeuroML-\n                                                                                                                                                                                                                                                                                                                                                                                    based neural simulator                Software/Tools/EDEN.html            Software/Tools/EDEN.html            Software/Tools/EDEN.html\n                                                                                                                                                                                                                                                                                                                     The Multiscale Object-                                         The Multiscale Object-\n                                                                                                                                                                                                                                                                                                                                                                                    Oriented\n                                                                                                                                                                                                                                                                                                                     Simulation Environment is the                                  Simulation Environment is the\n                                                                                                                                                                                                                                                                                                                     base and numerical core for large,                             base and numerical core for large,\n                                                                                                                                                                                                                                                                                                                     detailed multi-                                                detailed multi-\n                                                                                                                                                                                                                                                                                                                                                                                    scale simulations that\n                                                                                                                                                                                                                                                                                                                     span computational neuroscience                                span computational neuroscience\n                                                                                                                                                                                                                                                                                                                     and systems biology. Based on a                                and systems biology. Based on a\n                                                                                                                                                                                                                                                                                                                     reimplementation of the GENESIS                                reimplementation of the GENESIS       https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/\nMOOSE                                                                                                                           MOOSE                                                                                                                           MOOSE        Python              Python              2 core.                                                        2 core.                               Software/Tools/MOOSE.html           Software/Tools/MOOSE.html           Software/Tools/MOOSE.html\n                                                                                                                                                                                                                                                                                                                     A simulator-                                                   A simulator-\n                                                                                                                                                                                                                                                                                                                                                                                    independent language\n                                                                                                                                                                                                                                                                                                                     for building neuronal network                                  for building neuronal network         https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/\nPyNN                                                                                                                            PyNN                                                                                                                            PyNN         Python              Python              models                                                         models                                Software/Tools/PyNN.html            Software/Tools/PyNN.html            Software/Tools/PyNN.html\n                                                                                                                                                                                                                                                                                                                     Simulator for spiking neural network                           Simulator for spiking neural network\n                                                                                                                                                                                                                                                                                                                     models focusing on dynamics, size,                             models focusing on dynamics, size,    https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/\nNEST                                                                                                                            NEST                                                                                                                            NEST         Python/SLI          Python/SLI          and structure of neural systems                                and structure of neural systems       Software/Tools/NEST.html            Software/Tools/NEST.html            Software/Tools/NEST.html\n                                                                                                                                                                                                                                                                                                                     Easy to learn and use simulator for                            Easy to learn and use simulator for   https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/\nBrian2                                                                                                                          Brian2                                                                                                                          Brian2       Python              Python              spiking neural networks                                        spiking neural networks               Software/Tools/Brian.html           Software/Tools/Brian.html           Software/Tools/Brian.html\n                                                                                                                                                                                                                                                                                                                     A multi-                                                       A multi-\n                                                                                                                                                                                                                                                                                                                                                                                    compartment neuron                    https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/\nArbor                                                                                                                           Arbor                                                                                                                           Arbor        Python              Python              simulation library                                             simulation library                    Software/Tools/Arbor.html           Software/Tools/Arbor.html           Software/Tools/Arbor.html\n                                                                                                                                                                                                                                                                                                                     Language and IDE for writing and                               Language and IDE for writing and      https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/  https://docs.neuroml.org/Userdocs/\nN2A                                                                                                                             N2A                                                                                                                             N2A          Java/GUI            Java/GUI            simulating models                                              simulating models                     Software/Tools/N2A.html             Software/Tools/N2A.html             Software/Tools/N2A.html\nDatabases                                                                                                                       Databases                                                                                                                       Databases\n                                                                                                                                                                                                                                                                                                                     Resource for sharing and                                       Resource for sharing and\n                                                                                                                                                                                                                                                                                                                     collaboratively developing                                     collaboratively developing\n                                                                                                                                                                                                                                                                                                                     computational models of neural                                 computational models of neural\nOSB                                                                                                                             OSB                                                                                                                             OSB          Web                 Web                 systems                                                        systems                               https://www.opensourcebrain.org/    https://www.opensourcebrain.org/    https://www.opensourcebrain.org/\n                                                                                                                                                                                                                                                                                                                     NeuroML database of cell and                                   NeuroML database of cell and\nNeuroML- DB                                                                                                                     NeuroML- DB                                                                                                                     NeuroML- DB  Web                 Web                 channel models                                                 channel models                        https://neuroml-db.org/             https://neuroml-db.org/             https://neuroml-db.org/\nOther tools                                                                                                                     Other tools                                                                                                                     Other tools\n                                                                                                                                                                                                                                                                                                                                                                                                                          https://github.com/                 https://github.com/                 https://github.com/\n                                                                                                                                                                                                                                                                                                                     Open Source Brain Model Validation  OpenSourceBrain/osb-model- Open Source Brain Model Validation  OpenSourceBrain/osb-model-\nOMV                                                                                                                             OMV                                                                                                                             OMV          Python              Python              framework                                                      framework                             validation                          validation                          validation\nSciUnit                                                                                                                         SciUnit                                                                                                                         SciUnit      Python              Python              Data driven unit testing framework                             Data driven unit testing framework    https://github.com/scidash/sciunit  https://github.com/scidash/sciunit  https://github.com/scidash/sciunit\n                                                                                                                                                                                                                                                                                                                     Blue Brain Python Optimization                                 Blue Brain Python Optimization\nBluePyOpt                                                                                                                       BluePyOpt                                                                                                                       BluePyOpt    Python              Python              Library                                                        Library                               https://bluepyopt.readthedocs.io/   https://bluepyopt.readthedocs.io/   https://bluepyopt.readthedocs.io/\n                                                                                                                                                                                                                                                                                                                     Package for fitting/optimization                               Package for fitting/optimization      https://github.com/NeuralEnsemble/  https://github.com/NeuralEnsemble/  https://github.com/NeuralEnsemble/\nNeuroTune                                                                                                                       NeuroTune                                                                                                                       NeuroTune    Python              Python              of NeuroML models                                              of NeuroML models                     neurotune                           neurotune                           neurotune\n                                                                                                                                                                                                                                                                                                                                                                                                                          https://github.com/NeuralEnsemble/  https://github.com/NeuralEnsemble/  https://github.com/NeuralEnsemble/\nPyElectro                                                                                                                       PyElectro                                                                                                                       PyElectro    Python              Python              Electrophysiology analysis package                             Electrophysiology analysis package    pyelectro                           pyelectro                           pyelectro\n                                                                                                                                                                                                                                                                Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                             12 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n| Tool    | Language/interface | Description                                                                                                                                                                                                                                   | URL                                                             |\n| ------- | ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| NEURON  | Python/Hoc/CLI/GUI | Empirically-based simulations of neurons and networks of neurons                                                                                                                                                                              | <https://docs.neuroml.org/Userdocs/Software/Tools/NEURON.html>  |\n| NetPyNE | Python/web         | Package to facilitate the development, parallel simulation, analysis, and optimization of biological neuronal networks using the NEURON simulator. Also has a graphical web interface, NetPyNE-UI                                             | <https://docs.neuroml.org/Userdocs/Software/Tools/NetPyNE.html> |\n| EDEN    | NeuroML            | NeuroML-based neural simulator                                                                                                                                                                                                                | <https://docs.neuroml.org/Userdocs/Software/Tools/EDEN.html>    |\n| MOOSE   | Python             | The Multiscale Object-Oriented Simulation Environment is the base and numerical core for large, detailed multi-scale simulations that span computational neuroscience and systems biology. Based on a reimplementation of the GENESIS 2 core. | <https://docs.neuroml.org/Userdocs/Software/Tools/MOOSE.html>   |\n| PyNN    | Python             | A simulator-independent language for building neuronal network models                                                                                                                                                                         | <https://docs.neuroml.org/Userdocs/Software/Tools/PyNN.html>    |\n| NEST    | Python/SLI         | Simulator for spiking neural network models focusing on dynamics, size, and structure of neural systems                                                                                                                                       | <https://docs.neuroml.org/Userdocs/Software/Tools/NEST.html>    |\n| Brian2  | Python             | Easy to learn and use simulator for spiking neural networks                                                                                                                                                                                   | <https://docs.neuroml.org/Userdocs/Software/Tools/Brian.html>   |\n| Arbor   | Python             | A multi-compartment neuron simulation library                                                                                                                                                                                                 | <https://docs.neuroml.org/Userdocs/Software/Tools/Arbor.html>   |\n| N2A     | Java/GUI           | Language and IDE for writing and simulating models                                                                                                                                                                                            | <https://docs.neuroml.org/Userdocs/Software/Tools/N2A.html>     |\n\n# Databases\n\n| Tool       | Language/interface | Description                                                                                | URL                                |\n| ---------- | ------------------ | ------------------------------------------------------------------------------------------ | ---------------------------------- |\n| OSB        | Web                | Resource for sharing and collaboratively developing computational models of neural systems | <https://www.opensourcebrain.org/> |\n| NeuroML-DB | Web                | NeuroML database of cell and channel models                                                | <https://neuroml-db.org/>          |\n\n# Other tools\n\n| Tool      | Language/interface | Description                                        | URL                                                       |\n| --------- | ------------------ | -------------------------------------------------- | --------------------------------------------------------- |\n| OMV       | Python             | Open Source Brain Model Validation framework       | <https://github.com/OpenSourceBrain/osb-model-validation> |\n| SciUnit   | Python             | Data driven unit testing framework                 | <https://github.com/scidash/sciunit>                      |\n| BluePyOpt | Python             | Blue Brain Python Optimization Library             | <https://bluepyopt.readthedocs.io/>                       |\n| NeuroTune | Python             | Package for fitting/optimization of NeuroML models | <https://github.com/NeuralEnsemble/neurotune>             |\n| PyElectro | Python             | Electrophysiology analysis package                 | <https://github.com/NeuralEnsemble/pyelectro>             |\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":36.5,"y":34.79,"w":130.18,"h":52.19}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"table","rows":[["Tool","Language/interface","Description","URL"],["NEURON","Python/Hoc/CLI/GUI","Empirically-based simulations of neurons and networks of neurons",""],["NetPyNE","Python/web","Package to facilitate the development, parallel simulation, analysis, and optimization of biological neuronal networks using the NEURON simulator. Also has a graphical web interface, NetPyNE-UI",""],["EDEN","NeuroML","NeuroML-based neural simulator",""],["MOOSE","Python","The Multiscale Object-Oriented Simulation Environment is the base and numerical core for large, detailed multi-scale simulations that span computational neuroscience and systems biology. Based on a reimplementation of the GENESIS 2 core.",""],["PyNN","Python","A simulator-independent language for building neuronal network models",""],["NEST","Python/SLI","Simulator for spiking neural network models focusing on dynamics, size, and structure of neural systems",""],["Brian2","Python","Easy to learn and use simulator for spiking neural networks",""],["Arbor","Python","A multi-compartment neuron simulation library",""],["N2A","Java/GUI","Language and IDE for writing and simulating models",""]],"md":"| Tool    | Language/interface | Description                                                                                                                                                                                                                                   | URL                                                             |\n| ------- | ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| NEURON  | Python/Hoc/CLI/GUI | Empirically-based simulations of neurons and networks of neurons                                                                                                                                                                              | <https://docs.neuroml.org/Userdocs/Software/Tools/NEURON.html>  |\n| NetPyNE | Python/web         | Package to facilitate the development, parallel simulation, analysis, and optimization of biological neuronal networks using the NEURON simulator. Also has a graphical web interface, NetPyNE-UI                                             | <https://docs.neuroml.org/Userdocs/Software/Tools/NetPyNE.html> |\n| EDEN    | NeuroML            | NeuroML-based neural simulator                                                                                                                                                                                                                | <https://docs.neuroml.org/Userdocs/Software/Tools/EDEN.html>    |\n| MOOSE   | Python             | The Multiscale Object-Oriented Simulation Environment is the base and numerical core for large, detailed multi-scale simulations that span computational neuroscience and systems biology. Based on a reimplementation of the GENESIS 2 core. | <https://docs.neuroml.org/Userdocs/Software/Tools/MOOSE.html>   |\n| PyNN    | Python             | A simulator-independent language for building neuronal network models                                                                                                                                                                         | <https://docs.neuroml.org/Userdocs/Software/Tools/PyNN.html>    |\n| NEST    | Python/SLI         | Simulator for spiking neural network models focusing on dynamics, size, and structure of neural systems                                                                                                                                       | <https://docs.neuroml.org/Userdocs/Software/Tools/NEST.html>    |\n| Brian2  | Python             | Easy to learn and use simulator for spiking neural networks                                                                                                                                                                                   | <https://docs.neuroml.org/Userdocs/Software/Tools/Brian.html>   |\n| Arbor   | Python             | A multi-compartment neuron simulation library                                                                                                                                                                                                 | <https://docs.neuroml.org/Userdocs/Software/Tools/Arbor.html>   |\n| N2A     | Java/GUI           | Language and IDE for writing and simulating models                                                                                                                                                                                            | <https://docs.neuroml.org/Userdocs/Software/Tools/N2A.html>     |","isPerfectTable":true,"csv":"\"Tool\",\"Language/interface\",\"Description\",\"URL\"\n\"NEURON\",\"Python/Hoc/CLI/GUI\",\"Empirically-based simulations of neurons and networks of neurons\",\"\"\n\"NetPyNE\",\"Python/web\",\"Package to facilitate the development, parallel simulation, analysis, and optimization of biological neuronal networks using the NEURON simulator. Also has a graphical web interface, NetPyNE-UI\",\"\"\n\"EDEN\",\"NeuroML\",\"NeuroML-based neural simulator\",\"\"\n\"MOOSE\",\"Python\",\"The Multiscale Object-Oriented Simulation Environment is the base and numerical core for large, detailed multi-scale simulations that span computational neuroscience and systems biology. Based on a reimplementation of the GENESIS 2 core.\",\"\"\n\"PyNN\",\"Python\",\"A simulator-independent language for building neuronal network models\",\"\"\n\"NEST\",\"Python/SLI\",\"Simulator for spiking neural network models focusing on dynamics, size, and structure of neural systems\",\"\"\n\"Brian2\",\"Python\",\"Easy to learn and use simulator for spiking neural networks\",\"\"\n\"Arbor\",\"Python\",\"A multi-compartment neuron simulation library\",\"\"\n\"N2A\",\"Java/GUI\",\"Language and IDE for writing and simulating models\",\"\"","bBox":{"x":36.5,"y":34.63,"w":538.83,"h":720.13}},{"type":"heading","lvl":1,"value":"Databases","md":"# Databases","bBox":{"x":36.52,"y":444.5,"w":37,"h":8}},{"type":"table","rows":[["Tool","Language/interface","Description","URL"],["OSB","Web","Resource for sharing and collaboratively developing computational models of neural systems",""],["NeuroML-DB","Web","NeuroML database of cell and channel models",""]],"md":"| Tool       | Language/interface | Description                                                                                | URL                                |\n| ---------- | ------------------ | ------------------------------------------------------------------------------------------ | ---------------------------------- |\n| OSB        | Web                | Resource for sharing and collaboratively developing computational models of neural systems | <https://www.opensourcebrain.org/> |\n| NeuroML-DB | Web                | NeuroML database of cell and channel models                                                | <https://neuroml-db.org/>          |","isPerfectTable":true,"csv":"\"Tool\",\"Language/interface\",\"Description\",\"URL\"\n\"OSB\",\"Web\",\"Resource for sharing and collaboratively developing computational models of neural systems\",\"\"\n\"NeuroML-DB\",\"Web\",\"NeuroML database of cell and channel models\",\"\"","bBox":{"x":36.5,"y":34.63,"w":538.83,"h":720.13}},{"type":"heading","lvl":1,"value":"Other tools","md":"# Other tools","bBox":{"x":36.5,"y":78.98,"w":40.02,"h":457.67}},{"type":"table","rows":[["Tool","Language/interface","Description","URL"],["OMV","Python","Open Source Brain Model Validation framework",""],["SciUnit","Python","Data driven unit testing framework",""],["BluePyOpt","Python","Blue Brain Python Optimization Library",""],["NeuroTune","Python","Package for fitting/optimization of NeuroML models",""],["PyElectro","Python","Electrophysiology analysis package",""]],"md":"| Tool      | Language/interface | Description                                        | URL                                                       |\n| --------- | ------------------ | -------------------------------------------------- | --------------------------------------------------------- |\n| OMV       | Python             | Open Source Brain Model Validation framework       | <https://github.com/OpenSourceBrain/osb-model-validation> |\n| SciUnit   | Python             | Data driven unit testing framework                 | <https://github.com/scidash/sciunit>                      |\n| BluePyOpt | Python             | Blue Brain Python Optimization Library             | <https://bluepyopt.readthedocs.io/>                       |\n| NeuroTune | Python             | Package for fitting/optimization of NeuroML models | <https://github.com/NeuralEnsemble/neurotune>             |\n| PyElectro | Python             | Electrophysiology analysis package                 | <https://github.com/NeuralEnsemble/pyelectro>             |","isPerfectTable":true,"csv":"\"Tool\",\"Language/interface\",\"Description\",\"URL\"\n\"OMV\",\"Python\",\"Open Source Brain Model Validation framework\",\"\"\n\"SciUnit\",\"Python\",\"Data driven unit testing framework\",\"\"\n\"BluePyOpt\",\"Python\",\"Blue Brain Python Optimization Library\",\"\"\n\"NeuroTune\",\"Python\",\"Package for fitting/optimization of NeuroML models\",\"\"\n\"PyElectro\",\"Python\",\"Electrophysiology analysis package\",\"\"","bBox":{"x":36.5,"y":34.63,"w":538.83,"h":720.13}},{"type":"text","value":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":0,"y":0,"w":612,"h":792}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/NEURON.html","text":"https://docs.neuroml.org/Userdocs/ Software/Tools/NEURON.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/NEURON.html","text":"Software/Tools/NEURON.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/NetPyNE.html","text":"https://docs.neuroml.org/Userdocs/ Software/Tools/NetPyNE.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/NetPyNE.html","text":"Software/Tools/NetPyNE.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/EDEN.html","text":"https://docs.neuroml.org/Userdocs/ Software/Tools/EDEN.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/EDEN.html","text":"Software/Tools/EDEN.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/MOOSE.html","text":"https://docs.neuroml.org/Userdocs/ Software/Tools/MOOSE.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/MOOSE.html","text":"Software/Tools/MOOSE.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/PyNN.html","text":"https://docs.neuroml.org/Userdocs/ Software/Tools/PyNN.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/PyNN.html","text":"Software/Tools/PyNN.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/NEST.html","text":"https://docs.neuroml.org/Userdocs/ Software/Tools/NEST.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/NEST.html","text":"Software/Tools/NEST.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/Brian.html","text":"https://docs.neuroml.org/Userdocs/ Software/Tools/Brian.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/Brian.html","text":"Software/Tools/Brian.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/Arbor.html","text":"https://docs.neuroml.org/Userdocs/ Software/Tools/Arbor.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/Arbor.html","text":"Software/Tools/Arbor.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/N2A.html","text":"https://docs.neuroml.org/Userdocs/ Software/Tools/N2A.html"},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/N2A.html","text":"Software/Tools/N2A.html"},{"url":"https://www.opensourcebrain.org/","text":"https://www.opensourcebrain.org/"},{"url":"https://neuroml-db.org/","text":"https://neuroml-db.org/"},{"url":"https://github.com/OpenSourceBrain/osb-model-validation","text":"https://github.com/ OpenSourceBrain/osb-model-"},{"url":"https://github.com/OpenSourceBrain/osb-model-validation","text":"OpenSourceBrain/osb-model- validation"},{"url":"https://github.com/OpenSourceBrain/osb-model-validation","text":"validation"},{"url":"https://github.com/scidash/sciunit","text":"https://github.com/scidash/sciunit"},{"url":"https://bluepyopt.readthedocs.io/","text":"https://bluepyopt.readthedocs.io/"},{"url":"https://github.com/NeuralEnsemble/neurotune","text":"https://github.com/NeuralEnsemble/ neurotune"},{"url":"https://github.com/NeuralEnsemble/neurotune","text":"neurotune"},{"url":"https://github.com/NeuralEnsemble/pyelectro","text":"https://github.com/NeuralEnsemble/ pyelectro"},{"url":"https://github.com/NeuralEnsemble/pyelectro","text":"pyelectro"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.274},{"page":13,"text":"           Tools  and  resources                                                                                                                                                                                                                                                                                            Neuroscience\n                                   Table 5. Step-                                                                                            Table 5. Step-                                                                                            Table 5. Step-\n                                                                                                                                                                                                                                                        by-\n                                                                                                                                                                                                                                                                step guides for using NeuroML illustrating the various stages of the model\n                                   development life cycle.                                                                                   development life cycle.                                                                                   development life cycle.\n                                   These include Introductory guides aimed at teaching the fundamental NeuroML concepts,                     These include Introductory guides aimed at teaching the fundamental NeuroML concepts,                     These include Introductory guides aimed at teaching the fundamental NeuroML concepts,\n                                   Advanced guides illustrating speciﬁc modeling workﬂows, and Walkthrough guides discussing the             Advanced guides illustrating speciﬁc modeling workﬂows, and Walkthrough guides discussing the             Advanced guides illustrating speciﬁc modeling workﬂows, and Walkthrough guides discussing the\n                                   steps required for converting models to NeuroML. An updated list is available at http://neuroml.org/      steps required for converting models to NeuroML. An updated list is available at http://neuroml.org/      steps required for converting models to NeuroML. An updated list is available at http://neuroml.org/\n                                   gettingstarted.                                                                                           gettingstarted.                                                                                           gettingstarted.\n                                                                                                                                                                                                                                                       Link     Description                                            Model life cycle stages\n                                   Introductory guides                                                                                       Introductory guides                                                                                       Introductory guides\n                                                                                                                                                                                                                                                                Create and simulate a simple regular spiking Izhikevich neuron in\n                                   Guide 1                                                                                                   Guide 1                                                                                                   Guide 1  NeuroML                                                Create, Validate, Simulate\n                                                                                                                                                                                                                                                                Create a network of two synaptically connected populations of\n                                   Guide 2                                                                                                   Guide 2                                                                                                   Guide 2  Izhikevich neurons                                     Create, Validate, Visualize, Simulate\n                                   Guide 3                                                                                                   Guide 3                                                                                                   Guide 3  Build and simulate a single compartment Hodgkin-\n                                                                                                                                                                                                                                                                Huxley neuron                                          Create, Validate, Visualize, Simulate\n                                   Guide 4                                                                                                   Guide 4                                                                                                   Guide 4  Create and simulate a multi compartment hippocampal OLM neuron Create, Validate, Visualize, Simulate\n                                   Advanced guides                                                                                           Advanced guides                                                                                           Advanced guides\n                                   Guide 5                                                                                                   Guide 5                                                                                                   Guide 5  Create novel NeuroML models from components on NeuroML-\n                                                                                                                                                                                                                                                                DB                                                     Reuse, Create, Validate, Simulate\n                                   Guide 6                                                                                                   Guide 6                                                                                                   Guide 6  Optimize/fit NeuroML models to experimental data       Create, Validate, Simulate, Fit\n                                   Guide 7                                                                                                   Guide 7                                                                                                   Guide 7  Extend NeuroML by creating a novel model type in LEMS  Create, Simulate\n                                   Walkthroughs                                                                                              Walkthroughs                                                                                              Walkthroughs\n                                                                                                                                                                                                                                                                Guide to converting cell models to NeuroML and sharing them on\n                                   Guide 8                                                                                                   Guide 8                                                                                                   Guide 8  Open Source Brain                                      Create, Validate, Simulate, Share\n                                                                                                                                                                                                                                                                                                                       Create, Validate, Visualize, Simulate,\n                                   Guide 9                                                                                                   Guide 9                                                                                                   Guide 9  Conversion of Ray et al., 2020                         Share\n                                   multi-                                                                                                    multi-                                                                                                    multi-\n                                                                                                                                                                                                                                                        level testing in software development. Importantly, most of the validation tests in NeuroML are\n                                   run on the models’ NeuroML descriptions prior to simulation.                                              run on the models’ NeuroML descriptions prior to simulation.                                              run on the models’ NeuroML descriptions prior to simulation.\n                                                                                                                                                                                                                                                        A ﬁrst level of validation checks the structure of individual model elements against their formal\n                                   speciﬁcations contained in the NeuroML standard. The standard includes information on the param-          speciﬁcations contained in the NeuroML standard. The standard includes information on the param-          speciﬁcations contained in the NeuroML standard. The standard includes information on the param-\n                                   eters of each model element, restrictions on parameter values, their allowed units, their cardinality,    eters of each model element, restrictions on parameter values, their allowed units, their cardinality,    eters of each model element, restrictions on parameter values, their allowed units, their cardinality,\n                                   and the location of the model element in the model hierarchy—i.e., parent/children relationships. A       and the location of the model element in the model hierarchy—i.e., parent/children relationships. A       and the location of the model element in the model hierarchy—i.e., parent/children relationships. A\n                                   second level of validation includes a suite of semantic and logical checks. For example, at this level,   second level of validation includes a suite of semantic and logical checks. For example, at this level,   second level of validation includes a suite of semantic and logical checks. For example, at this level,\n                                   a model of a multi-  compartmental cell can be checked to ensure that all segments referenced in          a model of a multi-  compartmental cell can be checked to ensure that all segments referenced in          a model of a multi-  compartmental cell can be checked to ensure that all segments referenced in\n                                   segment groups (e.g. the group of dendritic segments) have been deﬁned, and only deﬁned once              segment groups (e.g. the group of dendritic segments) have been deﬁned, and only deﬁned once              segment groups (e.g. the group of dendritic segments) have been deﬁned, and only deﬁned once\n                                   with unique identiﬁers. A list of validation tests currently included in the NeuroML core tools can be    with unique identiﬁers. A list of validation tests currently included in the NeuroML core tools can be    with unique identiﬁers. A list of validation tests currently included in the NeuroML core tools can be\n                                   found in Table 6. These can be run against NeuroML ﬁles at the command line or programmatically           found in Table 6. These can be run against NeuroML ﬁles at the command line or programmatically           found in Table 6. These can be run against NeuroML ﬁles at the command line or programmatically\n                                   in Python (Figure 6).                                                                                     in Python (Figure 6).                                                                                     in Python (Figure 6).\n                                                                                                                                                                                                                                                        A key advantage of using the NeuroML2/LEMS framework is that dimensions and units are inbuilt\n                                   into LEMS descriptions. This enables automated conversions of units, unit checking, together with the     into LEMS descriptions. This enables automated conversions of units, unit checking, together with the     into LEMS descriptions. This enables automated conversions of units, unit checking, together with the\n                                   validation of equations. Any expressions in models which are dimensionally inconsistent will be high-     validation of equations. Any expressions in models which are dimensionally inconsistent will be high-     validation of equations. Any expressions in models which are dimensionally inconsistent will be high-\n                                   lighted at this stage. Note that LEMS handles unit conversions internally—modelers have ﬂexibility in     lighted at this stage. Note that LEMS handles unit conversions internally—modelers have ﬂexibility in     lighted at this stage. Note that LEMS handles unit conversions internally—modelers have ﬂexibility in\n                                   how they enter the units of parameter values (e.g. specifying conductance density in                      how they enter the units of parameter values (e.g. specifying conductance density in                      how they enter the units of parameter values (e.g. specifying conductance density in  2  2\n                                                                                                                                                                                                                                                                                                                       S/m   or mS/cm  ) in\n                                                                                                                                                                                                                                                       the NeuroML ﬁles, with the underlying LEMS deﬁnitions ensuring that a consistent set of  dimensions\n                                   are used in model equations (Cannon et al., 2014). LEMS then takes care of mapping the entered            are used in model equations (Cannon et al., 2014). LEMS then takes care of mapping the entered            are used in model equations (Cannon et al., 2014). LEMS then takes care of mapping the entered\n                                   units to the target simulator’s preferred units. This makes model deﬁnition, inspection, use, extension,  units to the target simulator’s preferred units. This makes model deﬁnition, inspection, use, extension,  units to the target simulator’s preferred units. This makes model deﬁnition, inspection, use, extension,\n                                   and translation easier and less error-                                                                    and translation easier and less error-                                                                    and translation easier and less error-\n                                                                                                                                                                                                                                                                prone.\n                                                                                                                                                                                                                                                        Once the set of NeuroML ﬁles are validated, the model can be simulated, and checks can be made\n                                   to test whether execution produces consistent results (e.g. ﬁring rate of neurons in a given popula-      to test whether execution produces consistent results (e.g. ﬁring rate of neurons in a given popula-      to test whether execution produces consistent results (e.g. ﬁring rate of neurons in a given popula-\n                                   tion) across multiple simulators (or versions of the same simulator). For this, the OSB Model Validation  tion) across multiple simulators (or versions of the same simulator). For this, the OSB Model Validation  tion) across multiple simulators (or versions of the same simulator). For this, the OSB Model Validation\n                                   (OMV) framework has been developed (Gleeson et  al., 2019b). This framework can automatically             (OMV) framework has been developed (Gleeson et  al., 2019b). This framework can automatically             (OMV) framework has been developed (Gleeson et  al., 2019b). This framework can automatically\n                                   check that the output (e.g. spike times) of a NeuroML model running on a given simulator is within an     check that the output (e.g. spike times) of a NeuroML model running on a given simulator is within an     check that the output (e.g. spike times) of a NeuroML model running on a given simulator is within an\n                                   allowed tolerance of the expected value. OMV has been applied to NeuroML models that have been            allowed tolerance of the expected value. OMV has been applied to NeuroML models that have been            allowed tolerance of the expected value. OMV has been applied to NeuroML models that have been\n                                   shared on OSB, to test consistent behavior of models as the models themselves, and all supported          shared on OSB, to test consistent behavior of models as the models themselves, and all supported          shared on OSB, to test consistent behavior of models as the models themselves, and all supported\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                       13 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Table 5. Step-by-step guides for using NeuroML illustrating the various stages of the model development life cycle.\n\nThese include Introductory guides aimed at teaching the fundamental NeuroML concepts, Advanced guides illustrating specific modeling workflows, and Walkthrough guides discussing the steps required for converting models to NeuroML. An updated list is available at http://neuroml.org/gettingstarted.\n\n| Link                | Description | Model life cycle stages                                                          |\n| ------------------- | ----------- | -------------------------------------------------------------------------------- |\n| Introductory guides | Guide 1     | Create and simulate a simple regular spiking Izhikevich neuron in NeuroML        |\n|                     | Guide 2     | Create a network of two synaptically connected populations of Izhikevich neurons |\n|                     | Guide 3     | Build and simulate a single compartment Hodgkin-Huxley neuron                    |\n|                     | Guide 4     | Create and simulate a multi compartment hippocampal OLM neuron                   |\n| Advanced guides     | Guide 5     | Create novel NeuroML models from components on NeuroML-DB                        |\n|                     | Guide 6     | Optimize/fit NeuroML models to experimental data                                 |\n|                     | Guide 7     | Extend NeuroML by creating a novel model type in LEMS                            |\n| Walkthroughs        | Guide 8     | Guide to converting cell models to NeuroML and sharing them on Open Source Brain |\n|                     | Guide 9     | Conversion of Ray et al., 2020                                                   |\n\nMulti-run on the models’ NeuroML descriptions prior to simulation. A first level of validation checks the structure of individual model elements against their formal specifications contained in the NeuroML standard. The standard includes information on the parameters of each model element, restrictions on parameter values, their allowed units, their cardinality, and the location of the model element in the model hierarchy—i.e., parent/children relationships. A second level of validation includes a suite of semantic and logical checks. For example, at this level, a model of a multi-compartmental cell can be checked to ensure that all segments referenced in segment groups (e.g. the group of dendritic segments) have been defined, and only defined once with unique identifiers. A list of validation tests currently included in the NeuroML core tools can be found in Table 6. These can be run against NeuroML files at the command line or programmatically in Python (Figure 6).\n\nA key advantage of using the NeuroML2/LEMS framework is that dimensions and units are inbuilt into LEMS descriptions. This enables automated conversions of units, unit checking, together with the validation of equations. Any expressions in models which are dimensionally inconsistent will be highlighted at this stage. Note that LEMS handles unit conversions internally—modelers have flexibility in how they enter the units of parameter values (e.g. specifying conductance density in S/m or mS/cm) in the NeuroML files, with the underlying LEMS definitions ensuring that a consistent set of dimensions are used in model equations (Cannon et al., 2014). LEMS then takes care of mapping the entered units to the target simulator’s preferred units. This makes model definition, inspection, use, extension, and translation easier and less error-prone.\n\nOnce the set of NeuroML files are validated, the model can be simulated, and checks can be made to test whether execution produces consistent results (e.g. firing rate of neurons in a given population) across multiple simulators (or versions of the same simulator). For this, the OSB Model Validation (OMV) framework has been developed (Gleeson et al., 2019b). This framework can automatically check that the output (e.g. spike times) of a NeuroML model running on a given simulator is within an allowed tolerance of the expected value. OMV has been applied to NeuroML models that have been shared on OSB, to test consistent behavior of models as the models themselves, and all supported.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Table 5. Step-by-step guides for using NeuroML illustrating the various stages of the model development life cycle.","md":"# Table 5. Step-by-step guides for using NeuroML illustrating the various stages of the model development life cycle.","bBox":{"x":168.52,"y":51.77,"w":372.1,"h":121.44}},{"type":"text","value":"These include Introductory guides aimed at teaching the fundamental NeuroML concepts, Advanced guides illustrating specific modeling workflows, and Walkthrough guides discussing the steps required for converting models to NeuroML. An updated list is available at http://neuroml.org/gettingstarted.","md":"These include Introductory guides aimed at teaching the fundamental NeuroML concepts, Advanced guides illustrating specific modeling workflows, and Walkthrough guides discussing the steps required for converting models to NeuroML. An updated list is available at http://neuroml.org/gettingstarted.","bBox":{"x":168.52,"y":75.76,"w":406,"h":167.03}},{"type":"table","rows":[["Link","Description","Model life cycle stages"],["Introductory guides","Guide 1","Create and simulate a simple regular spiking Izhikevich neuron in NeuroML"],["","Guide 2","Create a network of two synaptically connected populations of Izhikevich neurons"],["","Guide 3","Build and simulate a single compartment Hodgkin-Huxley neuron"],["","Guide 4","Create and simulate a multi compartment hippocampal OLM neuron"],["Advanced guides","Guide 5","Create novel NeuroML models from components on NeuroML-DB"],["","Guide 6","Optimize/fit NeuroML models to experimental data"],["","Guide 7","Extend NeuroML by creating a novel model type in LEMS"],["Walkthroughs","Guide 8","Guide to converting cell models to NeuroML and sharing them on Open Source Brain"],["","Guide 9","Conversion of Ray et al., 2020"]],"md":"| Link                | Description | Model life cycle stages                                                          |\n| ------------------- | ----------- | -------------------------------------------------------------------------------- |\n| Introductory guides | Guide 1     | Create and simulate a simple regular spiking Izhikevich neuron in NeuroML        |\n|                     | Guide 2     | Create a network of two synaptically connected populations of Izhikevich neurons |\n|                     | Guide 3     | Build and simulate a single compartment Hodgkin-Huxley neuron                    |\n|                     | Guide 4     | Create and simulate a multi compartment hippocampal OLM neuron                   |\n| Advanced guides     | Guide 5     | Create novel NeuroML models from components on NeuroML-DB                        |\n|                     | Guide 6     | Optimize/fit NeuroML models to experimental data                                 |\n|                     | Guide 7     | Extend NeuroML by creating a novel model type in LEMS                            |\n| Walkthroughs        | Guide 8     | Guide to converting cell models to NeuroML and sharing them on Open Source Brain |\n|                     | Guide 9     | Conversion of Ray et al., 2020                                                   |","isPerfectTable":true,"csv":"\"Link\",\"Description\",\"Model life cycle stages\"\n\"Introductory guides\",\"Guide 1\",\"Create and simulate a simple regular spiking Izhikevich neuron in NeuroML\"\n\"\",\"Guide 2\",\"Create a network of two synaptically connected populations of Izhikevich neurons\"\n\"\",\"Guide 3\",\"Build and simulate a single compartment Hodgkin-Huxley neuron\"\n\"\",\"Guide 4\",\"Create and simulate a multi compartment hippocampal OLM neuron\"\n\"Advanced guides\",\"Guide 5\",\"Create novel NeuroML models from components on NeuroML-DB\"\n\"\",\"Guide 6\",\"Optimize/fit NeuroML models to experimental data\"\n\"\",\"Guide 7\",\"Extend NeuroML by creating a novel model type in LEMS\"\n\"Walkthroughs\",\"Guide 8\",\"Guide to converting cell models to NeuroML and sharing them on Open Source Brain\"\n\"\",\"Guide 9\",\"Conversion of Ray et al., 2020\"","bBox":{"x":37.01,"y":34.63,"w":544.52,"h":720.13}},{"type":"text","value":"Multi-run on the models’ NeuroML descriptions prior to simulation. A first level of validation checks the structure of individual model elements against their formal specifications contained in the NeuroML standard. The standard includes information on the parameters of each model element, restrictions on parameter values, their allowed units, their cardinality, and the location of the model element in the model hierarchy—i.e., parent/children relationships. A second level of validation includes a suite of semantic and logical checks. For example, at this level, a model of a multi-compartmental cell can be checked to ensure that all segments referenced in segment groups (e.g. the group of dendritic segments) have been defined, and only defined once with unique identifiers. A list of validation tests currently included in the NeuroML core tools can be found in Table 6. These can be run against NeuroML files at the command line or programmatically in Python (Figure 6).\n\nA key advantage of using the NeuroML2/LEMS framework is that dimensions and units are inbuilt into LEMS descriptions. This enables automated conversions of units, unit checking, together with the validation of equations. Any expressions in models which are dimensionally inconsistent will be highlighted at this stage. Note that LEMS handles unit conversions internally—modelers have flexibility in how they enter the units of parameter values (e.g. specifying conductance density in S/m or mS/cm) in the NeuroML files, with the underlying LEMS definitions ensuring that a consistent set of dimensions are used in model equations (Cannon et al., 2014). LEMS then takes care of mapping the entered units to the target simulator’s preferred units. This makes model definition, inspection, use, extension, and translation easier and less error-prone.\n\nOnce the set of NeuroML files are validated, the model can be simulated, and checks can be made to test whether execution produces consistent results (e.g. firing rate of neurons in a given population) across multiple simulators (or versions of the same simulator). For this, the OSB Model Validation (OMV) framework has been developed (Gleeson et al., 2019b). This framework can automatically check that the output (e.g. spike times) of a NeuroML model running on a given simulator is within an allowed tolerance of the expected value. OMV has been applied to NeuroML models that have been shared on OSB, to test consistent behavior of models as the models themselves, and all supported.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Multi-run on the models’ NeuroML descriptions prior to simulation. A first level of validation checks the structure of individual model elements against their formal specifications contained in the NeuroML standard. The standard includes information on the parameters of each model element, restrictions on parameter values, their allowed units, their cardinality, and the location of the model element in the model hierarchy—i.e., parent/children relationships. A second level of validation includes a suite of semantic and logical checks. For example, at this level, a model of a multi-compartmental cell can be checked to ensure that all segments referenced in segment groups (e.g. the group of dendritic segments) have been defined, and only defined once with unique identifiers. A list of validation tests currently included in the NeuroML core tools can be found in Table 6. These can be run against NeuroML files at the command line or programmatically in Python (Figure 6).\n\nA key advantage of using the NeuroML2/LEMS framework is that dimensions and units are inbuilt into LEMS descriptions. This enables automated conversions of units, unit checking, together with the validation of equations. Any expressions in models which are dimensionally inconsistent will be highlighted at this stage. Note that LEMS handles unit conversions internally—modelers have flexibility in how they enter the units of parameter values (e.g. specifying conductance density in S/m or mS/cm) in the NeuroML files, with the underlying LEMS definitions ensuring that a consistent set of dimensions are used in model equations (Cannon et al., 2014). LEMS then takes care of mapping the entered units to the target simulator’s preferred units. This makes model definition, inspection, use, extension, and translation easier and less error-prone.\n\nOnce the set of NeuroML files are validated, the model can be simulated, and checks can be made to test whether execution produces consistent results (e.g. firing rate of neurons in a given population) across multiple simulators (or versions of the same simulator). For this, the OSB Model Validation (OMV) framework has been developed (Gleeson et al., 2019b). This framework can automatically check that the output (e.g. spike times) of a NeuroML model running on a given simulator is within an allowed tolerance of the expected value. OMV has been applied to NeuroML models that have been shared on OSB, to test consistent behavior of models as the models themselves, and all supported.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.52,"y":127.22,"w":413,"h":592.24}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"http://neuroml.org/gettingstarted","text":""},{"url":"http://neuroml.org/gettingstarted","text":"gettingstarted."},{"url":"https://docs.neuroml.org/Userdocs/NML2_examples/SingleNeuron.html","text":"Guide 1"},{"url":"https://docs.neuroml.org/Userdocs/IzhikevichNetworkExample.html","text":"Guide 2"},{"url":"https://docs.neuroml.org/Userdocs/SingleCompartmentHHExample.html","text":"Guide 3"},{"url":"https://docs.neuroml.org/Userdocs/MultiCompartmentOLMexample.html","text":"Guide 4"},{"url":"https://docs.neuroml.org/Userdocs/NML2_examples/NeuroML-DB.html","text":"Guide 5"},{"url":"https://docs.neuroml.org/Userdocs/OptimisingNeuroMLModels.html","text":"Guide 6"},{"url":"https://docs.neuroml.org/Userdocs/ExtendingNeuroMLv2.html#example-lorenz-model-for-cellular-convection","text":"Guide 7"},{"url":"https://docs.neuroml.org/Userdocs/CreatingNeuroMLModels.html#converting-cell-models-to-neuroml-and-sharing-them-on-open-source-brain","text":"Guide 8"},{"url":"https://docs.neuroml.org/Userdocs/Walkthroughs/RayEtAl2020/RayEtAl2020.html#userdocs-walkthroughs-rayetal2020","text":"Guide 9"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.402},{"page":14,"text":"           Tools  and  resourceseuroscience\nther standardized formats\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 NeuroML core software  PyNN  SONATA  SBML\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         tools\npyNeuroML      Simulator specific  4) Generated simulator scripts\nexport modules\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 NEURON  Brian2\nuild NeuroML    Expanded LEMS\ncore Components    description  3) Simulators import NeuroML\neuse existing   Generate helper  NetPyNE  MOOSE\nomponents         scripts\nser defined Execute in native  2) Native NeuroML simulators\nomponents in LEMS  simulators  EDEN\neuroML/LEMS serialization (XML)  1) NeuroML reference simulators\njNeuroML  PyLEMS\n                                  Figure 5. Workflow showing how to create and simulate NeuroML models using Python. The Python API can be           Figure 5. Workflow showing how to create and simulate NeuroML models using Python. The Python API can be           Figure 5. Workflow showing how to create and simulate NeuroML models using Python. The Python API can be           Figure 5. Workflow showing how to create and simulate NeuroML models using Python. The Python API can be           Figure 5. Workflow showing how to create and simulate NeuroML models using Python. The Python API can be           Figure 5. Workflow showing how to create and simulate NeuroML models using Python. The Python API can be\n                                  used to create models which may include elements built from scratch from the NeuroML standard, re-                 used to create models which may include elements built from scratch from the NeuroML standard, re-                 used to create models which may include elements built from scratch from the NeuroML standard, re-                 used to create models which may include elements built from scratch from the NeuroML standard, re-                 used to create models which may include elements built from scratch from the NeuroML standard, re-                 used to create models which may include elements built from scratch from the NeuroML standard, re-\nuse elements\n                                  from previously created models, or create new components based on novel model definitions expressed in LEMS        from previously created models, or create new components based on novel model definitions expressed in LEMS        from previously created models, or create new components based on novel model definitions expressed in LEMS        from previously created models, or create new components based on novel model definitions expressed in LEMS        from previously created models, or create new components based on novel model definitions expressed in LEMS        from previously created models, or create new components based on novel model definitions expressed in LEMS\n                                  (red). The generated model elements are saved in the default XML-                                                  (red). The generated model elements are saved in the default XML-                                                  (red). The generated model elements are saved in the default XML-                                                  (red). The generated model elements are saved in the default XML-                                                  (red). The generated model elements are saved in the default XML-                                                  (red). The generated model elements are saved in the default XML-\nbased serialization (blue). The NeuroML core\n                                  tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization,      tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization,      tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization,      tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization,      tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization,      tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization,\n                                  and support multiple options for how simulators can execute these models (green). These include: (1) execution     and support multiple options for how simulators can execute these models (green). These include: (1) execution     and support multiple options for how simulators can execute these models (green). These include: (1) execution     and support multiple options for how simulators can execute these models (green). These include: (1) execution     and support multiple options for how simulators can execute these models (green). These include: (1) execution     and support multiple options for how simulators can execute these models (green). These include: (1) execution\n                                  of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that      of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that      of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that      of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that      of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that      of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that\n                                  natively support NeuroML, such as EDEN; (3) generation of Python ‘import scripts’ which allow NeuroML models       natively support NeuroML, such as EDEN; (3) generation of Python ‘import scripts’ which allow NeuroML models       natively support NeuroML, such as EDEN; (3) generation of Python ‘import scripts’ which allow NeuroML models       natively support NeuroML, such as EDEN; (3) generation of Python ‘import scripts’ which allow NeuroML models       natively support NeuroML, such as EDEN; (3) generation of Python ‘import scripts’ which allow NeuroML models       natively support NeuroML, such as EDEN; (3) generation of Python ‘import scripts’ which allow NeuroML models\n                                  to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS  to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS  to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS  to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS  to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS  to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS\n                                  description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5)  description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5)  description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5)  description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5)  description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5)  description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5)\n                                  mapping to other standardized formats in neuroscience and systems biology.                                         mapping to other standardized formats in neuroscience and systems biology.                                         mapping to other standardized formats in neuroscience and systems biology.                                         mapping to other standardized formats in neuroscience and systems biology.                                         mapping to other standardized formats in neuroscience and systems biology.                                         mapping to other standardized formats in neuroscience and systems biology.\n                                  simulators, are updated. This has proven to be a valuable process for ensuring uniform usage and                   simulators, are updated. This has proven to be a valuable process for ensuring uniform usage and                   simulators, are updated. This has proven to be a valuable process for ensuring uniform usage and                   simulators, are updated. This has proven to be a valuable process for ensuring uniform usage and                   simulators, are updated. This has proven to be a valuable process for ensuring uniform usage and                   simulators, are updated. This has proven to be a valuable process for ensuring uniform usage and\n                                  interpretation of NeuroML across the ecosystem of supporting tools.                                                interpretation of NeuroML across the ecosystem of supporting tools.                                                interpretation of NeuroML across the ecosystem of supporting tools.                                                interpretation of NeuroML across the ecosystem of supporting tools.                                                interpretation of NeuroML across the ecosystem of supporting tools.                                                interpretation of NeuroML across the ecosystem of supporting tools.\nﬁnal level of validation concerns checking whether the model elements have emergent features\n                                  that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit                   that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit                   that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit                   that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit                   that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit                   that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit\n                                  (Gerkin et al., 2019), a SciUnit (Omar et al., 2014) package for data-                                             (Gerkin et al., 2019), a SciUnit (Omar et al., 2014) package for data-                                             (Gerkin et al., 2019), a SciUnit (Omar et al., 2014) package for data-                                             (Gerkin et al., 2019), a SciUnit (Omar et al., 2014) package for data-                                             (Gerkin et al., 2019), a SciUnit (Omar et al., 2014) package for data-                                             (Gerkin et al., 2019), a SciUnit (Omar et al., 2014) package for data-\ndriven unit testing and validation\n                                  of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated                   of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated                   of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated                   of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated                   of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated                   of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated\n                                  validation of NeuroML models shared on NeuroML-                                                                    validation of NeuroML models shared on NeuroML-                                                                    validation of NeuroML models shared on NeuroML-                                                                    validation of NeuroML models shared on NeuroML-                                                                    validation of NeuroML models shared on NeuroML-                                                                    validation of NeuroML models shared on NeuroML-\nand OSB.\n                                  Visualizing/analyzing NeuroML models                                                                               Visualizing/analyzing NeuroML models                                                                               Visualizing/analyzing NeuroML models                                                                               Visualizing/analyzing NeuroML models                                                                               Visualizing/analyzing NeuroML models                                                                               Visualizing/analyzing NeuroML models\n                                  Multiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem.            Multiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem.            Multiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem.            Multiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem.            Multiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem.            Multiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem.\n                                  Since NeuroML models have a ﬁxed, well-                                                                            Since NeuroML models have a ﬁxed, well-                                                                            Since NeuroML models have a ﬁxed, well-                                                                            Since NeuroML models have a ﬁxed, well-                                                                            Since NeuroML models have a ﬁxed, well-                                                                            Since NeuroML models have a ﬁxed, well-\ndeﬁned structure, NeuroML libraries can extract all informa-\n                                  tion from their descriptions. This information can be used by modelers and their programs/tools to run             tion from their descriptions. This information can be used by modelers and their programs/tools to run             tion from their descriptions. This information can be used by modelers and their programs/tools to run             tion from their descriptions. This information can be used by modelers and their programs/tools to run             tion from their descriptions. This information can be used by modelers and their programs/tools to run             tion from their descriptions. This information can be used by modelers and their programs/tools to run\n                                  automated programmatic analyses on models.                                                                         automated programmatic analyses on models.                                                                         automated programmatic analyses on models.                                                                         automated programmatic analyses on models.                                                                         automated programmatic analyses on models.                                                                         automated programmatic analyses on models.\npyNeuroML includes a range of ready-\nmade inspection utilities for users (\nigure 6) that can be used\n                                  via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of              via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of              via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of              via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of              via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of              via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of\n                                  cell and network models with 2D and 3D views is important for manual validation and to compare them                cell and network models with 2D and 3D views is important for manual validation and to compare them                cell and network models with 2D and 3D views is important for manual validation and to compare them                cell and network models with 2D and 3D views is important for manual validation and to compare them                cell and network models with 2D and 3D views is important for manual validation and to compare them                cell and network models with 2D and 3D views is important for manual validation and to compare them\n                                  to their biological counterparts. Graphical views of cell model morphology and the 3-                              to their biological counterparts. Graphical views of cell model morphology and the 3-                              to their biological counterparts. Graphical views of cell model morphology and the 3-                              to their biological counterparts. Graphical views of cell model morphology and the 3-                              to their biological counterparts. Graphical views of cell model morphology and the 3-                              to their biological counterparts. Graphical views of cell model morphology and the 3-  dimensional\n                                  network layout (Figure 8), population and connectivity matrices/graphs at different levels (Figure 9),             network layout (Figure 8), population and connectivity matrices/graphs at different levels (Figure 9),             network layout (Figure 8), population and connectivity matrices/graphs at different levels (Figure 9),             network layout (Figure 8), population and connectivity matrices/graphs at different levels (Figure 9),             network layout (Figure 8), population and connectivity matrices/graphs at different levels (Figure 9),             network layout (Figure 8), population and connectivity matrices/graphs at different levels (Figure 9),\n                                  and model summaries can all be generated (Figure 10). In addition to these inspection functions, a                 and model summaries can all be generated (Figure 10). In addition to these inspection functions, a                 and model summaries can all be generated (Figure 10). In addition to these inspection functions, a                 and model summaries can all be generated (Figure 10). In addition to these inspection functions, a                 and model summaries can all be generated (Figure 10). In addition to these inspection functions, a                 and model summaries can all be generated (Figure 10). In addition to these inspection functions, a\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLifeof 44","md":"# Tools and resources\n\n# Neuroscience\n\n# 5) Other standardized formats\n\n| NeuroML core software            | PyNN                            | SONATA             | SBML                           |\n| -------------------------------- | ------------------------------- | ------------------ | ------------------------------ |\n| tools                            | pyNeuroML                       | Simulator specific | 4) Generated simulator scripts |\n| export modules                   | NEURON                          | Brian2             |                                |\n| Build NeuroML                    | Expanded LEMS                   | core Components    | description                    |\n| 3) Simulators import NeuroML     | Reuse existing                  | Generate helper    | NetPyNE                        |\n| MOOSE                            | User defined                    | Execute in native  | 2) Native NeuroML simulators   |\n| Components in LEMS               | simulators                      | EDEN               |                                |\n| NeuroML/LEMS serialization (XML) | 1) NeuroML reference simulators |                    |                                |\n\nFigure 5. Workflow showing how to create and simulate NeuroML models using Python. The Python API can be used to create models which may include elements built from scratch from the NeuroML standard, reuse elements from previously created models, or create new components based on novel model definitions expressed in LEMS (red). The generated model elements are saved in the default XML-based serialization (blue). The NeuroML core tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization, and support multiple options for how simulators can execute these models (green). These include: (1) execution of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that natively support NeuroML, such as EDEN; (3) generation of Python ‘import scripts’ which allow NeuroML models to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5) mapping to other standardized formats in neuroscience and systems biology.\n\nSimulators are updated. This has proven to be a valuable process for ensuring uniform usage and interpretation of NeuroML across the ecosystem of supporting tools. A final level of validation concerns checking whether the model elements have emergent features that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit (Gerkin et al., 2019), a SciUnit (Omar et al., 2014) package for data-driven unit testing and validation of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated validation of NeuroML models shared on NeuroML-DB and OSB.\n\n# Visualizing/analyzing NeuroML models\n\nMultiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem. Since NeuroML models have a fixed, well-defined structure, NeuroML libraries can extract all information from their descriptions. This information can be used by modelers and their programs/tools to run automated programmatic analyses on models. pyNeuroML includes a range of ready-made inspection utilities for users (Figure 6) that can be used via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of cell and network models with 2D and 3D views is important for manual validation and to compare them to their biological counterparts. Graphical views of cell model morphology and the 3-dimensional network layout (Figure 8), population and connectivity matrices/graphs at different levels (Figure 9), and model summaries can all be generated (Figure 10). In addition to these inspection functions, a\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":290.05,"h":76.81}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"5) Other standardized formats","md":"# 5) Other standardized formats","bBox":{"x":439.72,"y":65.7,"w":107,"h":8}},{"type":"table","rows":[["NeuroML core software","PyNN","SONATA","SBML"],["tools","pyNeuroML","Simulator specific","4) Generated simulator scripts"],["export modules","NEURON","Brian2",""],["Build NeuroML","Expanded LEMS","core Components","description"],["3) Simulators import NeuroML","Reuse existing","Generate helper","NetPyNE"],["MOOSE","User defined","Execute in native","2) Native NeuroML simulators"],["Components in LEMS","simulators","EDEN",""],["NeuroML/LEMS serialization (XML)","1) NeuroML reference simulators","",""]],"md":"| NeuroML core software            | PyNN                            | SONATA             | SBML                           |\n| -------------------------------- | ------------------------------- | ------------------ | ------------------------------ |\n| tools                            | pyNeuroML                       | Simulator specific | 4) Generated simulator scripts |\n| export modules                   | NEURON                          | Brian2             |                                |\n| Build NeuroML                    | Expanded LEMS                   | core Components    | description                    |\n| 3) Simulators import NeuroML     | Reuse existing                  | Generate helper    | NetPyNE                        |\n| MOOSE                            | User defined                    | Execute in native  | 2) Native NeuroML simulators   |\n| Components in LEMS               | simulators                      | EDEN               |                                |\n| NeuroML/LEMS serialization (XML) | 1) NeuroML reference simulators |                    |                                |","isPerfectTable":true,"csv":"\"NeuroML core software\",\"PyNN\",\"SONATA\",\"SBML\"\n\"tools\",\"pyNeuroML\",\"Simulator specific\",\"4) Generated simulator scripts\"\n\"export modules\",\"NEURON\",\"Brian2\",\"\"\n\"Build NeuroML\",\"Expanded LEMS\",\"core Components\",\"description\"\n\"3) Simulators import NeuroML\",\"Reuse existing\",\"Generate helper\",\"NetPyNE\"\n\"MOOSE\",\"User defined\",\"Execute in native\",\"2) Native NeuroML simulators\"\n\"Components in LEMS\",\"simulators\",\"EDEN\",\"\"\n\"NeuroML/LEMS serialization (XML)\",\"1) NeuroML reference simulators\",\"\",\"\"","bBox":{"x":37.01,"y":34.63,"w":550.52,"h":720.13}},{"type":"text","value":"Figure 5. Workflow showing how to create and simulate NeuroML models using Python. The Python API can be used to create models which may include elements built from scratch from the NeuroML standard, reuse elements from previously created models, or create new components based on novel model definitions expressed in LEMS (red). The generated model elements are saved in the default XML-based serialization (blue). The NeuroML core tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization, and support multiple options for how simulators can execute these models (green). These include: (1) execution of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that natively support NeuroML, such as EDEN; (3) generation of Python ‘import scripts’ which allow NeuroML models to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5) mapping to other standardized formats in neuroscience and systems biology.\n\nSimulators are updated. This has proven to be a valuable process for ensuring uniform usage and interpretation of NeuroML across the ecosystem of supporting tools. A final level of validation concerns checking whether the model elements have emergent features that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit (Gerkin et al., 2019), a SciUnit (Omar et al., 2014) package for data-driven unit testing and validation of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated validation of NeuroML models shared on NeuroML-DB and OSB.","md":"Figure 5. Workflow showing how to create and simulate NeuroML models using Python. The Python API can be used to create models which may include elements built from scratch from the NeuroML standard, reuse elements from previously created models, or create new components based on novel model definitions expressed in LEMS (red). The generated model elements are saved in the default XML-based serialization (blue). The NeuroML core tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization, and support multiple options for how simulators can execute these models (green). These include: (1) execution of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that natively support NeuroML, such as EDEN; (3) generation of Python ‘import scripts’ which allow NeuroML models to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5) mapping to other standardized formats in neuroscience and systems biology.\n\nSimulators are updated. This has proven to be a valuable process for ensuring uniform usage and interpretation of NeuroML across the ecosystem of supporting tools. A final level of validation concerns checking whether the model elements have emergent features that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit (Gerkin et al., 2019), a SciUnit (Omar et al., 2014) package for data-driven unit testing and validation of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated validation of NeuroML models shared on NeuroML-DB and OSB.","bBox":{"x":168.53,"y":34.63,"w":410.37,"h":540.4}},{"type":"heading","lvl":1,"value":"Visualizing/analyzing NeuroML models","md":"# Visualizing/analyzing NeuroML models","bBox":{"x":168.53,"y":587.05,"w":220,"h":12}},{"type":"text","value":"Multiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem. Since NeuroML models have a fixed, well-defined structure, NeuroML libraries can extract all information from their descriptions. This information can be used by modelers and their programs/tools to run automated programmatic analyses on models. pyNeuroML includes a range of ready-made inspection utilities for users (Figure 6) that can be used via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of cell and network models with 2D and 3D views is important for manual validation and to compare them to their biological counterparts. Graphical views of cell model morphology and the 3-dimensional network layout (Figure 8), population and connectivity matrices/graphs at different levels (Figure 9), and model summaries can all be generated (Figure 10). In addition to these inspection functions, a\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Multiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem. Since NeuroML models have a fixed, well-defined structure, NeuroML libraries can extract all information from their descriptions. This information can be used by modelers and their programs/tools to run automated programmatic analyses on models. pyNeuroML includes a range of ready-made inspection utilities for users (Figure 6) that can be used via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of cell and network models with 2D and 3D views is important for manual validation and to compare them to their biological counterparts. Graphical views of cell model morphology and the 3-dimensional network layout (Figure 8), population and connectivity matrices/graphs at different levels (Figure 9), and model summaries can all be generated (Figure 10). In addition to these inspection functions, a\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":103.6,"w":419,"h":592.44}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.216},{"page":15,"text":"           Tools  and  resources                                                                                                                             Neuroscience\n                                                                                                                         Create (using Python API)\n                                   ƒrom neuroml import                                                                   ƒrom neuroml import *\n                                   # Create a container document                                                         # Create a container document\n                                                                                                                         doc = NeuroMLDocument(id=\"network0\")\n                                                                                                                         # Add single exponential synapse model\n                                   syn0 = doc.add(\"ΕxpOneSynapse\", id=\"syn0\", gbase=\"65nS\", erev=\"0mV\", tau_decay=\"3ms\") syn0 = doc.add(\"ΕxpOneSynapse\", id=\"syn0\", gbase=\"65nS\", erev=\"0mV\", tau_decay=\"3ms\")\n                                   # Reuse existing ion channel model                                                    # Reuse existing ion channel model\n                                   doc.add(\"ΙncludeType\", hreƒ=\"Na_chan.channel.nml\")                                    doc.add(\"ΙncludeType\", hreƒ=\"Na_chan.channel.nml\")\n                                                                                                                         # Create a cell with 3D morphology using the Cell ComponentType\n                                   cell = doc.add(\"Cell\", id=\"olm\", neuro_lex_id=\"NLΧCΕLL:091206\")                       cell = doc.add(\"Cell\", id=\"olm\", neuro_lex_id=\"NLΧCΕLL:091206\") # Hippocampal CA1 OLM cell\n                                                                                                                         cell.set_init_memb_potential(\"–67mV\")\n                                                                                                                         cell.set_resistivity(\"0.15 kohm_cm\")\n                                                                                                                         cell.add_channel_density(doc, cd_id=\"na_all\", cond_density=\"10 mS_per_cm2\",\n                                                                                                                          ion_channel=\"Na_chan\", ion_chan_deƒ_ƒile=\"Na.channel.nml\",\n                                                                                                                          erev=\"50mV\", ion=\"na\")\n                                                                                                                         cell.add_unbranched_segment_group(\"soma_group\")\n                                                                                                                         soma_0 = cell.add_segment(prox=[0, 0, 0, 10], dist=[0, 10, 0, 10], name=\"Seg0_soma_0\",\n                                                                                                                          group_id=\"soma_group\", seg_type=\"soma\")\n                                                                                                                          API examples                       Command line usage examples\n                                                                                                                          Validate\n                                                                                                                          validate_neuroml2(\"ƒile.nml\")      > pynml \"ƒile.nml\" –validate\n                                                                                                                          doc.validate(recursive=True)\n                                                                                                                          Inspect and visualize\n                                                                                                                          element.inƒo()\n                                                                                                                          summary(doc)                       > pynml–summary \"ƒile.nml\"\n                                                                                                                          nml2_to_png(doc)                   > pynml –png \"ƒile.nml\"\n                                                                                                                          nml2_to_svg(doc)                   > pynml –svg \"ƒile.nml\"\n                                                                                                                          generate_nmlgraph(doc)             > pynml \"ƒile.nml\" –graph\n                                                                                                                                                             > pynml \"ƒile.nml\" –matrix 1\n                                                                                                                          plot_2D(cell)                      > pynml–plotmorph \"cell.nml\"\n                                                                                                                          plot_interactive_3d(cell)          > pynml–plotmorph –interactive3d \"cell.nml\"\n                                                                                                                          plot_interactive_3d(network)       > pynml–plotmorph –interactive3d \"net.nml\"\n                                                                                                                                                             > pynml–channelanalysis \"channel.nml\"\n                                                                                                                          plot_channel_densities(cell)       > pynml–plotchan \"cell.nml\"\n                                                                                                                          Simulate\n                                                                                                                          run_lems_with_jneuroml(\"sim.xml\")  > pynml \"sim.xml\"\n                                                                                                                          run_lems_with_jneuroml_neuron(\"sim.xml\")  > pynml \"sim.xml\" –neuron –run\n                                                                                                                          run_lems_with_jneuroml_netpyne(\"sim.xml\")  > pynml \"sim.xml\" –netpyne –run\n                                                                                                                          run_on_nsg(\"jneuroml_neuron\", \"sim.xml\")\n                                                                                                                          . . .\n                                                                                                                          Share and archive\n                                                                                                                          create_combine_archive(\"sim.xml\")  > pynml–archive \"neuron.cell.nml\"\n                                 Figure 6. PyNeuroML provides Python functions and command line utilities supporting all stages of the model life\n                                 cycle.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                        15 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nCreate (using Python API)\nfrom neuroml import *\n# Create a container document\ndoc = NeuroMLDocument(id=\"network0\")\n# Add single exponential synapse model\nsyn0 = doc.add(\"ΕxpOneSynapse\", id=\"syn0\", gbase=\"65nS\", erev=\"0mV\", tau_decay=\"3ms\")\n# Reuse existing ion channel model\ndoc.add(\"ΙncludeType\", hreƒ=\"Na_chan.channel.nml\")\n# Create a cell with 3D morphology using the Cell ComponentType\ncell = doc.add(\"Cell\", id=\"olm\", neuro_lex_id=\"NLΧCΕLL:091206\") # Hippocampal CA1 OLM cell\ncell.set_init_memb_potential(\"–67mV\")\ncell.set_resistivity(\"0.15 kohm_cm\")\ncell.add_channel_density(doc, cd_id=\"na_all\", cond_density=\"10 mS_per_cm2\",\nion_channel=\"Na_chan\", ion_chan_deƒ_ƒile=\"Na.channel.nml\",\nerev=\"50mV\", ion=\"na\")\ncell.add_unbranched_segment_group(\"soma_group\")\nsoma_0 = cell.add_segment(prox=[0, 0, 0, 10], dist=[0, 10, 0, 10], name=\"Seg0_soma_0\",\ngroup_id=\"soma_group\", seg_type=\"soma\")\n\n# API examples\n\nCommand line usage examples\nValidate\nvalidate_neuroml2(\"ƒile.nml\")      > pynml \"ƒile.nml\" –validate\ndoc.validate(recursive=True)\nInspect and visualize\nelement.inƒo()\nsummary(doc)                       > pynml–summary \"ƒile.nml\"\nnml2_to_png(doc)                   > pynml –png \"ƒile.nml\"\nnml2_to_svg(doc)                   > pynml –svg \"ƒile.nml\"\ngenerate_nmlgraph(doc)             > pynml \"ƒile.nml\" –graph\n> pynml \"ƒile.nml\" –matrix 1\nplot_2D(cell)                      > pynml–plotmorph \"cell.nml\"\nplot_interactive_3d(cell)          > pynml–plotmorph –interactive3d \"cell.nml\"\nplot_interactive_3d(network)       > pynml–plotmorph –interactive3d \"net.nml\"\n> pynml–channelanalysis \"channel.nml\"\nplot_channel_densities(cell)       > pynml–plotchan \"cell.nml\"\nSimulate\nrun_lems_with_jneuroml(\"sim.xml\")  > pynml \"sim.xml\"\nrun_lems_with_jneuroml_neuron(\"sim.xml\")  > pynml \"sim.xml\" –neuron –run\nrun_lems_with_jneuroml_netpyne(\"sim.xml\")  > pynml \"sim.xml\" –netpyne –run\nrun_on_nsg(\"jneuroml_neuron\", \"sim.xml\")\n. . .\nShare and archive\ncreate_combine_archive(\"sim.xml\")  > pynml–archive \"neuron.cell.nml\"\n\nFigure 6. PyNeuroML provides Python functions and command line utilities supporting all stages of the model life cycle.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135\n\n15 of 44","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"Create (using Python API)\nfrom neuroml import *","md":"Create (using Python API)\nfrom neuroml import *","bBox":{"x":175.05,"y":58.91,"w":107,"h":24.76}},{"type":"heading","lvl":1,"value":"Create a container document","md":"# Create a container document","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"text","value":"doc = NeuroMLDocument(id=\"network0\")","md":"doc = NeuroMLDocument(id=\"network0\")","bBox":{"x":174.65,"y":106.18,"w":144,"h":8}},{"type":"heading","lvl":1,"value":"Add single exponential synapse model","md":"# Add single exponential synapse model","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"text","value":"syn0 = doc.add(\"ΕxpOneSynapse\", id=\"syn0\", gbase=\"65nS\", erev=\"0mV\", tau_decay=\"3ms\")","md":"syn0 = doc.add(\"ΕxpOneSynapse\", id=\"syn0\", gbase=\"65nS\", erev=\"0mV\", tau_decay=\"3ms\")","bBox":{"x":174.65,"y":136.68,"w":340,"h":8}},{"type":"heading","lvl":1,"value":"Reuse existing ion channel model","md":"# Reuse existing ion channel model","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"text","value":"doc.add(\"ΙncludeType\", hreƒ=\"Na_chan.channel.nml\")","md":"doc.add(\"ΙncludeType\", hreƒ=\"Na_chan.channel.nml\")","bBox":{"x":174.64,"y":167.18,"w":200,"h":8}},{"type":"heading","lvl":1,"value":"Create a cell with 3D morphology using the Cell ComponentType","md":"# Create a cell with 3D morphology using the Cell ComponentType","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"text","value":"cell = doc.add(\"Cell\", id=\"olm\", neuro_lex_id=\"NLΧCΕLL:091206\") # Hippocampal CA1 OLM cell\ncell.set_init_memb_potential(\"–67mV\")\ncell.set_resistivity(\"0.15 kohm_cm\")\ncell.add_channel_density(doc, cd_id=\"na_all\", cond_density=\"10 mS_per_cm2\",\nion_channel=\"Na_chan\", ion_chan_deƒ_ƒile=\"Na.channel.nml\",\nerev=\"50mV\", ion=\"na\")\ncell.add_unbranched_segment_group(\"soma_group\")\nsoma_0 = cell.add_segment(prox=[0, 0, 0, 10], dist=[0, 10, 0, 10], name=\"Seg0_soma_0\",\ngroup_id=\"soma_group\", seg_type=\"soma\")","md":"cell = doc.add(\"Cell\", id=\"olm\", neuro_lex_id=\"NLΧCΕLL:091206\") # Hippocampal CA1 OLM cell\ncell.set_init_memb_potential(\"–67mV\")\ncell.set_resistivity(\"0.15 kohm_cm\")\ncell.add_channel_density(doc, cd_id=\"na_all\", cond_density=\"10 mS_per_cm2\",\nion_channel=\"Na_chan\", ion_chan_deƒ_ƒile=\"Na.channel.nml\",\nerev=\"50mV\", ion=\"na\")\ncell.add_unbranched_segment_group(\"soma_group\")\nsoma_0 = cell.add_segment(prox=[0, 0, 0, 10], dist=[0, 10, 0, 10], name=\"Seg0_soma_0\",\ngroup_id=\"soma_group\", seg_type=\"soma\")","bBox":{"x":174.64,"y":197.69,"w":359.1,"h":89.35}},{"type":"heading","lvl":1,"value":"API examples","md":"# API examples","bBox":{"x":176.3,"y":307.39,"w":53,"h":8}},{"type":"text","value":"Command line usage examples\nValidate\nvalidate_neuroml2(\"ƒile.nml\")      > pynml \"ƒile.nml\" –validate\ndoc.validate(recursive=True)\nInspect and visualize\nelement.inƒo()\nsummary(doc)                       > pynml–summary \"ƒile.nml\"\nnml2_to_png(doc)                   > pynml –png \"ƒile.nml\"\nnml2_to_svg(doc)                   > pynml –svg \"ƒile.nml\"\ngenerate_nmlgraph(doc)             > pynml \"ƒile.nml\" –graph\n> pynml \"ƒile.nml\" –matrix 1\nplot_2D(cell)                      > pynml–plotmorph \"cell.nml\"\nplot_interactive_3d(cell)          > pynml–plotmorph –interactive3d \"cell.nml\"\nplot_interactive_3d(network)       > pynml–plotmorph –interactive3d \"net.nml\"\n> pynml–channelanalysis \"channel.nml\"\nplot_channel_densities(cell)       > pynml–plotchan \"cell.nml\"\nSimulate\nrun_lems_with_jneuroml(\"sim.xml\")  > pynml \"sim.xml\"\nrun_lems_with_jneuroml_neuron(\"sim.xml\")  > pynml \"sim.xml\" –neuron –run\nrun_lems_with_jneuroml_netpyne(\"sim.xml\")  > pynml \"sim.xml\" –netpyne –run\nrun_on_nsg(\"jneuroml_neuron\", \"sim.xml\")\n. . .\nShare and archive\ncreate_combine_archive(\"sim.xml\")  > pynml–archive \"neuron.cell.nml\"\n\nFigure 6. PyNeuroML provides Python functions and command line utilities supporting all stages of the model life cycle.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135\n\n15 of 44","md":"Command line usage examples\nValidate\nvalidate_neuroml2(\"ƒile.nml\")      > pynml \"ƒile.nml\" –validate\ndoc.validate(recursive=True)\nInspect and visualize\nelement.inƒo()\nsummary(doc)                       > pynml–summary \"ƒile.nml\"\nnml2_to_png(doc)                   > pynml –png \"ƒile.nml\"\nnml2_to_svg(doc)                   > pynml –svg \"ƒile.nml\"\ngenerate_nmlgraph(doc)             > pynml \"ƒile.nml\" –graph\n> pynml \"ƒile.nml\" –matrix 1\nplot_2D(cell)                      > pynml–plotmorph \"cell.nml\"\nplot_interactive_3d(cell)          > pynml–plotmorph –interactive3d \"cell.nml\"\nplot_interactive_3d(network)       > pynml–plotmorph –interactive3d \"net.nml\"\n> pynml–channelanalysis \"channel.nml\"\nplot_channel_densities(cell)       > pynml–plotchan \"cell.nml\"\nSimulate\nrun_lems_with_jneuroml(\"sim.xml\")  > pynml \"sim.xml\"\nrun_lems_with_jneuroml_neuron(\"sim.xml\")  > pynml \"sim.xml\" –neuron –run\nrun_lems_with_jneuroml_netpyne(\"sim.xml\")  > pynml \"sim.xml\" –netpyne –run\nrun_on_nsg(\"jneuroml_neuron\", \"sim.xml\")\n. . .\nShare and archive\ncreate_combine_archive(\"sim.xml\")  > pynml–archive \"neuron.cell.nml\"\n\nFigure 6. PyNeuroML provides Python functions and command line utilities supporting all stages of the model life cycle.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135\n\n15 of 44","bBox":{"x":168.53,"y":307.39,"w":406.81,"h":447.37}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.882},{"page":16,"text":"           Tools  and  resources                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Neuroscience\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Model description\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          NeuroML validity checks\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Does the model include all required model elements?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Are all model elements correctly ordered?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Are all necessary model element attributes/parameters set?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Do all parameters use correct physiological units?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Additional/logical checks\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Do model elements correctly reference each other?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Are synapses/connections/projections correctly defined?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Are multi-compartmental cell morphologies valid?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            LEMS checks\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Are all model elements mappable to simulation back-ends?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Are all of the units and dimensions consistent?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Model simulation\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            OMV checks\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Does the model produce the same results on all simulators?\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Behavioral checks (SciUnit)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Do the simulation results match experimental data?\n                                 Figure 7. NeuroML model development incorporates multi-                                                           Figure 7. NeuroML model development incorporates multi-                                                           Figure 7. NeuroML model development incorporates multi-                                                           Figure 7. NeuroML model development incorporates multi-                                                           Figure 7. NeuroML model development incorporates multi-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            level validation of models. Checks are performed on\n                                 the model descriptions (blue) before simulation using validation at both the NeuroML and LEMS levels (green).     the model descriptions (blue) before simulation using validation at both the NeuroML and LEMS levels (green).     the model descriptions (blue) before simulation using validation at both the NeuroML and LEMS levels (green).     the model descriptions (blue) before simulation using validation at both the NeuroML and LEMS levels (green).     the model descriptions (blue) before simulation using validation at both the NeuroML and LEMS levels (green).\n                                 After the models are simulated (yellow), further checks can be run to ensure the output is in line with expected  After the models are simulated (yellow), further checks can be run to ensure the output is in line with expected  After the models are simulated (yellow), further checks can be run to ensure the output is in line with expected  After the models are simulated (yellow), further checks can be run to ensure the output is in line with expected  After the models are simulated (yellow), further checks can be run to ensure the output is in line with expected\n                                 behavior (brown). The OSB Model Validation (OMV) framework can be used to ensure consistent behavior across       behavior (brown). The OSB Model Validation (OMV) framework can be used to ensure consistent behavior across       behavior (brown). The OSB Model Validation (OMV) framework can be used to ensure consistent behavior across       behavior (brown). The OSB Model Validation (OMV) framework can be used to ensure consistent behavior across       behavior (brown). The OSB Model Validation (OMV) framework can be used to ensure consistent behavior across\n                                 simulators, and comparisons can be made of model activity to their biological equivalents using SciUnit.          simulators, and comparisons can be made of model activity to their biological equivalents using SciUnit.          simulators, and comparisons can be made of model activity to their biological equivalents using SciUnit.          simulators, and comparisons can be made of model activity to their biological equivalents using SciUnit.          simulators, and comparisons can be made of model activity to their biological equivalents using SciUnit.\n                                 variety of utilities for the inspection of NeuroML descriptions of electrophysiological properties of             variety of utilities for the inspection of NeuroML descriptions of electrophysiological properties of             variety of utilities for the inspection of NeuroML descriptions of electrophysiological properties of             variety of utilities for the inspection of NeuroML descriptions of electrophysiological properties of             variety of utilities for the inspection of NeuroML descriptions of electrophysiological properties of\n                                 membrane conductances and their spatial distribution over the neuronal membrane are also provided                 membrane conductances and their spatial distribution over the neuronal membrane are also provided                 membrane conductances and their spatial distribution over the neuronal membrane are also provided                 membrane conductances and their spatial distribution over the neuronal membrane are also provided                 membrane conductances and their spatial distribution over the neuronal membrane are also provided\n                                 (Figure 10).                                                                                                      (Figure 10).                                                                                                      (Figure 10).                                                                                                      (Figure 10).                                                                                                      (Figure 10).\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          The graphical applications included in the NeuroML ecosystem (e.g. neuroConstruct, NeuroML-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            DB,\n                                 OSB (v1 [https://v1.opensourcebrain.org] and v2), NetPyNE, and Arbor-                                             OSB (v1 [https://v1.opensourcebrain.org] and v2), NetPyNE, and Arbor-                                             OSB (v1 [https://v1.opensourcebrain.org] and v2), NetPyNE, and Arbor-                                             OSB (v1 [https://v1.opensourcebrain.org] and v2), NetPyNE, and Arbor-                                             OSB (v1 [https://v1.opensourcebrain.org] and v2), NetPyNE, and Arbor- GUI) also provide many of\n                                 their own analysis and visualization functions. OSBv1, for example, supports automated 3D visual-                 their own analysis and visualization functions. OSBv1, for example, supports automated 3D visual-                 their own analysis and visualization functions. OSBv1, for example, supports automated 3D visual-                 their own analysis and visualization functions. OSBv1, for example, supports automated 3D visual-                 their own analysis and visualization functions. OSBv1, for example, supports automated 3D visual-\n                                 ization of networks and cell morphologies, network connectivity graphs and metrics, and advanced                  ization of networks and cell morphologies, network connectivity graphs and metrics, and advanced                  ization of networks and cell morphologies, network connectivity graphs and metrics, and advanced                  ization of networks and cell morphologies, network connectivity graphs and metrics, and advanced                  ization of networks and cell morphologies, network connectivity graphs and metrics, and advanced\n                                 model inspection features (Gleeson et  al., 2019b;                                                                model inspection features (Gleeson et  al., 2019b;                                                                model inspection features (Gleeson et  al., 2019b;                                                                model inspection features (Gleeson et  al., 2019b;                                                                model inspection features (Gleeson et  al., 2019b;  Figure  8b). On OSBv2, NetPyNE provides\n                                 advanced graphical plotting and analysis facilities (Figure 8c). A complete JupyterLab (https://jupyter.          advanced graphical plotting and analysis facilities (Figure 8c). A complete JupyterLab (https://jupyter.          advanced graphical plotting and analysis facilities (Figure 8c). A complete JupyterLab (https://jupyter.          advanced graphical plotting and analysis facilities (Figure 8c). A complete JupyterLab (https://jupyter.          advanced graphical plotting and analysis facilities (Figure 8c). A complete JupyterLab (https://jupyter.\n                                 org/) interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be              org/) interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be              org/) interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be              org/) interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be              org/) interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be\n                                 created and shared, mixing scripting and graphical elements, including those generated by pyNeu-                  created and shared, mixing scripting and graphical elements, including those generated by pyNeu-                  created and shared, mixing scripting and graphical elements, including those generated by pyNeu-                  created and shared, mixing scripting and graphical elements, including those generated by pyNeu-                  created and shared, mixing scripting and graphical elements, including those generated by pyNeu-\n                                 roML. NeuroML-                                                                                                    roML. NeuroML-                                                                                                    roML. NeuroML-                                                                                                    roML. NeuroML-                                                                                                    roML. NeuroML-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           DB also provides information on electrophysiology, morphology, and the simulation\n                                 aspects of neuronal models (Birgiolas et al., 2023;  Figure 10a). In general, any NeuroML-                        aspects of neuronal models (Birgiolas et al., 2023;  Figure 10a). In general, any NeuroML-                        aspects of neuronal models (Birgiolas et al., 2023;  Figure 10a). In general, any NeuroML-                        aspects of neuronal models (Birgiolas et al., 2023;  Figure 10a). In general, any NeuroML-                        aspects of neuronal models (Birgiolas et al., 2023;  Figure 10a). In general, any NeuroML-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            compliant\n                                 application can be used to inspect and analyze elements of NeuroML models, each having their own                  application can be used to inspect and analyze elements of NeuroML models, each having their own                  application can be used to inspect and analyze elements of NeuroML models, each having their own                  application can be used to inspect and analyze elements of NeuroML models, each having their own                  application can be used to inspect and analyze elements of NeuroML models, each having their own\n                                 distinct advantages.                                                                                              distinct advantages.                                                                                              distinct advantages.                                                                                              distinct advantages.                                                                                              distinct advantages.\n                                 Simulating NeuroML models                                                                                         Simulating NeuroML models                                                                                         Simulating NeuroML models                                                                                         Simulating NeuroML models                                                                                         Simulating NeuroML models\n                                 Users can simulate NeuroML models using a number of simulation engines without making any                         Users can simulate NeuroML models using a number of simulation engines without making any                         Users can simulate NeuroML models using a number of simulation engines without making any                         Users can simulate NeuroML models using a number of simulation engines without making any                         Users can simulate NeuroML models using a number of simulation engines without making any\n                                 changes to their models. This is because the NeuroML/LEMS descriptions of the models are simulator                changes to their models. This is because the NeuroML/LEMS descriptions of the models are simulator                changes to their models. This is because the NeuroML/LEMS descriptions of the models are simulator                changes to their models. This is because the NeuroML/LEMS descriptions of the models are simulator                changes to their models. This is because the NeuroML/LEMS descriptions of the models are simulator\n                                 independent and can be translated to simulator speciﬁc formats. pyNeuroML facilitates access to all               independent and can be translated to simulator speciﬁc formats. pyNeuroML facilitates access to all               independent and can be translated to simulator speciﬁc formats. pyNeuroML facilitates access to all               independent and can be translated to simulator speciﬁc formats. pyNeuroML facilitates access to all               independent and can be translated to simulator speciﬁc formats. pyNeuroML facilitates access to all\n                                 available simulation options, both from the command line and using function calls in Python scripts               available simulation options, both from the command line and using function calls in Python scripts               available simulation options, both from the command line and using function calls in Python scripts               available simulation options, both from the command line and using function calls in Python scripts               available simulation options, both from the command line and using function calls in Python scripts\n                                 when using the Python API (Figure 6).                                                                             when using the Python API (Figure 6).                                                                             when using the Python API (Figure 6).                                                                             when using the Python API (Figure 6).                                                                             when using the Python API (Figure 6).\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Simulation engines can be classiﬁed into ﬁve broad categories (Figure 5):\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          1.  reference NeuroML/LEMS simulators.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2.  independently developed simulators that natively support NeuroML.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                                                                                                                                                                       16 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Model description\n\n# NeuroML validity checks\n\n- Does the model include all required model elements?\n- Are all model elements correctly ordered?\n- Are all necessary model element attributes/parameters set?\n- Do all parameters use correct physiological units?\n\n# Additional/logical checks\n\n- Do model elements correctly reference each other?\n- Are synapses/connections/projections correctly defined?\n- Are multi-compartmental cell morphologies valid?\n\n# LEMS checks\n\n- Are all model elements mappable to simulation back-ends?\n- Are all of the units and dimensions consistent?\n\n# Model simulation\n\n# OMV checks\n\n- Does the model produce the same results on all simulators?\n\n# Behavioral checks (SciUnit)\n\n- Do the simulation results match experimental data?\n\nFigure 7. NeuroML model development incorporates multi-level validation of models. Checks are performed on the model descriptions (blue) before simulation using validation at both the NeuroML and LEMS levels (green). After the models are simulated (yellow), further checks can be run to ensure the output is in line with expected behavior (brown). The OSB Model Validation (OMV) framework can be used to ensure consistent behavior across simulators, and comparisons can be made of model activity to their biological equivalents using SciUnit.\n\nA variety of utilities for the inspection of NeuroML descriptions of electrophysiological properties of membrane conductances and their spatial distribution over the neuronal membrane are also provided (Figure 10).\n\nThe graphical applications included in the NeuroML ecosystem (e.g. neuroConstruct, NeuroML-DB, OSB (v1 https://v1.opensourcebrain.org and v2), NetPyNE, and Arbor) also provide many of their own analysis and visualization functions. OSBv1, for example, supports automated 3D visualization of networks and cell morphologies, network connectivity graphs and metrics, and advanced model inspection features (Gleeson et al., 2019b; Figure 8b). On OSBv2, NetPyNE provides advanced graphical plotting and analysis facilities (Figure 8c). A complete JupyterLab (https://jupyter.org/) interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be created and shared, mixing scripting and graphical elements, including those generated by pyNeuroML.\n\nNeuroML-DB also provides information on electrophysiology, morphology, and the simulation aspects of neuronal models (Birgiolas et al., 2023; Figure 10a). In general, any NeuroML-compliant application can be used to inspect and analyze elements of NeuroML models, each having their own distinct advantages.\n\n# Simulating NeuroML models\n\nUsers can simulate NeuroML models using a number of simulation engines without making any changes to their models. This is because the NeuroML/LEMS descriptions of the models are simulator independent and can be translated to simulator specific formats. pyNeuroML facilitates access to all available simulation options, both from the command line and using function calls in Python scripts when using the Python API (Figure 6).\n\n# Simulation engines can be classified into five broad categories (Figure 5):\n\n1. reference NeuroML/LEMS simulators.\n2. independently developed simulators that natively support NeuroML.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Model description","md":"# Model description","bBox":{"x":187.72,"y":66.91,"w":68,"h":8}},{"type":"heading","lvl":1,"value":"NeuroML validity checks","md":"# NeuroML validity checks","bBox":{"x":204.09,"y":90.96,"w":94,"h":8}},{"type":"text","value":"- Does the model include all required model elements?\n- Are all model elements correctly ordered?\n- Are all necessary model element attributes/parameters set?\n- Do all parameters use correct physiological units?","md":"- Does the model include all required model elements?\n- Are all model elements correctly ordered?\n- Are all necessary model element attributes/parameters set?\n- Do all parameters use correct physiological units?","bBox":{"x":214.6,"y":102.99,"w":211,"h":30.56}},{"type":"heading","lvl":1,"value":"Additional/logical checks","md":"# Additional/logical checks","bBox":{"x":228.11,"y":148.35,"w":96,"h":8}},{"type":"text","value":"- Do model elements correctly reference each other?\n- Are synapses/connections/projections correctly defined?\n- Are multi-compartmental cell morphologies valid?","md":"- Do model elements correctly reference each other?\n- Are synapses/connections/projections correctly defined?\n- Are multi-compartmental cell morphologies valid?","bBox":{"x":240.11,"y":158.88,"w":200,"h":26.05}},{"type":"heading","lvl":1,"value":"LEMS checks","md":"# LEMS checks","bBox":{"x":249.12,"y":198.23,"w":52,"h":8}},{"type":"text","value":"- Are all model elements mappable to simulation back-ends?\n- Are all of the units and dimensions consistent?","md":"- Are all model elements mappable to simulation back-ends?\n- Are all of the units and dimensions consistent?","bBox":{"x":256.62,"y":208.75,"w":209.74,"h":17.03}},{"type":"heading","lvl":1,"value":"Model simulation","md":"# Model simulation","bBox":{"x":274.51,"y":243.5,"w":65,"h":8}},{"type":"heading","lvl":1,"value":"OMV checks","md":"# OMV checks","bBox":{"x":289.64,"y":265.27,"w":48,"h":8}},{"type":"text","value":"- Does the model produce the same results on all simulators?","md":"- Does the model produce the same results on all simulators?","bBox":{"x":297.14,"y":275.79,"w":215,"h":8}},{"type":"heading","lvl":1,"value":"Behavioral checks (SciUnit)","md":"# Behavioral checks (SciUnit)","bBox":{"x":307.65,"y":299.22,"w":105,"h":8}},{"type":"text","value":"- Do the simulation results match experimental data?\n\nFigure 7. NeuroML model development incorporates multi-level validation of models. Checks are performed on the model descriptions (blue) before simulation using validation at both the NeuroML and LEMS levels (green). After the models are simulated (yellow), further checks can be run to ensure the output is in line with expected behavior (brown). The OSB Model Validation (OMV) framework can be used to ensure consistent behavior across simulators, and comparisons can be made of model activity to their biological equivalents using SciUnit.\n\nA variety of utilities for the inspection of NeuroML descriptions of electrophysiological properties of membrane conductances and their spatial distribution over the neuronal membrane are also provided (Figure 10).\n\nThe graphical applications included in the NeuroML ecosystem (e.g. neuroConstruct, NeuroML-DB, OSB (v1 https://v1.opensourcebrain.org and v2), NetPyNE, and Arbor) also provide many of their own analysis and visualization functions. OSBv1, for example, supports automated 3D visualization of networks and cell morphologies, network connectivity graphs and metrics, and advanced model inspection features (Gleeson et al., 2019b; Figure 8b). On OSBv2, NetPyNE provides advanced graphical plotting and analysis facilities (Figure 8c). A complete JupyterLab (https://jupyter.org/) interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be created and shared, mixing scripting and graphical elements, including those generated by pyNeuroML.\n\nNeuroML-DB also provides information on electrophysiology, morphology, and the simulation aspects of neuronal models (Birgiolas et al., 2023; Figure 10a). In general, any NeuroML-compliant application can be used to inspect and analyze elements of NeuroML models, each having their own distinct advantages.","md":"- Do the simulation results match experimental data?\n\nFigure 7. NeuroML model development incorporates multi-level validation of models. Checks are performed on the model descriptions (blue) before simulation using validation at both the NeuroML and LEMS levels (green). After the models are simulated (yellow), further checks can be run to ensure the output is in line with expected behavior (brown). The OSB Model Validation (OMV) framework can be used to ensure consistent behavior across simulators, and comparisons can be made of model activity to their biological equivalents using SciUnit.\n\nA variety of utilities for the inspection of NeuroML descriptions of electrophysiological properties of membrane conductances and their spatial distribution over the neuronal membrane are also provided (Figure 10).\n\nThe graphical applications included in the NeuroML ecosystem (e.g. neuroConstruct, NeuroML-DB, OSB (v1 https://v1.opensourcebrain.org and v2), NetPyNE, and Arbor) also provide many of their own analysis and visualization functions. OSBv1, for example, supports automated 3D visualization of networks and cell morphologies, network connectivity graphs and metrics, and advanced model inspection features (Gleeson et al., 2019b; Figure 8b). On OSBv2, NetPyNE provides advanced graphical plotting and analysis facilities (Figure 8c). A complete JupyterLab (https://jupyter.org/) interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be created and shared, mixing scripting and graphical elements, including those generated by pyNeuroML.\n\nNeuroML-DB also provides information on electrophysiology, morphology, and the simulation aspects of neuronal models (Birgiolas et al., 2023; Figure 10a). In general, any NeuroML-compliant application can be used to inspect and analyze elements of NeuroML models, each having their own distinct advantages.","bBox":{"x":168.52,"y":66.91,"w":413.01,"h":527.54}},{"type":"heading","lvl":1,"value":"Simulating NeuroML models","md":"# Simulating NeuroML models","bBox":{"x":168.53,"y":606.49,"w":161,"h":12}},{"type":"text","value":"Users can simulate NeuroML models using a number of simulation engines without making any changes to their models. This is because the NeuroML/LEMS descriptions of the models are simulator independent and can be translated to simulator specific formats. pyNeuroML facilitates access to all available simulation options, both from the command line and using function calls in Python scripts when using the Python API (Figure 6).","md":"Users can simulate NeuroML models using a number of simulation engines without making any changes to their models. This is because the NeuroML/LEMS descriptions of the models are simulator independent and can be translated to simulator specific formats. pyNeuroML facilitates access to all available simulation options, both from the command line and using function calls in Python scripts when using the Python API (Figure 6).","bBox":{"x":168.53,"y":622.49,"w":413,"h":44.99}},{"type":"heading","lvl":1,"value":"Simulation engines can be classified into five broad categories (Figure 5):","md":"# Simulation engines can be classified into five broad categories (Figure 5):","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"text","value":"1. reference NeuroML/LEMS simulators.\n2. independently developed simulators that natively support NeuroML.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"1. reference NeuroML/LEMS simulators.\n2. independently developed simulators that natively support NeuroML.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":180.52,"y":699.48,"w":289,"h":20}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://v1.opensourcebrain.org/","text":""},{"url":"https://jupyter.org/","text":""},{"url":"https://jupyter.org/","text":"org/) interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be "}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.291},{"page":17,"text":"                                     Tools  and  resources\n                                    Table 6. Listing of validation tests run by NeuroML.\n                                    Test                                 Description\nSchema tests                        Schema tests\n                                                                         Check that names of all elements, attributes, parameters match those\nCheck names                         Check names                          provided in the schema\nCheck types                         Check types                          Check that the types of all included elements\nCheck values                        Check values                         Check that values follow given restrictions\nCheck inclusion                     Check inclusion                      Check that required elements are included\nCheck cardinality                   Check cardinality                    Check the number of elements\n                                                                         Check that child/children elements are included in the correct parent\nCheck hierarchy                     Check hierarchy                      elements\nCheck sequence order                Check sequence order                 Check that child/children elements are included in the correct order\nAdditional tests                    Additional tests\nCheck top level ids                 Check top level ids                  Check that top level (root) elements have unique ids\nCheck Network level ids             Check Network level ids              Check that child/children of the Network element have unique ids\nCheck Cell Segment ids              Check Cell Segment ids               Check that all Segments in a Cell have unique ids\nCheck single Segment without parent Check single Segment without parent  Check that only one Segment is without parents (the soma Segment)\nCheck SegmentGroup ids              Check SegmentGroup ids               Check that all SegmentGroups in a Cell have unique ids\nCheck Member segment ids exist      Check Member segment ids exist       Check that Segments referred to in SegmentGroup Members exist\nCheck SegmentGroup definition       Check SegmentGroup definition        Check that SegmentGroups being referenced are defined\nCheck SegmentGroup definition order Check SegmentGroup definition order  Check that SegmentGroups are defined before being referenced\n                                                                         Check that SegmentGroups referenced by Include elements of other\nCheck included SegmentGroups        Check included SegmentGroups         SegmentGroups exist\n                                                                         Check that SegmentGroups define numberInternalDivisions (used by\n                                                                         simulators to discretize un-\n\nCheck numberInternalDivisions       Check numberInternalDivisions        simulation)\nCheck included model files          Check included model files           Check that model files included by other files exist\nCheck Population component          Check Population component           Check that a component id provided to a Population exists\nCheck ion channel exists            Check ion channel exists             Check that an ion channel used to define a ChannelDensity element exists\nCheck concentration model species   Check concentration model species    Check that the species used in ConcentrationModel elements are defined\n                                                                         Check that the size attribute of a PopulationList matches the number of\nCheck Population size               Check Population size                defined Instances\nCheck Projection component          Check Projection component           Check that Populations used in the Projection elements exist\nCheck Connection Segment            Check Connection Segment             Check that the Segment used in Connection elements exist\n                                                                         Check that the pre- and post-\n\nCheck Connection pre/post cells     Check Connection pre/post cells      exist and are correctly specified\nCheck Synapse                       Check Synapse                        Check that the Synapse component used in a Projection element exists\nCheck root id                       Check root id                        Check that the root Segment in a Cell morphology has id 0\n                                      3.  simulators that import/translate NeuroML to their own internal formats.\n                                      4.  simulators that are supported through generation of simulator-\n                                         NeuroML tools.\n                                      5.  export to other standardized formats which may allow simulation/analysis in other packages.\n                                      Each simulation engine supports a different set of features that NeuroML users can take advan-\n                                     tage of (Table 7). For example, the reference NeuroML and LEMS simulators, jNeuroML, jLEMS, and\n                                     PyLEMS, can simulate all LEMS models and most NeuroML models. They cannot, however, simulate\n                                    Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135\nNeuroscience\n\nDescription\n\nCheck that names of all elements, attributes, parameters match those\nprovided in the schema\nCheck that the types of all included elements\nCheck that values follow given restrictions\nCheck that required elements are included\nCheck the number of elements\nCheck that child/children elements are included in the correct parent\nelements\nCheck that child/children elements are included in the correct order\n\nCheck that top level (root) elements have unique ids\nCheck that child/children of the Network element have unique ids\nCheck that all Segments in a Cell have unique ids\nCheck that only one Segment is without parents (the soma Segment)\nCheck that all SegmentGroups in a Cell have unique ids\nCheck that Segments referred to in SegmentGroup Members exist\nCheck that SegmentGroups being referenced are defined\nCheck that SegmentGroups are defined before being referenced\nCheck that SegmentGroups referenced by Include elements of other\nSegmentGroups exist\nCheck that SegmentGroups define numberInternalDivisions (used by\nsimulators to discretize un-\nbranched branches into compartments for\nsimulation)\nCheck that model files included by other files exist\nCheck that a component id provided to a Population exists\nCheck that an ion channel used to define a ChannelDensity element exists\nCheck that the species used in ConcentrationModel elements are defined\nCheck that the size attribute of a PopulationList matches the number of\ndefined Instances\nCheck that Populations used in the Projection elements exist\nCheck that the Segment used in Connection elements exist\nCheck that the pre- and post-\nsynaptic cells used in Connection elements\nexist and are correctly specified\nCheck that the Synapse component used in a Projection element exists\nCheck that the root Segment in a Cell morphology has id 0\n\nspecific scripts by the core\n\n\n\n\n\n17 of 44","md":"# Tools and resources\n\n# Table 6. Listing of validation tests run by NeuroML.\n\n| Test                                | Description                                                                                                                                     |\n| ----------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| Schema tests                        | Schema tests                                                                                                                                    |\n| Check names                         | Check that names of all elements, attributes, parameters match those provided in the schema                                                     |\n| Check types                         | Check that the types of all included elements                                                                                                   |\n| Check values                        | Check that values follow given restrictions                                                                                                     |\n| Check inclusion                     | Check that required elements are included                                                                                                       |\n| Check cardinality                   | Check the number of elements                                                                                                                    |\n| Check hierarchy                     | Check that child/children elements are included in the correct parent elements                                                                  |\n| Check sequence order                | Check that child/children elements are included in the correct order                                                                            |\n| Additional tests                    | Additional tests                                                                                                                                |\n| Check top level ids                 | Check that top level (root) elements have unique ids                                                                                            |\n| Check Network level ids             | Check that child/children of the Network element have unique ids                                                                                |\n| Check Cell Segment ids              | Check that all Segments in a Cell have unique ids                                                                                               |\n| Check single Segment without parent | Check that only one Segment is without parents (the soma Segment)                                                                               |\n| Check SegmentGroup ids              | Check that all SegmentGroups in a Cell have unique ids                                                                                          |\n| Check Member segment ids exist      | Check that Segments referred to in SegmentGroup Members exist                                                                                   |\n| Check SegmentGroup definition       | Check that SegmentGroups being referenced are defined                                                                                           |\n| Check SegmentGroup definition order | Check that SegmentGroups are defined before being referenced                                                                                    |\n| Check included SegmentGroups        | Check that SegmentGroups referenced by Include elements of other SegmentGroups exist                                                            |\n| Check numberInternalDivisions       | Check that SegmentGroups define numberInternalDivisions (used by simulators to discretize unbranched branches into compartments for simulation) |\n| Check included model files          | Check that model files included by other files exist                                                                                            |\n| Check Population component          | Check that a component id provided to a Population exists                                                                                       |\n| Check ion channel exists            | Check that an ion channel used to define a ChannelDensity element exists                                                                        |\n| Check concentration model species   | Check that the species used in ConcentrationModel elements are defined                                                                          |\n| Check Population size               | Check that the size attribute of a PopulationList matches the number of defined Instances                                                       |\n| Check Projection component          | Check that Populations used in the Projection elements exist                                                                                    |\n| Check Connection Segment            | Check that the Segment used in Connection elements exist                                                                                        |\n| Check Connection pre/post cells     | Check that the pre- and post-synaptic cells used in Connection elements exist and are correctly specified                                       |\n| Check Synapse                       | Check that the Synapse component used in a Projection element exists                                                                            |\n| Check root id                       | Check that the root Segment in a Cell morphology has id 0                                                                                       |\n\n3. simulators that import/translate NeuroML to their own internal formats.\n\n4. simulators that are supported through generation of simulator-NeuroML tools.\n\n5. export to other standardized formats which may allow simulation/analysis in other packages.\n\nEach simulation engine supports a different set of features that NeuroML users can take advantage of (Table 7). For example, the reference NeuroML and LEMS simulators, jNeuroML, jLEMS, and PyLEMS, can simulate all LEMS models and most NeuroML models. They cannot, however, simulate specific scripts by the core.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Table 6. Listing of validation tests run by NeuroML.","md":"# Table 6. Listing of validation tests run by NeuroML.","bBox":{"x":36.5,"y":51.79,"w":206.6,"h":23.18}},{"type":"table","rows":[["Test","Description"],["Schema tests","Schema tests"],["Check names","Check that names of all elements, attributes, parameters match those provided in the schema"],["Check types","Check that the types of all included elements"],["Check values","Check that values follow given restrictions"],["Check inclusion","Check that required elements are included"],["Check cardinality","Check the number of elements"],["Check hierarchy","Check that child/children elements are included in the correct parent elements"],["Check sequence order","Check that child/children elements are included in the correct order"],["Additional tests","Additional tests"],["Check top level ids","Check that top level (root) elements have unique ids"],["Check Network level ids","Check that child/children of the Network element have unique ids"],["Check Cell Segment ids","Check that all Segments in a Cell have unique ids"],["Check single Segment without parent","Check that only one Segment is without parents (the soma Segment)"],["Check SegmentGroup ids","Check that all SegmentGroups in a Cell have unique ids"],["Check Member segment ids exist","Check that Segments referred to in SegmentGroup Members exist"],["Check SegmentGroup definition","Check that SegmentGroups being referenced are defined"],["Check SegmentGroup definition order","Check that SegmentGroups are defined before being referenced"],["Check included SegmentGroups","Check that SegmentGroups referenced by Include elements of other SegmentGroups exist"],["Check numberInternalDivisions","Check that SegmentGroups define numberInternalDivisions (used by simulators to discretize unbranched branches into compartments for simulation)"],["Check included model files","Check that model files included by other files exist"],["Check Population component","Check that a component id provided to a Population exists"],["Check ion channel exists","Check that an ion channel used to define a ChannelDensity element exists"],["Check concentration model species","Check that the species used in ConcentrationModel elements are defined"],["Check Population size","Check that the size attribute of a PopulationList matches the number of defined Instances"],["Check Projection component","Check that Populations used in the Projection elements exist"],["Check Connection Segment","Check that the Segment used in Connection elements exist"],["Check Connection pre/post cells","Check that the pre- and post-synaptic cells used in Connection elements exist and are correctly specified"],["Check Synapse","Check that the Synapse component used in a Projection element exists"],["Check root id","Check that the root Segment in a Cell morphology has id 0"]],"md":"| Test                                | Description                                                                                                                                     |\n| ----------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| Schema tests                        | Schema tests                                                                                                                                    |\n| Check names                         | Check that names of all elements, attributes, parameters match those provided in the schema                                                     |\n| Check types                         | Check that the types of all included elements                                                                                                   |\n| Check values                        | Check that values follow given restrictions                                                                                                     |\n| Check inclusion                     | Check that required elements are included                                                                                                       |\n| Check cardinality                   | Check the number of elements                                                                                                                    |\n| Check hierarchy                     | Check that child/children elements are included in the correct parent elements                                                                  |\n| Check sequence order                | Check that child/children elements are included in the correct order                                                                            |\n| Additional tests                    | Additional tests                                                                                                                                |\n| Check top level ids                 | Check that top level (root) elements have unique ids                                                                                            |\n| Check Network level ids             | Check that child/children of the Network element have unique ids                                                                                |\n| Check Cell Segment ids              | Check that all Segments in a Cell have unique ids                                                                                               |\n| Check single Segment without parent | Check that only one Segment is without parents (the soma Segment)                                                                               |\n| Check SegmentGroup ids              | Check that all SegmentGroups in a Cell have unique ids                                                                                          |\n| Check Member segment ids exist      | Check that Segments referred to in SegmentGroup Members exist                                                                                   |\n| Check SegmentGroup definition       | Check that SegmentGroups being referenced are defined                                                                                           |\n| Check SegmentGroup definition order | Check that SegmentGroups are defined before being referenced                                                                                    |\n| Check included SegmentGroups        | Check that SegmentGroups referenced by Include elements of other SegmentGroups exist                                                            |\n| Check numberInternalDivisions       | Check that SegmentGroups define numberInternalDivisions (used by simulators to discretize unbranched branches into compartments for simulation) |\n| Check included model files          | Check that model files included by other files exist                                                                                            |\n| Check Population component          | Check that a component id provided to a Population exists                                                                                       |\n| Check ion channel exists            | Check that an ion channel used to define a ChannelDensity element exists                                                                        |\n| Check concentration model species   | Check that the species used in ConcentrationModel elements are defined                                                                          |\n| Check Population size               | Check that the size attribute of a PopulationList matches the number of defined Instances                                                       |\n| Check Projection component          | Check that Populations used in the Projection elements exist                                                                                    |\n| Check Connection Segment            | Check that the Segment used in Connection elements exist                                                                                        |\n| Check Connection pre/post cells     | Check that the pre- and post-synaptic cells used in Connection elements exist and are correctly specified                                       |\n| Check Synapse                       | Check that the Synapse component used in a Projection element exists                                                                            |\n| Check root id                       | Check that the root Segment in a Cell morphology has id 0                                                                                       |","isPerfectTable":true,"csv":"\"Test\",\"Description\"\n\"Schema tests\",\"Schema tests\"\n\"Check names\",\"Check that names of all elements, attributes, parameters match those provided in the schema\"\n\"Check types\",\"Check that the types of all included elements\"\n\"Check values\",\"Check that values follow given restrictions\"\n\"Check inclusion\",\"Check that required elements are included\"\n\"Check cardinality\",\"Check the number of elements\"\n\"Check hierarchy\",\"Check that child/children elements are included in the correct parent elements\"\n\"Check sequence order\",\"Check that child/children elements are included in the correct order\"\n\"Additional tests\",\"Additional tests\"\n\"Check top level ids\",\"Check that top level (root) elements have unique ids\"\n\"Check Network level ids\",\"Check that child/children of the Network element have unique ids\"\n\"Check Cell Segment ids\",\"Check that all Segments in a Cell have unique ids\"\n\"Check single Segment without parent\",\"Check that only one Segment is without parents (the soma Segment)\"\n\"Check SegmentGroup ids\",\"Check that all SegmentGroups in a Cell have unique ids\"\n\"Check Member segment ids exist\",\"Check that Segments referred to in SegmentGroup Members exist\"\n\"Check SegmentGroup definition\",\"Check that SegmentGroups being referenced are defined\"\n\"Check SegmentGroup definition order\",\"Check that SegmentGroups are defined before being referenced\"\n\"Check included SegmentGroups\",\"Check that SegmentGroups referenced by Include elements of other SegmentGroups exist\"\n\"Check numberInternalDivisions\",\"Check that SegmentGroups define numberInternalDivisions (used by simulators to discretize unbranched branches into compartments for simulation)\"\n\"Check included model files\",\"Check that model files included by other files exist\"\n\"Check Population component\",\"Check that a component id provided to a Population exists\"\n\"Check ion channel exists\",\"Check that an ion channel used to define a ChannelDensity element exists\"\n\"Check concentration model species\",\"Check that the species used in ConcentrationModel elements are defined\"\n\"Check Population size\",\"Check that the size attribute of a PopulationList matches the number of defined Instances\"\n\"Check Projection component\",\"Check that Populations used in the Projection elements exist\"\n\"Check Connection Segment\",\"Check that the Segment used in Connection elements exist\"\n\"Check Connection pre/post cells\",\"Check that the pre- and post-synaptic cells used in Connection elements exist and are correctly specified\"\n\"Check Synapse\",\"Check that the Synapse component used in a Projection element exists\"\n\"Check root id\",\"Check that the root Segment in a Cell morphology has id 0\"","bBox":{"x":36.5,"y":51.79,"w":532.5,"h":551.58}},{"type":"text","value":"3. simulators that import/translate NeuroML to their own internal formats.\n\n4. simulators that are supported through generation of simulator-NeuroML tools.\n\n5. export to other standardized formats which may allow simulation/analysis in other packages.\n\nEach simulation engine supports a different set of features that NeuroML users can take advantage of (Table 7). For example, the reference NeuroML and LEMS simulators, jNeuroML, jLEMS, and PyLEMS, can simulate all LEMS models and most NeuroML models. They cannot, however, simulate specific scripts by the core.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"3. simulators that import/translate NeuroML to their own internal formats.\n\n4. simulators that are supported through generation of simulator-NeuroML tools.\n\n5. export to other standardized formats which may allow simulation/analysis in other packages.\n\nEach simulation engine supports a different set of features that NeuroML users can take advantage of (Table 7). For example, the reference NeuroML and LEMS simulators, jNeuroML, jLEMS, and PyLEMS, can simulate all LEMS models and most NeuroML models. They cannot, however, simulate specific scripts by the core.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":635.5,"w":404,"h":83.99}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.572},{"page":18,"text":"                   Tools  and  resources                                                                                                                                                                                          Neuroscience\n                                                                a.\n                                                                b_        OPEN SOURCE BRAIN       search projects                                                                    My Projects  Explore OSB  Help  Admin  sanjay_ankur\n                                                                       MultiscalelSN                                                                                                     Return to project  Troubleshoot 3D explorer\n                                                                                  Connectivity  Model Description                                                                      Results    Run  Play   Pause    Stop    Help\n                                                                          Console     1 Experiments\n                                                                          Open Source Brain                                                                                                                                  padraig\n                                                                         NetPyNE     File    View     Model     Examples   Help                                                                          2BACK TO EDIT  SIMULATE\n                                                                      7        3D Representation                                                                                     Rate Spectrogram Plot  slicell:\n                                                                                                                                                                                                       cGID_L2JPyrRS\n                                                                           :       U\n                                                                                 5 0C                                                                                                                                       Golo\n                                                                                 5 Q\n                                                                                                                                                                                                        Cgjd supBesl        Gol\n                                                                           4                                                                                                                             CGJD_Suplts\n                                                                           ^                                                                                                         Raster plot\n                                                                                                                                                                                     8\n                                                                                                                                                                                     1\n                                                                                                                                                                                     3\n                                                                                                                                                                                                           100   150   200\n                                                                                                                                                                                                        Time(ms)\n                                                             Figure 8. Visualization of detailed neuronal morphology of neurons and networks together with their functional\n                                                             properties (results from model simulation) enabled by NeuroML. (a) Interactive 3-\n                                                                                                                                                                                                  D (VisPy (Campagnola, 2023)\n                                                             based) visualization of an olfactory bulb network with detailed mitral and granule cells (Migliore et al., 2014),\n                                                             generated using pyNeuroML. (b) Visualization of an inhibition stabilized network based on Sadeh et al., 2017\n                                                             using Open Source Brain (OSB) version 1 (Gleeson et al., 2019b). (c) Visualization of 3D network of simplified\n                                                             multi-\n                                                                      compartmental cortical neurons (from Traub et al., 2005, imported as NeuroML Gleeson, 2019a) and\n                                                             simulated spiking activity using NetPyNE’s GUI (Dura‐\n                                                                                                                                                    Bernal et al., 2019), which is embedded in OSB version 2.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                      18 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# a.\n\n# b. OPEN SOURCE BRAIN search projects\n\nMy Projects Explore OSB Help Admin sanjay_ankur\n\n# MultiscaleSN\n\nReturn to project Troubleshoot 3D explorer\n\n# Connectivity Model Description\n\nResults Run Play Pause Stop Help\n\nConsole 1 Experiments\n\n# Open Source Brain\n\npadraig\n\nFile View Model Examples Help\n\n# BACK TO EDIT SIMULATE\n\n# 3D Representation\n\nRate Spectrogram Plot slicell:\n\ncGID_L2JPyrRS\n\nU\n\n5 0C\n\n5 Q\n\n4\n\nGolo\n\nCgjd supBesl\n\nGol\n\nCGJD_Suplts\n\n# Raster plot\n\n100 150 200\n\nTime(ms)\n\nFigure 8. Visualization of detailed neuronal morphology of neurons and networks together with their functional properties (results from model simulation) enabled by NeuroML.\n\n(a) Interactive 3-D (VisPy (Campagnola, 2023) based) visualization of an olfactory bulb network with detailed mitral and granule cells (Migliore et al., 2014), generated using pyNeuroML.\n\n(b) Visualization of an inhibition stabilized network based on Sadeh et al., 2017 using Open Source Brain (OSB) version 1 (Gleeson et al., 2019b).\n\n(c) Visualization of 3D network of simplified multi-compartmental cortical neurons (from Traub et al., 2005, imported as NeuroML Gleeson, 2019a) and simulated spiking activity using NetPyNE’s GUI (Dura-Bernal et al., 2019), which is embedded in OSB version 2.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135\n\n18 of 44","images":[{"name":"img_p17_1.png","height":2444,"width":1664,"x":174.6401978,"y":60.07824710000011,"original_width":1664,"original_height":2444,"ocr":[{"x":8,"y":12,"w":30,"h":30,"confidence":0.38709071829313735,"text":"a."},{"x":8,"y":672,"w":30,"h":36,"confidence":0.7523503030648148,"text":"b_"},{"x":106,"y":678,"w":200,"h":32,"confidence":0.997564587974779,"text":"OPEN SOURCE BRAIN"},{"x":387,"y":687,"w":104,"h":18,"confidence":0.6400326351884104,"text":"search projects"},{"x":1163,"y":685,"w":82,"h":18,"confidence":0.9392407550486395,"text":"My Projects"},{"x":1287,"y":683,"w":88,"h":20,"confidence":0.8296843563456305,"text":"Explore OSB"},{"x":1399,"y":685,"w":38,"h":18,"confidence":0.844864846573144,"text":"Help"},{"x":1463,"y":687,"w":46,"h":16,"confidence":0.9999798480343641,"text":"Admin"},{"x":1535,"y":687,"w":92,"h":18,"confidence":0.6230053601811837,"text":"sanjay_ankur"},{"x":72,"y":742,"w":164,"h":30,"confidence":0.9664751195766754,"text":"MultiscalelSN"},{"x":1222,"y":748,"w":146,"h":24,"confidence":0.9784011647606977,"text":"Return to project"},{"x":1400,"y":748,"w":218,"h":24,"confidence":0.9436891796779634,"text":"Troubleshoot 3D explorer"},{"x":1173,"y":807,"w":54,"h":16,"confidence":0.9910507386587059,"text":"Results"},{"x":1285,"y":805,"w":30,"h":16,"confidence":0.999977012313251,"text":"Run"},{"x":1359,"y":805,"w":32,"h":16,"confidence":0.9921989440917969,"text":"Play"},{"x":1435,"y":805,"w":46,"h":16,"confidence":0.9968588596633351,"text":"Pause"},{"x":1525,"y":805,"w":34,"h":16,"confidence":0.999411940574646,"text":"Stop"},{"x":1601,"y":805,"w":36,"h":16,"confidence":0.5413387841337841,"text":"Help"},{"x":187,"y":813,"w":109,"h":27,"confidence":0.9999772185644333,"text":"Connectivity"},{"x":332,"y":814,"w":156,"h":24,"confidence":0.9238032079338783,"text":"Model Description"},{"x":105,"y":1475,"w":58,"h":16,"confidence":0.8688550358016753,"text":"Console"},{"x":229,"y":1473,"w":102,"h":21,"confidence":0.7147829859235608,"text":"1 Experiments "},{"x":107,"y":1523,"w":140,"h":18,"confidence":0.9999100734069507,"text":"Open Source Brain"},{"x":1585,"y":1523,"w":54,"h":18,"confidence":0.9999647202649181,"text":"padraig"},{"x":97,"y":1561,"w":62,"h":18,"confidence":0.9987733989822157,"text":"NetPyNE"},{"x":213,"y":1561,"w":28,"h":16,"confidence":0.9999995827674866,"text":"File"},{"x":295,"y":1561,"w":34,"h":16,"confidence":0.9999620318412781,"text":"View"},{"x":385,"y":1561,"w":44,"h":16,"confidence":0.9999381578368917,"text":"Model"},{"x":482,"y":1560,"w":65,"h":20,"confidence":0.9999828461717138,"text":"Examples"},{"x":599,"y":1560,"w":36,"h":19,"confidence":0.9999822974205017,"text":"Help"},{"x":1381,"y":1557,"w":22,"h":20,"confidence":0.8006689731752239,"text":"2"},{"x":1409,"y":1559,"w":88,"h":18,"confidence":0.9851276034928226,"text":"BACK TO EDIT"},{"x":1523,"y":1561,"w":68,"h":16,"confidence":0.998749769257666,"text":"SIMULATE"},{"x":161,"y":1597,"w":120,"h":21,"confidence":0.9451600192446634,"text":"3D Representation"},{"x":1175,"y":1599,"w":144,"h":18,"confidence":0.9957703981615909,"text":"Rate Spectrogram Plot"},{"x":1366,"y":1634,"w":28,"h":8,"confidence":0.32742351801663194,"text":"slicell:"},{"x":63,"y":1589,"w":14,"h":164,"confidence":0.14399810717441142,"text":"7"},{"x":1347,"y":1705,"w":66,"h":12,"confidence":0.1240992069439791,"text":"cGID_L2JPyrRS"},{"x":198,"y":1738,"w":24,"h":26,"confidence":0.10899290799601946,"text":"U"},{"x":174,"y":1764,"w":52,"h":26,"confidence":0.39071089029312134,"text":"5 0"},{"x":223,"y":1767,"w":20,"h":46,"confidence":0.30103025938865713,"text":"C"},{"x":1572,"y":1786,"w":22,"h":6,"confidence":0.13714218139648438,"text":"Golo"},{"x":172,"y":1788,"w":52,"h":28,"confidence":0.5379018187522888,"text":"5 Q"},{"x":110,"y":1756,"w":26,"h":138,"confidence":0.13161759209719381,"text":":"},{"x":1350,"y":1850,"w":60,"h":8,"confidence":0.13068233781559585,"text":"Cgjd supBesl"},{"x":1572,"y":1858,"w":22,"h":6,"confidence":0.21321425701797142,"text":"Gol"},{"x":113,"y":1901,"w":20,"h":26,"confidence":0.713016474519975,"text":"4"},{"x":1353,"y":1921,"w":58,"h":12,"confidence":0.3642948583357002,"text":"CGJD_Suplts"},{"x":113,"y":2013,"w":20,"h":28,"confidence":0.24854577086745966,"text":"^"},{"x":1175,"y":2019,"w":72,"h":18,"confidence":0.9430446317898238,"text":"Raster plot"},{"x":1173,"y":2043,"w":20,"h":30,"confidence":0.9830286758688125,"text":"8"},{"x":1175,"y":2073,"w":16,"h":82,"confidence":0.14145491167753566,"text":"1"},{"x":1175,"y":2155,"w":14,"h":38,"confidence":0.9986822180997166,"text":"3"},{"x":1401,"y":2385,"w":24,"h":14,"confidence":0.999880451037152,"text":"100"},{"x":1459,"y":2385,"w":26,"h":14,"confidence":0.9713656306266785,"text":"150"},{"x":1517,"y":2385,"w":26,"h":14,"confidence":0.9998427353541232,"text":"200"},{"x":1411,"y":2403,"w":36,"h":16,"confidence":0.9986070990562439,"text":"(ms)"},{"x":1375.105572809,"y":2398.211145618,"w":34.788854381999954,"h":23.577708763999908,"confidence":0.531109094619751,"text":"Time"}]}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":146.29,"h":406.21}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":217,"y":34.63,"w":357.63,"h":406.37}},{"type":"heading","lvl":1,"value":"a.","md":"# a.","bBox":{"x":176,"y":63,"w":6,"h":6}},{"type":"heading","lvl":1,"value":"b. OPEN SOURCE BRAIN search projects","md":"# b. OPEN SOURCE BRAIN search projects","bBox":{"x":197,"y":206,"w":83,"h":235}},{"type":"text","value":"My Projects Explore OSB Help Admin sanjay_ankur","md":"My Projects Explore OSB Help Admin sanjay_ankur","bBox":{"x":217,"y":207,"w":311,"h":234}},{"type":"heading","lvl":1,"value":"MultiscaleSN","md":"# MultiscaleSN","bBox":{"x":217,"y":435,"w":5,"h":6}},{"type":"text","value":"Return to project Troubleshoot 3D explorer","md":"Return to project Troubleshoot 3D explorer","bBox":{"x":217,"y":221,"w":307,"h":312}},{"type":"heading","lvl":1,"value":"Connectivity Model Description","md":"# Connectivity Model Description","bBox":{"x":215,"y":235,"w":65,"h":165}},{"type":"text","value":"Results Run Play Pause Stop Help\n\nConsole 1 Experiments","md":"Results Run Play Pause Stop Help\n\nConsole 1 Experiments","bBox":{"x":197,"y":208,"w":331,"h":317}},{"type":"heading","lvl":1,"value":"Open Source Brain","md":"# Open Source Brain","bBox":{"x":197,"y":206,"w":43,"h":235}},{"type":"text","value":"padraig\n\nFile View Model Examples Help","md":"padraig\n\nFile View Model Examples Help","bBox":{"x":221,"y":208,"w":307,"h":193}},{"type":"heading","lvl":1,"value":"BACK TO EDIT SIMULATE","md":"# BACK TO EDIT SIMULATE","bBox":{"x":217,"y":397,"w":301,"h":44}},{"type":"heading","lvl":1,"value":"3D Representation","md":"# 3D Representation","bBox":{"x":209,"y":405,"w":222,"h":128}},{"type":"text","value":"Rate Spectrogram Plot slicell:\n\ncGID_L2JPyrRS\n\nU\n\n5 0C\n\n5 Q\n\n4\n\nGolo\n\nCgjd supBesl\n\nGol\n\nCGJD_Suplts","md":"Rate Spectrogram Plot slicell:\n\ncGID_L2JPyrRS\n\nU\n\n5 0C\n\n5 Q\n\n4\n\nGolo\n\nCgjd supBesl\n\nGol\n\nCGJD_Suplts","bBox":{"x":198,"y":405,"w":321,"h":72}},{"type":"heading","lvl":1,"value":"Raster plot","md":"# Raster plot","bBox":{"x":428,"y":496,"w":16,"h":4}},{"type":"text","value":"100 150 200\n\nTime(ms)\n\nFigure 8. Visualization of detailed neuronal morphology of neurons and networks together with their functional properties (results from model simulation) enabled by NeuroML.\n\n(a) Interactive 3-D (VisPy (Campagnola, 2023) based) visualization of an olfactory bulb network with detailed mitral and granule cells (Migliore et al., 2014), generated using pyNeuroML.\n\n(b) Visualization of an inhibition stabilized network based on Sadeh et al., 2017 using Open Source Brain (OSB) version 1 (Gleeson et al., 2019b).\n\n(c) Visualization of 3D network of simplified multi-compartmental cortical neurons (from Traub et al., 2005, imported as NeuroML Gleeson, 2019a) and simulated spiking activity using NetPyNE’s GUI (Dura-Bernal et al., 2019), which is embedded in OSB version 2.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135\n\n18 of 44","md":"100 150 200\n\nTime(ms)\n\nFigure 8. Visualization of detailed neuronal morphology of neurons and networks together with their functional properties (results from model simulation) enabled by NeuroML.\n\n(a) Interactive 3-D (VisPy (Campagnola, 2023) based) visualization of an olfactory bulb network with detailed mitral and granule cells (Migliore et al., 2014), generated using pyNeuroML.\n\n(b) Visualization of an inhibition stabilized network based on Sadeh et al., 2017 using Open Source Brain (OSB) version 1 (Gleeson et al., 2019b).\n\n(c) Visualization of 3D network of simplified multi-compartmental cortical neurons (from Traub et al., 2005, imported as NeuroML Gleeson, 2019a) and simulated spiking activity using NetPyNE’s GUI (Dura-Bernal et al., 2019), which is embedded in OSB version 2.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135\n\n18 of 44","bBox":{"x":168.53,"y":206,"w":406.81,"h":548.76}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.977},{"page":19,"text":"                                                                                                                                   Tools  and  resources                                                                                                                                                                                                                                                                                                       Neuroscience\n                                                                                                                                                                                                                                                                                                                                                                                             a.  L23               b_  Chemical conns (number of conns)         70000\n                                                                                                                                                                                                                                                                                                                                                                                              HL23PYR_pop                  HL23PV_pop                           60000\n                                                                                                                                                                                                                                                                                                                                                                                              400 cells\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                50000\n                                                                                                                                                                                                                                                                                                                                                                                              HLZ3SST pop                 HLZBPYR_pop                           400001\n                                                                                                                                                                                                                                                                                                                                                                                                25 cells\n                                                                                                                                                                                                                                                                                                                                                                                                                          HLZ3SST_pop                           30000\n                                                                                                                                                                                                                                                                                                                                                                                              HLZ3VIP_pop                                                       20000\n                                                                                                                                                                                                                                                                                                                                                                                                40 cells                  HLZBVIP_pop                           10000\n                                                                                                                                                                                                                                                                                                                                                                                               HL23PV_pop          _pop\n                                                                                                                                                                                                                                                                                                                                                                                                35 cells                                  ~pop  _pop  '_pop\n                                                                                                                                                                                                                                                                                                                                                                                                                   HL23PV_  HL23PYR       HL23SST  HLZBVIP\n                                                                                                                                                                                                                                                                                                                                                                                                                                          postsynaptic\n                                                                                                                                                       Figure 9. Analysis and visualization of network connectivity from NeuroML model descriptions prior to simulation.  Figure 9. Analysis and visualization of network connectivity from NeuroML model descriptions prior to simulation.  Figure 9. Analysis and visualization of network connectivity from NeuroML model descriptions prior to simulation.\n                                                                                                                                                       Network connectivity schematic (a) and connectivity matrix (b) for a half scale implementation of the human layer  Network connectivity schematic (a) and connectivity matrix (b) for a half scale implementation of the human layer  Network connectivity schematic (a) and connectivity matrix (b) for a half scale implementation of the human layer\n                                                                                                                                                       2/3 cortical network model (Yao et al., 2022) generated using pyNeuroML.                                           2/3 cortical network model (Yao et al., 2022) generated using pyNeuroML.                                           2/3 cortical network model (Yao et al., 2022) generated using pyNeuroML.\n                                                                                                                                                       multi-                                                                                                             multi-                                                                                                             multi-\n                                                                                                                                                                                                                                                                                                                                                                                             compartmental models, and users should opt for a simulator that does, e.g., NEURON (Hines\n                                                                                                                                                       and Carnevale, 1997) or EDEN (Panagiotou et al., 2022).                                                            and Carnevale, 1997) or EDEN (Panagiotou et al., 2022).                                                            and Carnevale, 1997) or EDEN (Panagiotou et al., 2022).\n                                                                                                                                                                                                                                                                                                                                                                                             Another criteria that is relevant when choosing a simulation engine is the efﬁciency of simulation.\n                                                                                                                                                       Simulation engines implement different computing techniques—e.g., NetPyNE, Arbor, and EDEN                         Simulation engines implement different computing techniques—e.g., NetPyNE, Arbor, and EDEN                         Simulation engines implement different computing techniques—e.g., NetPyNE, Arbor, and EDEN\n                                                                                                                                                       support parallel execution on clusters and super computers via MPI—to enable simulation of large-                  support parallel execution on clusters and super computers via MPI—to enable simulation of large-                  support parallel execution on clusters and super computers via MPI—to enable simulation of large-\n                                                                                                                                                       scale models. Thus, for efﬁcient large-                                                                            scale models. Thus, for efﬁcient large-                                                                            scale models. Thus, for efﬁcient large- scale simulation, users may prefer one of these simulation\n                                                                                                                                                                                                                                                                                                                                                                                             engines.\n                                                                                                                                                                                                                                                                                                                                                                                             The preferred programming language for working with NeuroML is Python (Muller et al., 2015).\n                                                                                                                                                       A Python-                                                                                                          A Python-                                                                                                          A Python-\n                                                                                                                                                                                                                                                                                                                                                                                             based ecosystem ensures that automated simulation of models can easily be carried out\n                                                                                                                                                       either using scripts, or the command line tools. Utilities to enable the execution of simulations on               either using scripts, or the command line tools. Utilities to enable the execution of simulations on               either using scripts, or the command line tools. Utilities to enable the execution of simulations on\n                                                                                                                                                       dedicated supercomputing resources, such as the Neuroscience Gateway (NSG) (Sivagnanam, 2013;                      dedicated supercomputing resources, such as the Neuroscience Gateway (NSG) (Sivagnanam, 2013;                      dedicated supercomputing resources, such as the Neuroscience Gateway (NSG) (Sivagnanam, 2013;\nTable 7. Features supported by NeuroML in different simulation engines.                                                           Table 7. Features supported by NeuroML in different simulation engines.\nNote: the simulators themselves may support more features, but these have not been mapped onto by the NeuroML tools.              Note: the simulators themselves may support more features, but these have not been mapped onto by the NeuroML tools.\nAbstract cell models: abstract cell models included in the NeuroML standard (see Table 1). Single compartmental cells: neuronal   Abstract cell models: abstract cell models included in the NeuroML standard (see Table 1). Single compartmental cells: neuronal\nmodels that include a single compartment (these engines do not support multi-compartmental cells). Multiple compartmental cells:  models that include a single compartment (these engines do not support multi-compartmental cells). Multiple compartmental cells:\nneuronal models that include multiple compartments. Conductance-based models: models that support ionic conductances. Parallel    neuronal models that include multiple compartments. Conductance-based models: models that support ionic conductances. Parallel\nexecution: engines that support parallel execution using MPI/GPUs. Y: full support; N: no support; L: limited support in NeuroML  execution: engines that support parallel execution using MPI/GPUs. Y: full support; N: no support; L: limited support in NeuroML\ntoolchain.                                                                                                                        toolchain.\n                                                                                                                                                      Abstract cell                                                                                                                                                                                                                           Single compartment   Multiple compartment   Conductance- based   Parallel\nTool                                                                                                                              Tool                models                                                                                                                                                                                                                                  cells                cells                  models               execution\njNeuroML/pyNeuroML                                                                                                                jNeuroML/pyNeuroML  Y                                                                                                                                                                                                                                       Y                    N                      Y                    N\nNEURON                                                                                                                            NEURON              Y                                                                                                                                                                                                                                       Y                    Y                      Y                    N\nNetPyNE                                                                                                                           NetPyNE             Y                                                                                                                                                                                                                                       Y                    Y                      Y                    Y\nEDEN                                                                                                                              EDEN                Y                                                                                                                                                                                                                                       Y                    Y                      Y                    Y\nMOOSE                                                                                                                             MOOSE               Y                                                                                                                                                                                                                                       Y                    L                      Y                    N\nPyNN                                                                                                                              PyNN                Y                                                                                                                                                                                                                                       Y                    L                      L                    Y\nNEST                                                                                                                              NEST                Y                                                                                                                                                                                                                                       Y                    N                      N                    Y\nBrian2                                                                                                                            Brian2              Y                                                                                                                                                                                                                                       Y                    Y                      Y                    L\nArbor                                                                                                                             Arbor               L                                                                                                                                                                                                                                       Y                    Y                      L                    Y\n                                                                                                                                  Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                         19 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n|                                     |   | HL23PYR\\_pop | HL23PV\\_pop | HLZ3SST pop | HLZBPYR\\_pop | HLZ3SST\\_pop | HLZ3VIP\\_pop | HLZBVIP\\_pop |       |       |\n| ----------------------------------- | - | ------------ | ----------- | ----------- | ------------ | ------------ | ------------ | ------------ | ----- | ----- |\n| a. Chemical conns (number of conns) |   |              | 70000       | 60000       | 400 cells    | 50000        | 400001       | 25 cells     | 30000 | 20000 |\n|                                     |   | 35 cells     |             |             |              |              | 10000        |              |       |       |\n\nFigure 9. Analysis and visualization of network connectivity from NeuroML model descriptions prior to simulation. Network connectivity schematic (a) and connectivity matrix (b) for a half scale implementation of the human layer 2/3 cortical network model (Yao et al., 2022) generated using pyNeuroML.\n\nMulti-compartmental models, and users should opt for a simulator that does, e.g., NEURON (Hines and Carnevale, 1997) or EDEN (Panagiotou et al., 2022). Another criteria that is relevant when choosing a simulation engine is the efficiency of simulation. Simulation engines implement different computing techniques—e.g., NetPyNE, Arbor, and EDEN support parallel execution on clusters and super computers via MPI—to enable simulation of large-scale models. Thus, for efficient large-scale simulation, users may prefer one of these simulation engines.\n\nThe preferred programming language for working with NeuroML is Python (Muller et al., 2015). A Python-based ecosystem ensures that automated simulation of models can easily be carried out either using scripts, or the command line tools. Utilities to enable the execution of simulations on dedicated supercomputing resources, such as the Neuroscience Gateway (NSG) (Sivagnanam, 2013).\n\n# Table 7. Features supported by NeuroML in different simulation engines.\n\nNote: the simulators themselves may support more features, but these have not been mapped onto by the NeuroML tools.\n\n| Tool               | Abstract cell models | Single compartment cells | Multiple compartment cells | Conductance-based models | Parallel execution |\n| ------------------ | -------------------- | ------------------------ | -------------------------- | ------------------------ | ------------------ |\n| jNeuroML/pyNeuroML | Y                    | Y                        | N                          | Y                        | N                  |\n| NEURON             | Y                    | Y                        | Y                          | Y                        | N                  |\n| NetPyNE            | Y                    | Y                        | Y                          | Y                        | Y                  |\n| EDEN               | Y                    | Y                        | Y                          | Y                        | Y                  |\n| MOOSE              | Y                    | Y                        | L                          | Y                        | N                  |\n| PyNN               | Y                    | Y                        | L                          | L                        | Y                  |\n| NEST               | Y                    | Y                        | N                          | N                        | Y                  |\n| Brian2             | Y                    | Y                        | Y                          | Y                        | L                  |\n| Arbor              | L                    | Y                        | Y                          | L                        | Y                  |\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[{"name":"img_p18_1.png","height":777,"width":1653,"x":174.6391907,"y":60.03369140000001,"original_width":1653,"original_height":777,"ocr":[{"x":839,"y":13,"w":576,"h":40,"confidence":0.7414921096533602,"text":"Chemical conns (number of conns)"},{"x":8,"y":50,"w":32,"h":32,"confidence":0.9042456762417456,"text":"a."},{"x":278,"y":54,"w":58,"h":30,"confidence":0.9943501227383632,"text":"L23"},{"x":594,"y":46,"w":30,"h":34,"confidence":0.9832585537054961,"text":"b_"},{"x":1530,"y":48,"w":74,"h":28,"confidence":0.9139984660494472,"text":"70000"},{"x":688,"y":108,"w":140,"h":32,"confidence":0.5181341663907224,"text":"HL23PV_pop"},{"x":225,"y":129,"w":202,"h":36,"confidence":0.5297983280047305,"text":"HL23PYR_pop"},{"x":1530,"y":128,"w":72,"h":26,"confidence":0.9990121773810026,"text":"60000"},{"x":260,"y":158,"w":132,"h":30,"confidence":0.999601801329724,"text":"400 cells"},{"x":1528,"y":206,"w":76,"h":28,"confidence":0.9718848757980815,"text":"50000"},{"x":676,"y":250,"w":152,"h":30,"confidence":0.7254323792523915,"text":"HLZBPYR_pop"},{"x":1528,"y":286,"w":74,"h":26,"confidence":0.9980437561882133,"text":"40000"},{"x":151,"y":297,"w":202,"h":38,"confidence":0.61439624672081,"text":"HLZ3SST pop"},{"x":194,"y":326,"w":114,"h":30,"confidence":0.9964834324720027,"text":"25 cells"},{"x":1528,"y":364,"w":74,"h":26,"confidence":0.9959061930230844,"text":"30000"},{"x":1605,"y":269,"w":36,"h":134,"confidence":0.24267995335828754,"text":"1"},{"x":676,"y":390,"w":152,"h":30,"confidence":0.833799321354786,"text":"HLZ3SST_pop"},{"x":1528,"y":444,"w":76,"h":28,"confidence":0.8874956884893747,"text":"20000"},{"x":197,"y":465,"w":194,"h":38,"confidence":0.4601537442483004,"text":"HLZ3VIP_pop"},{"x":236,"y":494,"w":114,"h":30,"confidence":0.6344208327104639,"text":"40 cells"},{"x":682,"y":532,"w":146,"h":28,"confidence":0.7990617307145412,"text":"HLZBVIP_pop"},{"x":1528,"y":524,"w":74,"h":26,"confidence":0.9990701874212718,"text":"10000"},{"x":201,"y":633,"w":184,"h":36,"confidence":0.9544343077767584,"text":"HL23PV_pop"},{"x":236,"y":660,"w":114,"h":32,"confidence":0.7643983872555344,"text":"35 cells"},{"x":1019,"y":725,"w":219,"h":50,"confidence":0.9999944939476704,"text":"postsynaptic"},{"x":861.0582579729272,"y":655.4116515945855,"w":63.88348405414558,"h":3.176696810829071,"confidence":0.9503912925720215,"text":"_pop"},{"x":998.286093236459,"y":658.5144372945836,"w":68.42781352708198,"h":1.028874589167117,"confidence":0.6721391677856445,"text":"~pop"},{"x":1136.876524762228,"y":659.5012198097824,"w":70.24695047554405,"h":3.0024396195647114,"confidence":0.8866996765136719,"text":"_pop"},{"x":1275.5700282971497,"y":659.9420169782899,"w":72.8599434057005,"h":1.8840339565797422,"confidence":0.43058724745827504,"text":"'_pop"},{"x":780.2111456180002,"y":696.4222912360003,"w":98.57770876399968,"h":12.844582472000639,"confidence":0.8888884364417264,"text":"HL23PV_"},{"x":910.6107425767057,"y":702.2490049571052,"w":108.77851484658868,"h":19.498009914210343,"confidence":0.7730591544828254,"text":"HL23PYR"},{"x":1050.5640836827645,"y":702.2666175751878,"w":108.87183263447105,"h":18.533235150375504,"confidence":0.9638562080935249,"text":"HL23SST"},{"x":1196.5144372945836,"y":700.286093236459,"w":102.97112541083288,"h":17.57218647291802,"confidence":0.5914945112155641,"text":"HLZBVIP"}]}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":36.5,"y":34.79,"w":476.5,"h":678.59}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":314,"y":34.63,"w":260.63,"h":646.64}},{"type":"table","rows":[["","","HL23PYR_pop","HL23PV_pop","HLZ3SST pop","HLZBPYR_pop","HLZ3SST_pop","HLZ3VIP_pop","HLZBVIP_pop","",""],["a. Chemical conns (number of conns)","","","70000","60000","400 cells","50000","400001","25 cells","30000","20000"],["","","35 cells","","","","","10000","","",""]],"md":"|                                     |   | HL23PYR\\_pop | HL23PV\\_pop | HLZ3SST pop | HLZBPYR\\_pop | HLZ3SST\\_pop | HLZ3VIP\\_pop | HLZBVIP\\_pop |       |       |\n| ----------------------------------- | - | ------------ | ----------- | ----------- | ------------ | ------------ | ------------ | ------------ | ----- | ----- |\n| a. Chemical conns (number of conns) |   |              | 70000       | 60000       | 400 cells    | 50000        | 400001       | 25 cells     | 30000 | 20000 |\n|                                     |   | 35 cells     |             |             |              |              | 10000        |              |       |       |","isPerfectTable":true,"csv":"\"\",\"\",\"HL23PYR_pop\",\"HL23PV_pop\",\"HLZ3SST pop\",\"HLZBPYR_pop\",\"HLZ3SST_pop\",\"HLZ3VIP_pop\",\"HLZBVIP_pop\",\"\",\"\"\n\"a. Chemical conns (number of conns)\",\"\",\"\",\"70000\",\"60000\",\"400 cells\",\"50000\",\"400001\",\"25 cells\",\"30000\",\"20000\"\n\"\",\"\",\"35 cells\",\"\",\"\",\"\",\"\",\"10000\",\"\",\"\",\"\"","bBox":{"x":36.5,"y":34.63,"w":541.72,"h":720.13}},{"type":"text","value":"Figure 9. Analysis and visualization of network connectivity from NeuroML model descriptions prior to simulation. Network connectivity schematic (a) and connectivity matrix (b) for a half scale implementation of the human layer 2/3 cortical network model (Yao et al., 2022) generated using pyNeuroML.\n\nMulti-compartmental models, and users should opt for a simulator that does, e.g., NEURON (Hines and Carnevale, 1997) or EDEN (Panagiotou et al., 2022). Another criteria that is relevant when choosing a simulation engine is the efficiency of simulation. Simulation engines implement different computing techniques—e.g., NetPyNE, Arbor, and EDEN support parallel execution on clusters and super computers via MPI—to enable simulation of large-scale models. Thus, for efficient large-scale simulation, users may prefer one of these simulation engines.\n\nThe preferred programming language for working with NeuroML is Python (Muller et al., 2015). A Python-based ecosystem ensures that automated simulation of models can easily be carried out either using scripts, or the command line tools. Utilities to enable the execution of simulations on dedicated supercomputing resources, such as the Neuroscience Gateway (NSG) (Sivagnanam, 2013).","md":"Figure 9. Analysis and visualization of network connectivity from NeuroML model descriptions prior to simulation. Network connectivity schematic (a) and connectivity matrix (b) for a half scale implementation of the human layer 2/3 cortical network model (Yao et al., 2022) generated using pyNeuroML.\n\nMulti-compartmental models, and users should opt for a simulator that does, e.g., NEURON (Hines and Carnevale, 1997) or EDEN (Panagiotou et al., 2022). Another criteria that is relevant when choosing a simulation engine is the efficiency of simulation. Simulation engines implement different computing techniques—e.g., NetPyNE, Arbor, and EDEN support parallel execution on clusters and super computers via MPI—to enable simulation of large-scale models. Thus, for efficient large-scale simulation, users may prefer one of these simulation engines.\n\nThe preferred programming language for working with NeuroML is Python (Muller et al., 2015). A Python-based ecosystem ensures that automated simulation of models can easily be carried out either using scripts, or the command line tools. Utilities to enable the execution of simulations on dedicated supercomputing resources, such as the Neuroscience Gateway (NSG) (Sivagnanam, 2013).","bBox":{"x":36.5,"y":34.63,"w":538.13,"h":678.74}},{"type":"heading","lvl":1,"value":"Table 7. Features supported by NeuroML in different simulation engines.","md":"# Table 7. Features supported by NeuroML in different simulation engines.","bBox":{"x":36.5,"y":386.77,"w":476.5,"h":326.6}},{"type":"text","value":"Note: the simulators themselves may support more features, but these have not been mapped onto by the NeuroML tools.","md":"Note: the simulators themselves may support more features, but these have not been mapped onto by the NeuroML tools.","bBox":{"x":36.5,"y":476.77,"w":499,"h":236.61}},{"type":"table","rows":[["Tool","Abstract cell models","Single compartment cells","Multiple compartment cells","Conductance-based models","Parallel execution"],["jNeuroML/pyNeuroML","Y","Y","N","Y","N"],["NEURON","Y","Y","Y","Y","N"],["NetPyNE","Y","Y","Y","Y","Y"],["EDEN","Y","Y","Y","Y","Y"],["MOOSE","Y","Y","L","Y","N"],["PyNN","Y","Y","L","L","Y"],["NEST","Y","Y","N","N","Y"],["Brian2","Y","Y","Y","Y","L"],["Arbor","L","Y","Y","L","Y"]],"md":"| Tool               | Abstract cell models | Single compartment cells | Multiple compartment cells | Conductance-based models | Parallel execution |\n| ------------------ | -------------------- | ------------------------ | -------------------------- | ------------------------ | ------------------ |\n| jNeuroML/pyNeuroML | Y                    | Y                        | N                          | Y                        | N                  |\n| NEURON             | Y                    | Y                        | Y                          | Y                        | N                  |\n| NetPyNE            | Y                    | Y                        | Y                          | Y                        | Y                  |\n| EDEN               | Y                    | Y                        | Y                          | Y                        | Y                  |\n| MOOSE              | Y                    | Y                        | L                          | Y                        | N                  |\n| PyNN               | Y                    | Y                        | L                          | L                        | Y                  |\n| NEST               | Y                    | Y                        | N                          | N                        | Y                  |\n| Brian2             | Y                    | Y                        | Y                          | Y                        | L                  |\n| Arbor              | L                    | Y                        | Y                          | L                        | Y                  |","isPerfectTable":true,"csv":"\"Tool\",\"Abstract cell models\",\"Single compartment cells\",\"Multiple compartment cells\",\"Conductance-based models\",\"Parallel execution\"\n\"jNeuroML/pyNeuroML\",\"Y\",\"Y\",\"N\",\"Y\",\"N\"\n\"NEURON\",\"Y\",\"Y\",\"Y\",\"Y\",\"N\"\n\"NetPyNE\",\"Y\",\"Y\",\"Y\",\"Y\",\"Y\"\n\"EDEN\",\"Y\",\"Y\",\"Y\",\"Y\",\"Y\"\n\"MOOSE\",\"Y\",\"Y\",\"L\",\"Y\",\"N\"\n\"PyNN\",\"Y\",\"Y\",\"L\",\"L\",\"Y\"\n\"NEST\",\"Y\",\"Y\",\"N\",\"N\",\"Y\"\n\"Brian2\",\"Y\",\"Y\",\"Y\",\"Y\",\"L\"\n\"Arbor\",\"L\",\"Y\",\"Y\",\"L\",\"Y\"","bBox":{"x":36.5,"y":34.63,"w":541.72,"h":720.13}},{"type":"text","value":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":152,"y":576.99,"w":361,"h":136.38}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.409},{"page":20,"text":"            Tools  and  resources                                                                                                                                                                                                       Neuroscience\n                                                                                                                                                              a.              Search  Gallery API  Documentation  About NeuroML Home\n                                                                                                                                                                                        Layer 5b Pyramidal cell\n                                                                                                                                                                              Overview  Electrophysiology  Morphology  Computational Complexity\n                                                                                                                                                                                        Current Clamp Response\n                                                                                                                                                                       Protocol:             Stimulus: ALL\n                                                                                                                                                                Square (Long)\n                                                                                                                                                                  40.00\n                                                                                                                                                                  20.00\n                                                                                                                                                                  0.000\n                                                                                                                                                               0  -20.0\n                                                                                                                                                                   40,0\n                                                                                                                                                                  -60.0\n                                                                                                                                                                  -80.0\n                                                                                                                                                                   -100\n                                                                                                                                                                       0.008  290  580  870  1160  1450  1740  2030  2320  2610  2900  3250\n                                                                                                                                                                                                    Time (ms)\n                                                                                                                                                                  1.200\n                                                                                                                                                                  1.000\n                                                                                                                                                                3 0.800\n                                                                                                                                                                8 0.600\n                                                                                                                                                                  0.400\n                                                                                                                                                                  0.200\n                                                                                                                                                                  0.000\n                                                                                                                                                                  ~0.20\n                                                                                                                                                                       0.008  290  580  870  1160  1450  1740  2030  2320  2610  2900  3250\n                                                                                                                                                                                                    Time (ms)\n                                                                                                                                                               b.  1.0                                2⁸                    na_channel m tau\n                                                                                                                                                                 2 0.8                                2⁶                    na_channel h tau\n                                                                                                                                                                 9 0.6              na_channel m inf  8\n                                                                                                                                                                  10.4              na channel h inf  1⁴\n                                                                                                                                                                   0.2                                   2\n                                                                                                                                                                   0.0\n                                                                                                                                                                ~100   -50              50   100         -100   -50              50    100\n                                                                                                                                                                       Membrane potential (mV)                  Membrane potential (mV)\n                                                                                                                                                               C\n                                                                                                                                                                                                                                        140\n                                                                                                                                                                 100                                                                    120\n                                                                                                                                                                                                                                        100\n                                                                                                                                                               1                                                                        80 1\n                                                                                                                                                               7-100                                                                    60\n                                                                                                                                                                -200                                                                    40\n                                                                                                                                                                ~200               200       400    600        800   1000        1200   20\n                                                                                                                                                                                             x (pm)\n                                       Figure 10. Examples of visualizing biophysical properties of a NeuroML model neuron. (a) Electrophysiological          Figure 10. Examples of visualizing biophysical properties of a NeuroML model neuron. (a) Electrophysiological\n                                       properties generated by the NeuroML-                                                                                   properties generated by the NeuroML-\n                                                                                                                                                                                        DB web-\n                                                                                                                                                                                             based platform (Birgiolas et al., 2023). (Plots show four\n                                       superimposed voltage traces in the top panel and corresponding current injection traces below). (b) Example            superimposed voltage traces in the top panel and corresponding current injection traces below). (b) Example\n                                       plots of steady states of activation (na_channel na_m inf) and inactivation (na_channel na_h inf) variables and their  plots of steady states of activation (na_channel na_m inf) and inactivation (na_channel na_h inf) variables and their\n                                       time courses (na_channel na_m tau and na_channel na_h tau) for the Na channel from the classic Hodgkin Huxley          time courses (na_channel na_m tau and na_channel na_h tau) for the Na channel from the classic Hodgkin Huxley\n                                       model (Hodgkin and Huxley, 1952). (c) The distribution of the peak conductances for the Ih channel over a layer        model (Hodgkin and Huxley, 1952). (c) The distribution of the peak conductances for the Ih channel over a layer\n                                       5 Pyramidal cell (Hay et al., 2011). Both (b) and (c) were generated using the analysis features in pyNeuroML, and     5 Pyramidal cell (Hay et al., 2011). Both (b) and (c) were generated using the analysis features in pyNeuroML, and\n                                       similar functionality is also available in OSBv1 (Gleeson et al., 2019b).                                              similar functionality is also available in OSBv1 (Gleeson et al., 2019b).\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                   20 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Layer 5b Pyramidal cell\n\n# Overview\n\n# Electrophysiology\n\n# Morphology\n\n# Computational Complexity\n\n# Current Clamp Response\n\n| Protocol:     | Stimulus: | ALL   |\n| ------------- | --------- | ----- |\n| Square (Long) | 40.00     | 20.00 |\n| 0.000         | 0         | -20.0 |\n| 40.0          | -60.0     | -80.0 |\n| -100          | 0.008     | 290   |\n| 580           | 870       | 1160  |\n| 1450          | 1740      | 2030  |\n| 2320          | 2610      | 2900  |\n| 3250          | Time (ms) |       |\n\n| 1.0  | 2⁸               | na\\_channel m tau |\n| ---- | ---------------- | ----------------- |\n| 2    | 0.8              | 2⁶                |\n| 9    | 0.6              | na\\_channel m inf |\n| 10.4 | na channel h inf | 1⁴                |\n| 0.2  |                  | 2                 |\n| 0.0  |                  |                   |\n\n| \\~100 | -50 | 50  | 100 | -100 |\n| ----- | --- | --- | --- | ---- |\n| -50   | 50  | 100 |     |      |\n\n# Figure 10\n\nExamples of visualizing biophysical properties of a NeuroML model neuron. (a) Electrophysiological properties generated by the NeuroML-DB web-based platform (Birgiolas et al., 2023). (Plots show four superimposed voltage traces in the top panel and corresponding current injection traces below). (b) Example plots of steady states of activation (na_channel na_m inf) and inactivation (na_channel na_h inf) variables and their time courses (na_channel na_m tau and na_channel na_h tau) for the Na channel from the classic Hodgkin Huxley model (Hodgkin and Huxley, 1952). (c) The distribution of the peak conductances for the Ih channel over a layer 5 Pyramidal cell (Hay et al., 2011). Both (b) and (c) were generated using the analysis features in pyNeuroML, and similar functionality is also available in OSBv1 (Gleeson et al., 2019b).\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[{"name":"img_p19_1.png","height":2434,"width":1676,"x":174.640274,"y":60.11434930000007,"original_width":1676,"original_height":2434,"ocr":[{"x":4,"y":10,"w":30,"h":30,"confidence":0.38663028289177676,"text":"a."},{"x":448,"y":36,"w":88,"h":28,"confidence":0.999998685991112,"text":"Search"},{"x":565,"y":33,"w":91,"h":36,"confidence":0.9960148848311106,"text":"Gallery"},{"x":688,"y":38,"w":50,"h":28,"confidence":0.9986504537073545,"text":"API"},{"x":768,"y":38,"w":176,"h":26,"confidence":0.999914994312941,"text":"Documentation"},{"x":978,"y":38,"w":74,"h":26,"confidence":0.9999796347857942,"text":"About"},{"x":1082,"y":36,"w":186,"h":28,"confidence":0.7538212378365967,"text":"NeuroML Home"},{"x":665,"y":129,"w":374,"h":52,"confidence":0.9080789454159509,"text":"Layer 5b Pyramidal cell"},{"x":377,"y":242,"w":112,"h":28,"confidence":0.9999774934779861,"text":"Overview"},{"x":548,"y":237,"w":211,"h":40,"confidence":0.9996978964167635,"text":"Electrophysiology"},{"x":814,"y":237,"w":143,"h":40,"confidence":0.9999861650399355,"text":"Morphology"},{"x":1013,"y":241,"w":308,"h":36,"confidence":0.7183002371959668,"text":"Computational Complexity"},{"x":676,"y":347,"w":315,"h":37,"confidence":0.7580377825057857,"text":"Current Clamp Response"},{"x":326,"y":420,"w":104,"h":26,"confidence":0.9959127834394929,"text":"Protocol:"},{"x":761,"y":417,"w":169,"h":31,"confidence":0.7749464554901845,"text":"Stimulus: ALL"},{"x":174,"y":457,"w":170,"h":33,"confidence":0.9901945187325359,"text":"Square (Long)"},{"x":167,"y":517,"w":52,"h":20,"confidence":0.980881248533069,"text":"40.00"},{"x":164,"y":552,"w":56,"h":24,"confidence":0.9993775060396982,"text":"20.00"},{"x":164,"y":588,"w":56,"h":24,"confidence":0.9840717205926858,"text":"0.000"},{"x":171,"y":627,"w":48,"h":20,"confidence":0.34790036518869055,"text":"-20.0"},{"x":175,"y":665,"w":44,"h":20,"confidence":0.5831220746040344,"text":"40,0"},{"x":119,"y":643,"w":38,"h":85,"confidence":0.18088939530124382,"text":"0"},{"x":174,"y":700,"w":46,"h":24,"confidence":0.9921056554254292,"text":"-60.0"},{"x":174,"y":736,"w":46,"h":24,"confidence":0.9834584338846774,"text":"-80.0"},{"x":168,"y":772,"w":48,"h":24,"confidence":0.8998236656188965,"text":"-100"},{"x":204,"y":798,"w":56,"h":24,"confidence":0.9999398105212594,"text":"0.008"},{"x":330,"y":798,"w":40,"h":24,"confidence":0.9999971093289124,"text":"290"},{"x":448,"y":798,"w":40,"h":24,"confidence":0.9998966936162968,"text":"580"},{"x":566,"y":798,"w":40,"h":24,"confidence":0.9999863037349991,"text":"870"},{"x":680,"y":798,"w":48,"h":24,"confidence":0.977840692515664,"text":"1160"},{"x":796,"y":798,"w":50,"h":24,"confidence":0.9941369514595813,"text":"1450"},{"x":914,"y":798,"w":50,"h":24,"confidence":0.8634091343060648,"text":"1740"},{"x":1032,"y":798,"w":50,"h":24,"confidence":0.9999767541885376,"text":"2030"},{"x":1150,"y":798,"w":50,"h":24,"confidence":0.9999438622622162,"text":"2320"},{"x":1268,"y":798,"w":50,"h":24,"confidence":0.9999948143959045,"text":"2610"},{"x":1384,"y":798,"w":52,"h":24,"confidence":0.9995618172157716,"text":"2900"},{"x":1528,"y":798,"w":50,"h":24,"confidence":0.9999971389770508,"text":"3250"},{"x":846,"y":836,"w":92,"h":24,"confidence":0.990661929165229,"text":"Time (ms)"},{"x":169,"y":865,"w":50,"h":20,"confidence":0.9767103472477925,"text":"1.200"},{"x":168,"y":900,"w":52,"h":24,"confidence":0.9983839053017893,"text":"1.000"},{"x":164,"y":936,"w":56,"h":24,"confidence":0.9997951727622217,"text":"0.800"},{"x":124,"y":944,"w":28,"h":48,"confidence":0.7661341082721265,"text":"3"},{"x":164,"y":972,"w":56,"h":24,"confidence":0.9983719611219717,"text":"0.600"},{"x":123,"y":987,"w":28,"h":83,"confidence":0.2512788395893608,"text":"8"},{"x":164,"y":1010,"w":56,"h":24,"confidence":0.6144135380954883,"text":"0.400"},{"x":165,"y":1049,"w":54,"h":20,"confidence":0.7323941911323824,"text":"0.200"},{"x":164,"y":1084,"w":56,"h":24,"confidence":0.8592846841720532,"text":"0.000"},{"x":168,"y":1120,"w":52,"h":24,"confidence":0.5807960415246108,"text":"~0.20"},{"x":204,"y":1146,"w":56,"h":24,"confidence":0.9999598026453299,"text":"0.008"},{"x":330,"y":1146,"w":40,"h":24,"confidence":0.9999973158053815,"text":"290"},{"x":448,"y":1146,"w":40,"h":24,"confidence":0.9999682026796093,"text":"580"},{"x":566,"y":1146,"w":40,"h":24,"confidence":0.9999933239279907,"text":"870"},{"x":680,"y":1146,"w":48,"h":24,"confidence":0.9999155402183533,"text":"1160"},{"x":796,"y":1146,"w":50,"h":24,"confidence":0.9999166131019592,"text":"1450"},{"x":914,"y":1146,"w":50,"h":24,"confidence":0.9322310596037681,"text":"1740"},{"x":1032,"y":1146,"w":50,"h":24,"confidence":0.9999755024909973,"text":"2030"},{"x":1150,"y":1146,"w":50,"h":24,"confidence":0.7824346877611725,"text":"2320"},{"x":1268,"y":1146,"w":50,"h":24,"confidence":0.9999945163726807,"text":"2610"},{"x":1386,"y":1146,"w":50,"h":24,"confidence":0.9994129610612323,"text":"2900"},{"x":1528,"y":1146,"w":50,"h":24,"confidence":0.9999967217445374,"text":"3250"},{"x":846,"y":1184,"w":92,"h":24,"confidence":0.7808104752172829,"text":"Time (ms)"},{"x":4,"y":1286,"w":30,"h":36,"confidence":0.27666084400740376,"text":"b."},{"x":94,"y":1298,"w":48,"h":28,"confidence":0.9996802435052874,"text":"1.0"},{"x":1354,"y":1312,"w":256,"h":32,"confidence":0.8311567373706861,"text":"na_channel m tau"},{"x":915,"y":1341,"w":20,"h":26,"confidence":0.43374506784316785,"text":"8"},{"x":1354,"y":1354,"w":246,"h":30,"confidence":0.567486663357367,"text":"na_channel h tau"},{"x":57,"y":1379,"w":90,"h":62,"confidence":0.5269170435614616,"text":"2 0.8"},{"x":882,"y":1356,"w":28,"h":70,"confidence":0.9536034207928914,"text":"2"},{"x":880,"y":1428,"w":26,"h":52,"confidence":0.987833539143196,"text":"2"},{"x":914,"y":1430,"w":24,"h":28,"confidence":0.9999994039536411,"text":"6"},{"x":94,"y":1462,"w":48,"h":30,"confidence":0.9996583579612138,"text":"0.6"},{"x":60,"y":1458,"w":28,"h":80,"confidence":0.2769528064108364,"text":"9"},{"x":544,"y":1480,"w":250,"h":32,"confidence":0.913167723349938,"text":"na_channel m inf"},{"x":544,"y":1524,"w":40,"h":28,"confidence":0.9998511405763969,"text":"na"},{"x":593,"y":1520,"w":191,"h":32,"confidence":0.9861423220144335,"text":"channel h inf"},{"x":914,"y":1520,"w":24,"h":28,"confidence":0.9862370353421211,"text":"4"},{"x":94,"y":1546,"w":48,"h":28,"confidence":0.7015504147654306,"text":"0.4"},{"x":878,"y":1502,"w":32,"h":106,"confidence":0.7234003152030368,"text":"8"},{"x":56,"y":1538,"w":37,"h":107,"confidence":0.7504668891879227,"text":"1"},{"x":915,"y":1609,"w":20,"h":26,"confidence":0.999999880790714,"text":"2"},{"x":94,"y":1630,"w":48,"h":28,"confidence":0.6810931992153696,"text":"0.2"},{"x":876,"y":1608,"w":33,"h":77,"confidence":0.33291107299237765,"text":"1"},{"x":94,"y":1712,"w":50,"h":28,"confidence":0.5969793200492859,"text":"0.0"},{"x":168,"y":1776,"w":76,"h":28,"confidence":0.9607006907463074,"text":"~100"},{"x":320,"y":1776,"w":62,"h":30,"confidence":0.4201362613375481,"text":"-50"},{"x":620,"y":1776,"w":40,"h":30,"confidence":0.9998591481378435,"text":"50"},{"x":756,"y":1776,"w":58,"h":30,"confidence":0.9965471029281616,"text":"100"},{"x":960,"y":1776,"w":80,"h":30,"confidence":0.7239774465560913,"text":"-100"},{"x":1120,"y":1776,"w":60,"h":28,"confidence":0.6360544000682468,"text":"-50"},{"x":1432,"y":1776,"w":40,"h":30,"confidence":0.9999392247853806,"text":"50"},{"x":1574,"y":1776,"w":58,"h":30,"confidence":0.9999272517847363,"text":"100"},{"x":310,"y":1805,"w":371,"h":40,"confidence":0.9652320486621216,"text":"Membrane potential (mV)"},{"x":1117,"y":1805,"w":370,"h":40,"confidence":0.9849693292362683,"text":"Membrane potential (mV)"},{"x":4,"y":1890,"w":24,"h":28,"confidence":0.9441776318240613,"text":"C"},{"x":1584,"y":1934,"w":52,"h":30,"confidence":0.9999980040603199,"text":"140"},{"x":1584,"y":2002,"w":54,"h":28,"confidence":0.9999929798007293,"text":"120"},{"x":82,"y":2018,"w":52,"h":28,"confidence":0.9998913941268432,"text":"100"},{"x":1584,"y":2068,"w":54,"h":30,"confidence":0.9998962118443728,"text":"100"},{"x":30,"y":2108,"w":26,"h":64,"confidence":0.2044368620285617,"text":"1"},{"x":1584,"y":2136,"w":38,"h":28,"confidence":0.9999924135756967,"text":"80"},{"x":1636,"y":2108,"w":26,"h":86,"confidence":0.7033503985911835,"text":"1"},{"x":33,"y":2175,"w":22,"h":20,"confidence":0.24857221838125643,"text":"7"},{"x":62,"y":2194,"w":70,"h":26,"confidence":0.9934737682342529,"text":"-100"},{"x":1584,"y":2202,"w":38,"h":28,"confidence":0.9999957853177504,"text":"60"},{"x":1584,"y":2268,"w":36,"h":28,"confidence":0.9999988198884456,"text":"40"},{"x":62,"y":2280,"w":70,"h":28,"confidence":0.9064513451508764,"text":"-200"},{"x":160,"y":2342,"w":70,"h":26,"confidence":0.8067345023155212,"text":"~200"},{"x":520,"y":2342,"w":52,"h":28,"confidence":0.9995122495115281,"text":"200"},{"x":694,"y":2342,"w":52,"h":26,"confidence":0.9999936680552679,"text":"400"},{"x":870,"y":2342,"w":52,"h":28,"confidence":0.9997169948463408,"text":"600"},{"x":1044,"y":2342,"w":54,"h":28,"confidence":0.999943907415711,"text":"800"},{"x":1214,"y":2342,"w":68,"h":28,"confidence":0.9977885484695435,"text":"1000"},{"x":1388,"y":2342,"w":68,"h":28,"confidence":0.9999299049377441,"text":"1200"},{"x":1584,"y":2336,"w":36,"h":28,"confidence":0.9999980612455189,"text":"20"},{"x":760,"y":2372,"w":90,"h":30,"confidence":0.8051109308765705,"text":"x (pm)"}]}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":104.29,"h":436.21}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":175,"y":34.63,"w":399.63,"h":436.37}},{"type":"heading","lvl":1,"value":"Layer 5b Pyramidal cell","md":"# Layer 5b Pyramidal cell","bBox":{"x":175,"y":88,"w":222,"h":383}},{"type":"heading","lvl":1,"value":"Overview","md":"# Overview","bBox":{"x":255,"y":112,"w":24,"h":6}},{"type":"heading","lvl":1,"value":"Electrophysiology","md":"# Electrophysiology","bBox":{"x":175,"y":111,"w":162,"h":360}},{"type":"heading","lvl":1,"value":"Morphology","md":"# Morphology","bBox":{"x":349,"y":111,"w":31,"h":9}},{"type":"heading","lvl":1,"value":"Computational Complexity","md":"# Computational Complexity","bBox":{"x":175,"y":112,"w":282,"h":359}},{"type":"heading","lvl":1,"value":"Current Clamp Response","md":"# Current Clamp Response","bBox":{"x":175,"y":134,"w":211,"h":337}},{"type":"table","rows":[["Protocol:","Stimulus:","ALL"],["Square (Long)","40.00","20.00"],["0.000","0","-20.0"],["40.0","-60.0","-80.0"],["-100","0.008","290"],["580","870","1160"],["1450","1740","2030"],["2320","2610","2900"],["3250","Time (ms)",""]],"md":"| Protocol:     | Stimulus: | ALL   |\n| ------------- | --------- | ----- |\n| Square (Long) | 40.00     | 20.00 |\n| 0.000         | 0         | -20.0 |\n| 40.0          | -60.0     | -80.0 |\n| -100          | 0.008     | 290   |\n| 580           | 870       | 1160  |\n| 1450          | 1740      | 2030  |\n| 2320          | 2610      | 2900  |\n| 3250          | Time (ms) |       |","isPerfectTable":true,"csv":"\"Protocol:\",\"Stimulus:\",\"ALL\"\n\"Square (Long)\",\"40.00\",\"20.00\"\n\"0.000\",\"0\",\"-20.0\"\n\"40.0\",\"-60.0\",\"-80.0\"\n\"-100\",\"0.008\",\"290\"\n\"580\",\"870\",\"1160\"\n\"1450\",\"1740\",\"2030\"\n\"2320\",\"2610\",\"2900\"\n\"3250\",\"Time (ms)\",\"\"","bBox":{"x":37.01,"y":34.63,"w":538.33,"h":720.13}},{"type":"table","rows":[["1.0","2⁸","na_channel m tau"],["2","0.8","2⁶"],["9","0.6","na_channel m inf"],["10.4","na channel h inf","1⁴"],["0.2","","2"],["0.0","",""]],"md":"| 1.0  | 2⁸               | na\\_channel m tau |\n| ---- | ---------------- | ----------------- |\n| 2    | 0.8              | 2⁶                |\n| 9    | 0.6              | na\\_channel m inf |\n| 10.4 | na channel h inf | 1⁴                |\n| 0.2  |                  | 2                 |\n| 0.0  |                  |                   |","isPerfectTable":true,"csv":"\"1.0\",\"2⁸\",\"na_channel m tau\"\n\"2\",\"0.8\",\"2⁶\"\n\"9\",\"0.6\",\"na_channel m inf\"\n\"10.4\",\"na channel h inf\",\"1⁴\"\n\"0.2\",\"\",\"2\"\n\"0.0\",\"\",\"\"","bBox":{"x":37.01,"y":34.63,"w":538.33,"h":720.13}},{"type":"table","rows":[["~100","-50","50","100","-100"],["-50","50","100","",""]],"md":"| \\~100 | -50 | 50  | 100 | -100 |\n| ----- | --- | --- | --- | ---- |\n| -50   | 50  | 100 |     |      |","isPerfectTable":true,"csv":"\"~100\",\"-50\",\"50\",\"100\",\"-100\"\n\"-50\",\"50\",\"100\",\"\",\"\"","bBox":{"x":37.01,"y":34.63,"w":538.33,"h":720.13}},{"type":"heading","lvl":1,"value":"Figure 10","md":"# Figure 10","bBox":{"x":181,"y":198,"w":27,"h":327}},{"type":"text","value":"Examples of visualizing biophysical properties of a NeuroML model neuron. (a) Electrophysiological properties generated by the NeuroML-DB web-based platform (Birgiolas et al., 2023). (Plots show four superimposed voltage traces in the top panel and corresponding current injection traces below). (b) Example plots of steady states of activation (na_channel na_m inf) and inactivation (na_channel na_h inf) variables and their time courses (na_channel na_m tau and na_channel na_h tau) for the Na channel from the classic Hodgkin Huxley model (Hodgkin and Huxley, 1952). (c) The distribution of the peak conductances for the Ih channel over a layer 5 Pyramidal cell (Hay et al., 2011). Both (b) and (c) were generated using the analysis features in pyNeuroML, and similar functionality is also available in OSBv1 (Gleeson et al., 2019b).\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Examples of visualizing biophysical properties of a NeuroML model neuron. (a) Electrophysiological properties generated by the NeuroML-DB web-based platform (Birgiolas et al., 2023). (Plots show four superimposed voltage traces in the top panel and corresponding current injection traces below). (b) Example plots of steady states of activation (na_channel na_m inf) and inactivation (na_channel na_h inf) variables and their time courses (na_channel na_m tau and na_channel na_h tau) for the Na channel from the classic Hodgkin Huxley model (Hodgkin and Huxley, 1952). (c) The distribution of the peak conductances for the Ih channel over a layer 5 Pyramidal cell (Hay et al., 2011). Both (b) and (c) were generated using the analysis features in pyNeuroML, and similar functionality is also available in OSBv1 (Gleeson et al., 2019b).\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":198,"w":403,"h":447.93}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.546},{"page":21,"text":"           Tools  and  resourceseuroscience\n                                http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these        http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these        http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these        http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these        http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these        http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these        http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these\n                                to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.             to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.             to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.             to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.             to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.             to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.             to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.\n                                NetPyNE also includes parallel execution of simulations, batch processing, and parameter explora-         NetPyNE also includes parallel execution of simulations, batch processing, and parameter explora-         NetPyNE also includes parallel execution of simulations, batch processing, and parameter explora-         NetPyNE also includes parallel execution of simulations, batch processing, and parameter explora-         NetPyNE also includes parallel execution of simulations, batch processing, and parameter explora-         NetPyNE also includes parallel execution of simulations, batch processing, and parameter explora-         NetPyNE also includes parallel execution of simulations, batch processing, and parameter explora-\n                                tion features, and its deployment on OSBv2 allows users to easily access these features on a scal-        tion features, and its deployment on OSBv2 allows users to easily access these features on a scal-        tion features, and its deployment on OSBv2 allows users to easily access these features on a scal-        tion features, and its deployment on OSBv2 allows users to easily access these features on a scal-        tion features, and its deployment on OSBv2 allows users to easily access these features on a scal-        tion features, and its deployment on OSBv2 allows users to easily access these features on a scal-        tion features, and its deployment on OSBv2 allows users to easily access these features on a scal-\n                                able, cloud-                                                                                              able, cloud-                                                                                              able, cloud-                                                                                              able, cloud-                                                                                              able, cloud-                                                                                              able, cloud-                                                                                              able, cloud-\nbased platform. Finally, the JupyterLab environment on OSBv2 contains all of the core\n                                NeuroML tools and various simulation engines as pre-                                                      NeuroML tools and various simulation engines as pre-                                                      NeuroML tools and various simulation engines as pre-                                                      NeuroML tools and various simulation engines as pre-                                                      NeuroML tools and various simulation engines as pre-                                                      NeuroML tools and various simulation engines as pre-                                                      NeuroML tools and various simulation engines as pre-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             installed software packages, ready to use.\n                                Optimizing NeuroML models                                                                                 Optimizing NeuroML models                                                                                 Optimizing NeuroML models                                                                                 Optimizing NeuroML models                                                                                 Optimizing NeuroML models                                                                                 Optimizing NeuroML models                                                                                 Optimizing NeuroML models\n                                Development of biologically detailed models of brain function requires that components and emer           Development of biologically detailed models of brain function requires that components and emer           Development of biologically detailed models of brain function requires that components and emer           Development of biologically detailed models of brain function requires that components and emer           Development of biologically detailed models of brain function requires that components and emer           Development of biologically detailed models of brain function requires that components and emer           Development of biologically detailed models of brain function requires that components and emer -\n                                gent properties match the behavior of the corresponding biology as closely as possible. Thus, ﬁtting      gent properties match the behavior of the corresponding biology as closely as possible. Thus, ﬁtting      gent properties match the behavior of the corresponding biology as closely as possible. Thus, ﬁtting      gent properties match the behavior of the corresponding biology as closely as possible. Thus, ﬁtting      gent properties match the behavior of the corresponding biology as closely as possible. Thus, ﬁtting      gent properties match the behavior of the corresponding biology as closely as possible. Thus, ﬁtting      gent properties match the behavior of the corresponding biology as closely as possible. Thus, ﬁtting\n                                neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al.,     neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al.,     neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al.,     neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al.,     neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al.,     neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al.,     neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al.,\n                                2011;  Druckmann et  al., 2007). pyNeuroML promotes data-                                                 2011;  Druckmann et  al., 2007). pyNeuroML promotes data-                                                 2011;  Druckmann et  al., 2007). pyNeuroML promotes data-                                                 2011;  Druckmann et  al., 2007). pyNeuroML promotes data-                                                 2011;  Druckmann et  al., 2007). pyNeuroML promotes data-                                                 2011;  Druckmann et  al., 2007). pyNeuroML promotes data-                                                 2011;  Druckmann et  al., 2007). pyNeuroML promotes data- driven modeling by providing func-\n                                tions to ﬁt and optimize NeuroML models against experimental data. It includes the NeuroMLTuner           tions to ﬁt and optimize NeuroML models against experimental data. It includes the NeuroMLTuner           tions to ﬁt and optimize NeuroML models against experimental data. It includes the NeuroMLTuner           tions to ﬁt and optimize NeuroML models against experimental data. It includes the NeuroMLTuner           tions to ﬁt and optimize NeuroML models against experimental data. It includes the NeuroMLTuner           tions to ﬁt and optimize NeuroML models against experimental data. It includes the NeuroMLTuner           tions to ﬁt and optimize NeuroML models against experimental data. It includes the NeuroMLTuner\n                                module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on             module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on             module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on             module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on             module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on             module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on             module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on\n                                the Neurotune package (https://github.com/NeuralEnsemble/neurotune;  Vella and Gleeson, 2023)             the Neurotune package (https://github.com/NeuralEnsemble/neurotune;  Vella and Gleeson, 2023)             the Neurotune package (https://github.com/NeuralEnsemble/neurotune;  Vella and Gleeson, 2023)             the Neurotune package (https://github.com/NeuralEnsemble/neurotune;  Vella and Gleeson, 2023)             the Neurotune package (https://github.com/NeuralEnsemble/neurotune;  Vella and Gleeson, 2023)             the Neurotune package (https://github.com/NeuralEnsemble/neurotune;  Vella and Gleeson, 2023)             the Neurotune package (https://github.com/NeuralEnsemble/neurotune;  Vella and Gleeson, 2023)\n                                for tuning and optimizing NeuroML models against data using evolutionary computation techniques.          for tuning and optimizing NeuroML models against data using evolutionary computation techniques.          for tuning and optimizing NeuroML models against data using evolutionary computation techniques.          for tuning and optimizing NeuroML models against data using evolutionary computation techniques.          for tuning and optimizing NeuroML models against data using evolutionary computation techniques.          for tuning and optimizing NeuroML models against data using evolutionary computation techniques.          for tuning and optimizing NeuroML models against data using evolutionary computation techniques.\n                                This module allows users to select a set of weighted features from their data to calculate the ﬁtness     This module allows users to select a set of weighted features from their data to calculate the ﬁtness     This module allows users to select a set of weighted features from their data to calculate the ﬁtness     This module allows users to select a set of weighted features from their data to calculate the ﬁtness     This module allows users to select a set of weighted features from their data to calculate the ﬁtness     This module allows users to select a set of weighted features from their data to calculate the ﬁtness     This module allows users to select a set of weighted features from their data to calculate the ﬁtness\n                                of populations of candidate models. In each generation, the ﬁttest models are found and mutated to        of populations of candidate models. In each generation, the ﬁttest models are found and mutated to        of populations of candidate models. In each generation, the ﬁttest models are found and mutated to        of populations of candidate models. In each generation, the ﬁttest models are found and mutated to        of populations of candidate models. In each generation, the ﬁttest models are found and mutated to        of populations of candidate models. In each generation, the ﬁttest models are found and mutated to        of populations of candidate models. In each generation, the ﬁttest models are found and mutated to\n                                create the next generation of models, until a set of models that best exhibit the selected data features  create the next generation of models, until a set of models that best exhibit the selected data features  create the next generation of models, until a set of models that best exhibit the selected data features  create the next generation of models, until a set of models that best exhibit the selected data features  create the next generation of models, until a set of models that best exhibit the selected data features  create the next generation of models, until a set of models that best exhibit the selected data features  create the next generation of models, until a set of models that best exhibit the selected data features\n                                are isolated (see Guide 6 in                                                                              are isolated (see Guide 6 in                                                                              are isolated (see Guide 6 in                                                                              are isolated (see Guide 6 in                                                                              are isolated (see Guide 6 in                                                                              are isolated (see Guide 6 in                                                                              are isolated (see Guide 6 in\nable 5) (https://docs.neuroml.org/Userdocs/OptimisingNeuroMLModels.\nhtml).\nhe NeuroML ecosystem includes multiple tools that also provide model ﬁtting features. The Blue\n                                Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for        Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for        Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for        Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for        Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for        Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for        Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for\n                                data-                                                                                                     data-                                                                                                     data-                                                                                                     data-                                                                                                     data-                                                                                                     data-                                                                                                     data-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             driven model parameter optimization, supports exporting optimized models to NeuroML ﬁles\n                                (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar              (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar              (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar              (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar              (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar              (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar              (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar\n                                to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/             to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/             to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/             to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/             to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/             to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/             to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/\n                                inspyred; Sinha and Garrett, 2024) to provide evolutionary computation- based model optimization          inspyred; Sinha and Garrett, 2024) to provide evolutionary computation- based model optimization          inspyred; Sinha and Garrett, 2024) to provide evolutionary computation- based model optimization          inspyred; Sinha and Garrett, 2024) to provide evolutionary computation- based model optimization          inspyred; Sinha and Garrett, 2024) to provide evolutionary computation- based model optimization          inspyred; Sinha and Garrett, 2024) to provide evolutionary computation- based model optimization          inspyred; Sinha and Garrett, 2024) to provide evolutionary computation- based model optimization\nfeatures (Dura‐\nernal et al., 2019).\n                                Sharing NeuroML models                                                                                    Sharing NeuroML models                                                                                    Sharing NeuroML models                                                                                    Sharing NeuroML models                                                                                    Sharing NeuroML models                                                                                    Sharing NeuroML models                                                                                    Sharing NeuroML models\n                                The NeuroML ecosystem includes the advanced web-  based model sharing platforms NeuroML- DB               The NeuroML ecosystem includes the advanced web-  based model sharing platforms NeuroML- DB               The NeuroML ecosystem includes the advanced web-  based model sharing platforms NeuroML- DB               The NeuroML ecosystem includes the advanced web-  based model sharing platforms NeuroML- DB               The NeuroML ecosystem includes the advanced web-  based model sharing platforms NeuroML- DB               The NeuroML ecosystem includes the advanced web-  based model sharing platforms NeuroML- DB               The NeuroML ecosystem includes the advanced web-  based model sharing platforms NeuroML- DB\n                                (Birgiolas et al., 2023;  https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources        (Birgiolas et al., 2023;  https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources        (Birgiolas et al., 2023;  https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources        (Birgiolas et al., 2023;  https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources        (Birgiolas et al., 2023;  https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources        (Birgiolas et al., 2023;  https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources        (Birgiolas et al., 2023;  https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources\n                                have been designed speciﬁcally for the dissemination of models and model elements standardized            have been designed speciﬁcally for the dissemination of models and model elements standardized            have been designed speciﬁcally for the dissemination of models and model elements standardized            have been designed speciﬁcally for the dissemination of models and model elements standardized            have been designed speciﬁcally for the dissemination of models and model elements standardized            have been designed speciﬁcally for the dissemination of models and model elements standardized            have been designed speciﬁcally for the dissemination of models and model elements standardized\n                                in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of        in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of        in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of        in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of        in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of        in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of        in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of\n                                NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take          NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take          NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take          NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take          NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take          NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take          NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take\n                                advantage of the in-built automated visualization and analysis pipelines to explore and re-               advantage of the in-built automated visualization and analysis pipelines to explore and re-               advantage of the in-built automated visualization and analysis pipelines to explore and re-               advantage of the in-built automated visualization and analysis pipelines to explore and re-               advantage of the in-built automated visualization and analysis pipelines to explore and re-               advantage of the in-built automated visualization and analysis pipelines to explore and re-               advantage of the in-built automated visualization and analysis pipelines to explore and re-\nuse models\n                                and their components. Whereas version 1 (OSBv1) focused on providing an interactive 3D interface          and their components. Whereas version 1 (OSBv1) focused on providing an interactive 3D interface          and their components. Whereas version 1 (OSBv1) focused on providing an interactive 3D interface          and their components. Whereas version 1 (OSBv1) focused on providing an interactive 3D interface          and their components. Whereas version 1 (OSBv1) focused on providing an interactive 3D interface          and their components. Whereas version 1 (OSBv1) focused on providing an interactive 3D interface          and their components. Whereas version 1 (OSBv1) focused on providing an interactive 3D interface\n                                for running pre- existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson          for running pre- existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson          for running pre- existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson          for running pre- existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson          for running pre- existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson          for running pre- existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson          for running pre- existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson\n                                et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-               et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-               et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-               et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-               et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-               et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-               et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-\nbased\n                                computational models as well as analyze, and compare them to, the experimental data on which they         computational models as well as analyze, and compare them to, the experimental data on which they         computational models as well as analyze, and compare them to, the experimental data on which they         computational models as well as analyze, and compare them to, the experimental data on which they         computational models as well as analyze, and compare them to, the experimental data on which they         computational models as well as analyze, and compare them to, the experimental data on which they         computational models as well as analyze, and compare them to, the experimental data on which they\n                                are based, thus facilitating data-  driven computational modeling. Table  8 provides a list of stable,    are based, thus facilitating data-  driven computational modeling. Table  8 provides a list of stable,    are based, thus facilitating data-  driven computational modeling. Table  8 provides a list of stable,    are based, thus facilitating data-  driven computational modeling. Table  8 provides a list of stable,    are based, thus facilitating data-  driven computational modeling. Table  8 provides a list of stable,    are based, thus facilitating data-  driven computational modeling. Table  8 provides a list of stable,    are based, thus facilitating data-  driven computational modeling. Table  8 provides a list of stable,\n                                well-                                                                                                     well-                                                                                                     well-                                                                                                     well-                                                                                                     well-                                                                                                     well-                                                                                                     well-\ntested NeuroML compliant models from brain regions including the neocortex, cerebellum, and\n                                hippocampus, which have been shared on OSB.                                                               hippocampus, which have been shared on OSB.                                                               hippocampus, which have been shared on OSB.                                                               hippocampus, which have been shared on OSB.                                                               hippocampus, which have been shared on OSB.                                                               hippocampus, which have been shared on OSB.                                                               hippocampus, which have been shared on OSB.\neuroML-DB aims to promote the uptake of standardized NeuroML models by providing a conve-\n                                nient location for archiving and exploration. It includes advanced database search functions, including   nient location for archiving and exploration. It includes advanced database search functions, including   nient location for archiving and exploration. It includes advanced database search functions, including   nient location for archiving and exploration. It includes advanced database search functions, including   nient location for archiving and exploration. It includes advanced database search functions, including   nient location for archiving and exploration. It includes advanced database search functions, including   nient location for archiving and exploration. It includes advanced database search functions, including\n                                ontology-                                                                                                 ontology-                                                                                                 ontology-                                                                                                 ontology-                                                                                                 ontology-                                                                                                 ontology-                                                                                                 ontology-\nbased search (Birgiolas et al., 2015), coupled with pre-\ncomputed analyses on models’ elec-\n                                trophysiological and morphological properties, as well as an indication of the relative speed of execu-   trophysiological and morphological properties, as well as an indication of the relative speed of execu-   trophysiological and morphological properties, as well as an indication of the relative speed of execu-   trophysiological and morphological properties, as well as an indication of the relative speed of execu-   trophysiological and morphological properties, as well as an indication of the relative speed of execu-   trophysiological and morphological properties, as well as an indication of the relative speed of execu-   trophysiological and morphological properties, as well as an indication of the relative speed of execu-\n                                tion of different models.                                                                                 tion of different models.                                                                                 tion of different models.                                                                                 tion of different models.                                                                                 tion of different models.                                                                                 tion of different models.                                                                                 tion of different models.\neuroML’s modular nature ensures that models and their components can be easily shared with\n                                others through standard code sharing resources. The simplest way of sharing NeuroML models and            others through standard code sharing resources. The simplest way of sharing NeuroML models and            others through standard code sharing resources. The simplest way of sharing NeuroML models and            others through standard code sharing resources. The simplest way of sharing NeuroML models and            others through standard code sharing resources. The simplest way of sharing NeuroML models and            others through standard code sharing resources. The simplest way of sharing NeuroML models and            others through standard code sharing resources. The simplest way of sharing NeuroML models and\n                                components is to make their Python descriptions or their XML serializations available through these       components is to make their Python descriptions or their XML serializations available through these       components is to make their Python descriptions or their XML serializations available through these       components is to make their Python descriptions or their XML serializations available through these       components is to make their Python descriptions or their XML serializations available through these       components is to make their Python descriptions or their XML serializations available through these       components is to make their Python descriptions or their XML serializations available through these\n                                resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available  resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available  resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available  resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available  resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available  resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available  resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available\n                                via different ﬁle, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003;                   via different ﬁle, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003;                   via different ﬁle, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003;                   via different ﬁle, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003;                   via different ﬁle, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003;                   via different ﬁle, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003;                   via different ﬁle, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003; McDougal\n                                et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data     et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data     et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data     et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data     et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data     et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data     et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data\n                                produced in scientiﬁc investigations. Complex models with many components, spanning multiple ﬁles,        produced in scientiﬁc investigations. Complex models with many components, spanning multiple ﬁles,        produced in scientiﬁc investigations. Complex models with many components, spanning multiple ﬁles,        produced in scientiﬁc investigations. Complex models with many components, spanning multiple ﬁles,        produced in scientiﬁc investigations. Complex models with many components, spanning multiple ﬁles,        produced in scientiﬁc investigations. Complex models with many components, spanning multiple ﬁles,        produced in scientiﬁc investigations. Complex models with many components, spanning multiple ﬁles,\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLifeof 44","md":"# Tools and resources\n\n# Neuroscience\n\nhttp://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.\n\nNetPyNE also includes parallel execution of simulations, batch processing, and parameter exploration features, and its deployment on OSBv2 allows users to easily access these features on a scalable, cloud-based platform. Finally, the JupyterLab environment on OSBv2 contains all of the core NeuroML tools and various simulation engines as pre-installed software packages, ready to use.\n\n# Optimizing NeuroML models\n\nDevelopment of biologically detailed models of brain function requires that components and emergent properties match the behavior of the corresponding biology as closely as possible. Thus, fitting neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al., 2011; Druckmann et al., 2007). pyNeuroML promotes data-driven modeling by providing functions to fit and optimize NeuroML models against experimental data. It includes the NeuroMLTuner module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on the Neurotune package (https://github.com/NeuralEnsemble/neurotune; Vella and Gleeson, 2023) for tuning and optimizing NeuroML models against data using evolutionary computation techniques.\n\nThis module allows users to select a set of weighted features from their data to calculate the fitness of populations of candidate models. In each generation, the fittest models are found and mutated to create the next generation of models, until a set of models that best exhibit the selected data features are isolated (see Guide 6 in Table 5) (https://docs.neuroml.org/Userdocs/OptimisingNeuroMLModels.html).\n\nThe NeuroML ecosystem includes multiple tools that also provide model fitting features. The Blue Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for data-driven model parameter optimization, supports exporting optimized models to NeuroML files (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/inspyred; Sinha and Garrett, 2024) to provide evolutionary computation-based model optimization features (Dura-Bernal et al., 2019).\n\n# Sharing NeuroML models\n\nThe NeuroML ecosystem includes the advanced web-based model sharing platforms NeuroML-DB (Birgiolas et al., 2023; https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources have been designed specifically for the dissemination of models and model elements standardized in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take advantage of the in-built automated visualization and analysis pipelines to explore and reuse models and their components.\n\nWhereas version 1 (OSBv1) focused on providing an interactive 3D interface for running pre-existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-based computational models as well as analyze, and compare them to, the experimental data on which they are based, thus facilitating data-driven computational modeling. Table 8 provides a list of stable, well-tested NeuroML compliant models from brain regions including the neocortex, cerebellum, and hippocampus, which have been shared on OSB.\n\nNeuroML-DB aims to promote the uptake of standardized NeuroML models by providing a convenient location for archiving and exploration. It includes advanced database search functions, including ontology-based search (Birgiolas et al., 2015), coupled with pre-computed analyses on models’ electrophysiological and morphological properties, as well as an indication of the relative speed of execution of different models.\n\nNeuroML’s modular nature ensures that models and their components can be easily shared with others through standard code sharing resources. The simplest way of sharing NeuroML models and components is to make their Python descriptions or their XML serializations available through these resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available via different file, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003; McDougal et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data produced in scientific investigations. Complex models with many components, spanning multiple files, can be shared in this manner.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.\n\nNetPyNE also includes parallel execution of simulations, batch processing, and parameter exploration features, and its deployment on OSBv2 allows users to easily access these features on a scalable, cloud-based platform. Finally, the JupyterLab environment on OSBv2 contains all of the core NeuroML tools and various simulation engines as pre-installed software packages, ready to use.","md":"http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG.\n\nNetPyNE also includes parallel execution of simulations, batch processing, and parameter exploration features, and its deployment on OSBv2 allows users to easily access these features on a scalable, cloud-based platform. Finally, the JupyterLab environment on OSBv2 contains all of the core NeuroML tools and various simulation engines as pre-installed software packages, ready to use.","bBox":{"x":168.53,"y":51.8,"w":408.99,"h":475.66}},{"type":"heading","lvl":1,"value":"Optimizing NeuroML models","md":"# Optimizing NeuroML models","bBox":{"x":168.53,"y":137.14,"w":164,"h":12}},{"type":"text","value":"Development of biologically detailed models of brain function requires that components and emergent properties match the behavior of the corresponding biology as closely as possible. Thus, fitting neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al., 2011; Druckmann et al., 2007). pyNeuroML promotes data-driven modeling by providing functions to fit and optimize NeuroML models against experimental data. It includes the NeuroMLTuner module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on the Neurotune package (https://github.com/NeuralEnsemble/neurotune; Vella and Gleeson, 2023) for tuning and optimizing NeuroML models against data using evolutionary computation techniques.\n\nThis module allows users to select a set of weighted features from their data to calculate the fitness of populations of candidate models. In each generation, the fittest models are found and mutated to create the next generation of models, until a set of models that best exhibit the selected data features are isolated (see Guide 6 in Table 5) (https://docs.neuroml.org/Userdocs/OptimisingNeuroMLModels.html).\n\nThe NeuroML ecosystem includes multiple tools that also provide model fitting features. The Blue Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for data-driven model parameter optimization, supports exporting optimized models to NeuroML files (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/inspyred; Sinha and Garrett, 2024) to provide evolutionary computation-based model optimization features (Dura-Bernal et al., 2019).","md":"Development of biologically detailed models of brain function requires that components and emergent properties match the behavior of the corresponding biology as closely as possible. Thus, fitting neurons and networks to experimental data is a critical step in the model life cycle (Rossant et al., 2011; Druckmann et al., 2007). pyNeuroML promotes data-driven modeling by providing functions to fit and optimize NeuroML models against experimental data. It includes the NeuroMLTuner module (https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html), which builds on the Neurotune package (https://github.com/NeuralEnsemble/neurotune; Vella and Gleeson, 2023) for tuning and optimizing NeuroML models against data using evolutionary computation techniques.\n\nThis module allows users to select a set of weighted features from their data to calculate the fitness of populations of candidate models. In each generation, the fittest models are found and mutated to create the next generation of models, until a set of models that best exhibit the selected data features are isolated (see Guide 6 in Table 5) (https://docs.neuroml.org/Userdocs/OptimisingNeuroMLModels.html).\n\nThe NeuroML ecosystem includes multiple tools that also provide model fitting features. The Blue Brain Python Optimisation Library (BluePyOpt) (Van Geit et al., 2016), an extensible framework for data-driven model parameter optimization, supports exporting optimized models to NeuroML files (https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb). Similar to pyNeuroML, NetPyNE also uses the inspyred Python package (https://github.com/aarongarrett/inspyred; Sinha and Garrett, 2024) to provide evolutionary computation-based model optimization features (Dura-Bernal et al., 2019).","bBox":{"x":168.53,"y":137.14,"w":416,"h":390.32}},{"type":"heading","lvl":1,"value":"Sharing NeuroML models","md":"# Sharing NeuroML models","bBox":{"x":168.53,"y":406.48,"w":144,"h":12}},{"type":"text","value":"The NeuroML ecosystem includes the advanced web-based model sharing platforms NeuroML-DB (Birgiolas et al., 2023; https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources have been designed specifically for the dissemination of models and model elements standardized in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take advantage of the in-built automated visualization and analysis pipelines to explore and reuse models and their components.\n\nWhereas version 1 (OSBv1) focused on providing an interactive 3D interface for running pre-existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-based computational models as well as analyze, and compare them to, the experimental data on which they are based, thus facilitating data-driven computational modeling. Table 8 provides a list of stable, well-tested NeuroML compliant models from brain regions including the neocortex, cerebellum, and hippocampus, which have been shared on OSB.\n\nNeuroML-DB aims to promote the uptake of standardized NeuroML models by providing a convenient location for archiving and exploration. It includes advanced database search functions, including ontology-based search (Birgiolas et al., 2015), coupled with pre-computed analyses on models’ electrophysiological and morphological properties, as well as an indication of the relative speed of execution of different models.\n\nNeuroML’s modular nature ensures that models and their components can be easily shared with others through standard code sharing resources. The simplest way of sharing NeuroML models and components is to make their Python descriptions or their XML serializations available through these resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available via different file, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003; McDougal et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data produced in scientific investigations. Complex models with many components, spanning multiple files, can be shared in this manner.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"The NeuroML ecosystem includes the advanced web-based model sharing platforms NeuroML-DB (Birgiolas et al., 2023; https://neuroml-db.org) and OSB (Gleeson et al., 2019b). These resources have been designed specifically for the dissemination of models and model elements standardized in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take advantage of the in-built automated visualization and analysis pipelines to explore and reuse models and their components.\n\nWhereas version 1 (OSBv1) focused on providing an interactive 3D interface for running pre-existing NeuroML models (e.g. sourced from linked GitHub repositories) (Gleeson et al., 2019b), OSBv2 provides cloud-based workspaces for researchers to construct NeuroML-based computational models as well as analyze, and compare them to, the experimental data on which they are based, thus facilitating data-driven computational modeling. Table 8 provides a list of stable, well-tested NeuroML compliant models from brain regions including the neocortex, cerebellum, and hippocampus, which have been shared on OSB.\n\nNeuroML-DB aims to promote the uptake of standardized NeuroML models by providing a convenient location for archiving and exploration. It includes advanced database search functions, including ontology-based search (Birgiolas et al., 2015), coupled with pre-computed analyses on models’ electrophysiological and morphological properties, as well as an indication of the relative speed of execution of different models.\n\nNeuroML’s modular nature ensures that models and their components can be easily shared with others through standard code sharing resources. The simplest way of sharing NeuroML models and components is to make their Python descriptions or their XML serializations available through these resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available via different file, code (GitHub, GitLab), model sharing (ModelDB Migliore et al., 2003; McDougal et al., 2017), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data produced in scientific investigations. Complex models with many components, spanning multiple files, can be shared in this manner.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":153.14,"w":414.02,"h":542.27}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"http://www.nsgportal.org/","text":"http://www.nsgportal.org/) are also available within the ecosystem. OSBv1 takes advantage of these "},{"url":"https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html","text":""},{"url":"https://github.com/NeuralEnsemble/neurotune","text":""},{"url":"https://docs.neuroml.org/Userdocs/OptimisingNeuroMLModels.html","text":""},{"url":"https://docs.neuroml.org/Userdocs/OptimisingNeuroMLModels.html","text":"html)."},{"url":"https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb","text":""},{"url":"https://github.com/aarongarrett/inspyred","text":" "},{"url":"https://github.com/aarongarrett/inspyred","text":"inspyred; "},{"url":"https://neuroml-db.org/","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.171},{"page":22,"text":"                                                                                                                                                                                        Tools  and  resourceseuroscience\nTable 8. Listing of NeuroML models and example repositories. Table 8. Listing of NeuroML models and example repositories. Table 8. Listing of NeuroML models and example repositories. Table 8. Listing of NeuroML models and example repositories.\nModel                                                        Model                                                        Model                                                        Model                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Description                                                                                                                                                                                                            URL\nNeocortex                                                    Neocortex                                                    Neocortex                                                    Neocortex\n                                                                                                                                                                                                                       Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron                                               Morphologically detailed and point neuron\n                                                                                                                                                                                                                       models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/    models based on electrophysiological recordings  https://github.com/OpenSourceBrain/\nBilleh et al., 2020                                          Billeh et al., 2020                                          Billeh et al., 2020                                          Billeh et al., 2020             from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                              from visual cortex neurons                                                                                                                                                                                             AllenInstituteNeuroML\n                                                                                                                                                                                                                       Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between                                            Spiking network illustrating balance between\n                                                                                                                                                                                       Brunel, 2000                    excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                               excitation and inhibition                                                                                                                                                                                              https://github.com/OpenSourceBrain/Brunel2000\n                                                                                                                                                                                                                       Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by                                             Layer 5 pyramidal cell model constrained by        https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Hay et al., 2011                somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                                                        somatic and dendritic recordings                   L5bPyrCellHayEtAl2011                    L5bPyrCellHayEtAl2011                    L5bPyrCellHayEtAl2011                    L5bPyrCellHayEtAl2011                    L5bPyrCellHayEtAl2011\n                                                                                                                                                                                                                       Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/     Spiking neuron model reproducing wide range of  https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Izhikevich, 2004                neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                       neuronal activity                                                                                                                                                                                                      IzhikevichModel\n                                                                                                                                                                                                                       Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/  Cell models from Neocortical Microcircuit of Blue  https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Markram et al., 2015            Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                           Brain Project                                                                                                                                                                                                          BlueBrainProjectShowcase\nnbased models for different classes of cortical                                                                                                                                                                         https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Pospischil et al., 2008         and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                    and thalamic neurons                                                                                                                                                                                                   PospischilEtAl2008\nicrocircuit model of sensory cortex with 8                                                                                                                                                                            https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Potjans and Diesmann, 2014                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              populations across 4 layers                                                                                                                                                                                            PotjansDiesmann2014\nhttps://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Dura‐\n                                                                                                                                                                                       Bernal et alodel of mouse primary motor cortex (M1)                                                                                                                                                                             M1NetworkModel\noint neuron model of Inhibition Stabilized                                                                                                                                                                            https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Sadeh et al., 2017                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Network                                                                                                                                                                                                                SadehEtAl2017-InhibitionStabilizedNetworks\n                                                                                                                                                                                                                       Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/ Layer 2/3 cell model used to investigate dendritic  https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Smith et al., 2013              spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                  spikes                                                                                                                                                                                                                 SmithEtAl2013-L23DendriticSpikes\n                                                                                                                                                                                                                       Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                          Single column network model containing 14 cell                                                                                                                                                                         https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Traub et al., 2005              populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                    populations from cortex and thalamus                                                                                                                                                                                   Thalamocortical\n                                                                                                                                                                                                                       A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                            A set of reduced models of layer 5 pyramidal                                                                                                                                                                           https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Bahl et al., 2012               neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                 neurons                                                                                                                                                                                                                BahlEtAl2012_ReducedL5PyrCell\n                                                                                                                                                                                                                       A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-                                                                         A classic rate-\nbased model describing the\n                                                                                                                                                                                                                       dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/   dynamics and interactions between the excitatory  https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Wilson and Cowan, 1972          and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                   and inhibitory populations of neurons                                                                                                                                                                                  WilsonCowan\n                                                                                                                                                                                                                       Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-                                                                                   Rate-\nbased model showing paradoxical response\n                                                                                                                                                                                                                       reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-                                                                        reversal of top-\ndown modulation in cortical                        https://github.com/OpenSourceBrain/del-  https://github.com/OpenSourceBrain/del-  https://github.com/OpenSourceBrain/del-  https://github.com/OpenSourceBrain/del-  https://github.com/OpenSourceBrain/del-\n                                                                                                                                                                                       Garcia Del Molino et al., 2017  circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types                                                   circuits with three interneuron types              Molino2017                               Molino2017                               Molino2017                               Molino2017                               Molino2017\n                                                                                                                                                                                                                       A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-                                                                                 A rate-\nbased model simulating the dynamics of a\n                                                                                                                                                                                                                       cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:                                      cortical laminar structure across multiple scales:\n                                                                                                                                                                                                                       intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole                                        intralaminar, interlaminar, interareal and whole   https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Mejias et al., 2016             cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                                                                  cortex                                             MejiasEtAl2016                           MejiasEtAl2016                           MejiasEtAl2016                           MejiasEtAl2016                           MejiasEtAl2016\nCerebellum                                                   Cerebellum                                                   Cerebellum                                                   Cerebellum\nhttps://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/      https://github.com/OpenSourceBrain/\nMaex and Schutter, 1998                                      Maex and Schutter, 1998                                      Maex and Schutter, 1998                                      Maex and Schuttererebellar granule cell                            GranuleCell                              GranuleCell                              GranuleCell                              GranuleCell                              GranuleCell\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  https://github.com/SilverLabUCL/MF-GC-   https://github.com/SilverLabUCL/MF-GC-   https://github.com/SilverLabUCL/MF-GC-   https://github.com/SilverLabUCL/MF-GC-   https://github.com/SilverLabUCL/MF-GC-\n                                                                                                                                                                                       Cayco‐Gajic et al., 2017\nerebellar granule cell layer network              network-backprop-public                  network-backprop-public                  network-backprop-public                  network-backprop-public                  network-backprop-public\nhttps://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Maex and Schuttererebellar granule cell layer network                                                                                                                                                                               GranCellLayer\nhttps://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Solinas et alerebellar Golgi cell model                                                                                                                                                                                            SolinasEtAl-GolgiCell\n                                                                                                                                                                                                                       Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                            Electrically connected cerebellar Golgi cell                                                                                                                                                                           https://github.com/OpenSourceBrain/\n                                                                                                                                                                                       Vervaeke et al., 2010           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                           network model                                                                                                                                                                                                          VervaekeEtAl-GolgiCellNetwork\nHippocampus                                                  Hippocampus                                                  Hippocampus                                                  Hippocampus\nBezaire et al., 2016                                         Bezaire et al., 2016                                         Bezaire et al., 2016                                         Bezaire et al., 2016            Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                               Full scale network model of CA1 region of                                                                                                                                                                              https://github.com/mbezaire/ca1\n                                                                                                                                                                                                                       hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus                                                                             hippocampus\n                                                                                                                                                                                       Table 8 continued on next page\n                                                                                                                                                                                       Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLifeof 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Table 8. Listing of NeuroML models and example repositories.\n\n| Model                                                                                                                            |                                                                                           |                                                           |   |   |   |   |   |   |   |   |   |   | Description |                                          | URL                                            |\n| -------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | --------------------------------------------------------- | - | - | - | - | - | - | - | - | - | - | ----------- | ---------------------------------------- | ---------------------------------------------- |\n| Neocortex                                                                                                                        | Morphologically detailed and point neuron models based on electrophysiological recordings | https\\://github.com/OpenSourceBrain/                      |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| Billeh et al., 2020 from visual cortex neurons                                                                                   |                                                                                           |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          | AllenInstituteNeuroML                          |\n| Spiking network illustrating balance between excitation and inhibition                                                           | Brunel, 2000                                                                              |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          | https\\://github.com/OpenSourceBrain/Brunel2000 |\n| Layer 5 pyramidal cell model constrained by somatic and dendritic recordings                                                     | Hay et al., 2011                                                                          | https\\://github.com/OpenSourceBrain/L5bPyrCellHayEtAl2011 |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| Spiking neuron model reproducing wide range of neuronal activity                                                                 | https\\://github.com/OpenSourceBrain/IzhikevichModel                                       |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| Cell models from Neocortical Microcircuit of Blue Brain Project                                                                  | https\\://github.com/OpenSourceBrain/BlueBrainProjectShowcase                              |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| HH- based models for different classes of cortical and thalamic neurons                                                          | https\\://github.com/OpenSourceBrain/PospischilEtAl2008                                    |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| Microcircuit model of sensory cortex with 8 populations across 4 layers                                                          | https\\://github.com/OpenSourceBrain/PotjansDiesmann2014                                   |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n|                                                                                                                                  |                                                                                           |                                                           |   |   |   |   |   |   |   |   |   |   |             | Model of mouse primary motor cortex (M1) | M1NetworkModel                                 |\n| Point neuron model of Inhibition Stabilized Network                                                                              | https\\://github.com/OpenSourceBrain/SadehEtAl2017-InhibitionStabilizedNetworks            |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| Layer 2/3 cell model used to investigate dendritic spikes                                                                        | https\\://github.com/OpenSourceBrain/SmithEtAl2013-L23DendriticSpikes                      |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| Single column network model containing 14 cell populations from cortex and thalamus                                              |                                                                                           |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          | Thalamocortical                                |\n| A set of reduced models of layer 5 pyramidal neurons                                                                             | https\\://github.com/OpenSourceBrain/BahlEtAl2012\\_ReducedL5PyrCell                        |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| A classic rate-based model describing the dynamics and interactions between the excitatory and inhibitory populations of neurons | https\\://github.com/OpenSourceBrain/WilsonCowan                                           |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| Rate-based model showing paradoxical response reversal of top-down modulation in cortical circuits with three interneuron types  | https\\://github.com/OpenSourceBrain/del-Molino2017                                        |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n| A rate-based model simulating the dynamics of a cortical laminar structure across multiple scales                                | https\\://github.com/OpenSourceBrain/MejiasEtAl2016                                        |                                                           |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                |\n\n# Cerebellum\n\n| Model      |                         |                                                                   |   |   |   |   |   |   |   |   |   |   |   | Description                              |                                                             | URL |\n| ---------- | ----------------------- | ----------------------------------------------------------------- | - | - | - | - | - | - | - | - | - | - | - | ---------------------------------------- | ----------------------------------------------------------- | --- |\n| Cerebellum | Cerebellar granule cell | https\\://github.com/SilverLabUCL/MF-GC-                           |   |   |   |   |   |   |   |   |   |   |   |                                          |                                                             |     |\n|            |                         |                                                                   |   |   |   |   |   |   |   |   |   |   |   | Cerebellar granule cell layer network    | https\\://github.com/OpenSourceBrain/network-backprop-public |     |\n|            |                         |                                                                   |   |   |   |   |   |   |   |   |   |   |   | 3D Cerebellar granule cell layer network | https\\://github.com/OpenSourceBrain/GranCellLayer           |     |\n|            |                         |                                                                   |   |   |   |   |   |   |   |   |   |   |   | Cerebellar Golgi cell model              | https\\://github.com/OpenSourceBrain/SolinasEtAl-GolgiCell   |     |\n|            | network model           | https\\://github.com/OpenSourceBrain/VervaekeEtAl-GolgiCellNetwork |   |   |   |   |   |   |   |   |   |   |   |                                          |                                                             |     |\n\n# Hippocampus\n\n| Model       | Description                                           | URL                              |\n| ----------- | ----------------------------------------------------- | -------------------------------- |\n| Hippocampus | Full scale network model of CA1 region of hippocampus | https\\://github.com/mbezaire/ca1 |\n\nTable 8 continued on next page\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Table 8. Listing of NeuroML models and example repositories.","md":"# Table 8. Listing of NeuroML models and example repositories.","bBox":{"x":36.5,"y":57.3,"w":252.59,"h":23.17}},{"type":"table","rows":[["Model","","","","","","","","","","","","","Description","","URL"],["Neocortex","Morphologically detailed and point neuron models based on electrophysiological recordings","","","","","","","","","","","","","",""],["Billeh et al., 2020 from visual cortex neurons","","","","","","","","","","","","","","","AllenInstituteNeuroML"],["Spiking network illustrating balance between excitation and inhibition","Brunel, 2000","","","","","","","","","","","","","",""],["Layer 5 pyramidal cell model constrained by somatic and dendritic recordings","Hay et al., 2011","","","","","","","","","","","","","",""],["Spiking neuron model reproducing wide range of neuronal activity","","","","","","","","","","","","","","",""],["Cell models from Neocortical Microcircuit of Blue Brain Project","","","","","","","","","","","","","","",""],["HH- based models for different classes of cortical and thalamic neurons","","","","","","","","","","","","","","",""],["Microcircuit model of sensory cortex with 8 populations across 4 layers","","","","","","","","","","","","","","",""],["","","","","","","","","","","","","","","Model of mouse primary motor cortex (M1)","M1NetworkModel"],["Point neuron model of Inhibition Stabilized Network","","","","","","","","","","","","","","",""],["Layer 2/3 cell model used to investigate dendritic spikes","","","","","","","","","","","","","","",""],["Single column network model containing 14 cell populations from cortex and thalamus","","","","","","","","","","","","","","","Thalamocortical"],["A set of reduced models of layer 5 pyramidal neurons","","","","","","","","","","","","","","",""],["A classic rate-based model describing the dynamics and interactions between the excitatory and inhibitory populations of neurons","","","","","","","","","","","","","","",""],["Rate-based model showing paradoxical response reversal of top-down modulation in cortical circuits with three interneuron types","","","","","","","","","","","","","","",""],["A rate-based model simulating the dynamics of a cortical laminar structure across multiple scales","","","","","","","","","","","","","","",""]],"md":"| Model                                                                                                                            |                                                                                           |                                                            |   |   |   |   |   |   |   |   |   |   | Description |                                          | URL                                             |\n| -------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ---------------------------------------------------------- | - | - | - | - | - | - | - | - | - | - | ----------- | ---------------------------------------- | ----------------------------------------------- |\n| Neocortex                                                                                                                        | Morphologically detailed and point neuron models based on electrophysiological recordings | <https://github.com/OpenSourceBrain/>                      |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| Billeh et al., 2020 from visual cortex neurons                                                                                   |                                                                                           |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          | AllenInstituteNeuroML                           |\n| Spiking network illustrating balance between excitation and inhibition                                                           | Brunel, 2000                                                                              |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          | <https://github.com/OpenSourceBrain/Brunel2000> |\n| Layer 5 pyramidal cell model constrained by somatic and dendritic recordings                                                     | Hay et al., 2011                                                                          | <https://github.com/OpenSourceBrain/L5bPyrCellHayEtAl2011> |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| Spiking neuron model reproducing wide range of neuronal activity                                                                 | <https://github.com/OpenSourceBrain/IzhikevichModel>                                      |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| Cell models from Neocortical Microcircuit of Blue Brain Project                                                                  | <https://github.com/OpenSourceBrain/BlueBrainProjectShowcase>                             |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| HH- based models for different classes of cortical and thalamic neurons                                                          | <https://github.com/OpenSourceBrain/PospischilEtAl2008>                                   |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| Microcircuit model of sensory cortex with 8 populations across 4 layers                                                          | <https://github.com/OpenSourceBrain/PotjansDiesmann2014>                                  |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n|                                                                                                                                  |                                                                                           |                                                            |   |   |   |   |   |   |   |   |   |   |             | Model of mouse primary motor cortex (M1) | M1NetworkModel                                  |\n| Point neuron model of Inhibition Stabilized Network                                                                              | <https://github.com/OpenSourceBrain/SadehEtAl2017-InhibitionStabilizedNetworks>           |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| Layer 2/3 cell model used to investigate dendritic spikes                                                                        | <https://github.com/OpenSourceBrain/SmithEtAl2013-L23DendriticSpikes>                     |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| Single column network model containing 14 cell populations from cortex and thalamus                                              |                                                                                           |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          | Thalamocortical                                 |\n| A set of reduced models of layer 5 pyramidal neurons                                                                             | <https://github.com/OpenSourceBrain/BahlEtAl2012_ReducedL5PyrCell>                        |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| A classic rate-based model describing the dynamics and interactions between the excitatory and inhibitory populations of neurons | <https://github.com/OpenSourceBrain/WilsonCowan>                                          |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| Rate-based model showing paradoxical response reversal of top-down modulation in cortical circuits with three interneuron types  | <https://github.com/OpenSourceBrain/del-Molino2017>                                       |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |\n| A rate-based model simulating the dynamics of a cortical laminar structure across multiple scales                                | <https://github.com/OpenSourceBrain/MejiasEtAl2016>                                       |                                                            |   |   |   |   |   |   |   |   |   |   |             |                                          |                                                 |","isPerfectTable":false,"csv":"\"Model\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Description\",\"\",\"URL\"\n\"Neocortex\",\"Morphologically detailed and point neuron models based on electrophysiological recordings\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Billeh et al., 2020 from visual cortex neurons\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"AllenInstituteNeuroML\"\n\"Spiking network illustrating balance between excitation and inhibition\",\"Brunel, 2000\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Layer 5 pyramidal cell model constrained by somatic and dendritic recordings\",\"Hay et al., 2011\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Spiking neuron model reproducing wide range of neuronal activity\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Cell models from Neocortical Microcircuit of Blue Brain Project\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"HH- based models for different classes of cortical and thalamic neurons\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Microcircuit model of sensory cortex with 8 populations across 4 layers\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Model of mouse primary motor cortex (M1)\",\"M1NetworkModel\"\n\"Point neuron model of Inhibition Stabilized Network\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Layer 2/3 cell model used to investigate dendritic spikes\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Single column network model containing 14 cell populations from cortex and thalamus\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Thalamocortical\"\n\"A set of reduced models of layer 5 pyramidal neurons\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"A classic rate-based model describing the dynamics and interactions between the excitatory and inhibitory populations of neurons\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Rate-based model showing paradoxical response reversal of top-down modulation in cortical circuits with three interneuron types\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"A rate-based model simulating the dynamics of a cortical laminar structure across multiple scales\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"","bBox":{"x":36.5,"y":34.63,"w":538.83,"h":720.13}},{"type":"heading","lvl":1,"value":"Cerebellum","md":"# Cerebellum","bBox":{"x":36.63,"y":525.29,"w":42,"h":8}},{"type":"table","rows":[["Model","","","","","","","","","","","","","","Description","","URL"],["Cerebellum","Cerebellar granule cell","","","","","","","","","","","","","","",""],["","","","","","","","","","","","","","","Cerebellar granule cell layer network","",""],["","","","","","","","","","","","","","","3D Cerebellar granule cell layer network","",""],["","","","","","","","","","","","","","","Cerebellar Golgi cell model","",""],["","network model","","","","","","","","","","","","","","",""]],"md":"| Model      |                         |                                                                    |   |   |   |   |   |   |   |   |   |   |   | Description                              |                                                              | URL |\n| ---------- | ----------------------- | ------------------------------------------------------------------ | - | - | - | - | - | - | - | - | - | - | - | ---------------------------------------- | ------------------------------------------------------------ | --- |\n| Cerebellum | Cerebellar granule cell | <https://github.com/SilverLabUCL/MF-GC->                           |   |   |   |   |   |   |   |   |   |   |   |                                          |                                                              |     |\n|            |                         |                                                                    |   |   |   |   |   |   |   |   |   |   |   | Cerebellar granule cell layer network    | <https://github.com/OpenSourceBrain/network-backprop-public> |     |\n|            |                         |                                                                    |   |   |   |   |   |   |   |   |   |   |   | 3D Cerebellar granule cell layer network | <https://github.com/OpenSourceBrain/GranCellLayer>           |     |\n|            |                         |                                                                    |   |   |   |   |   |   |   |   |   |   |   | Cerebellar Golgi cell model              | <https://github.com/OpenSourceBrain/SolinasEtAl-GolgiCell>   |     |\n|            | network model           | <https://github.com/OpenSourceBrain/VervaekeEtAl-GolgiCellNetwork> |   |   |   |   |   |   |   |   |   |   |   |                                          |                                                              |     |","isPerfectTable":false,"csv":"\"Model\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Description\",\"\",\"URL\"\n\"Cerebellum\",\"Cerebellar granule cell\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Cerebellar granule cell layer network\",\"\",\"\"\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"3D Cerebellar granule cell layer network\",\"\",\"\"\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Cerebellar Golgi cell model\",\"\",\"\"\n\"\",\"network model\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"","bBox":{"x":36.5,"y":34.63,"w":538.83,"h":720.13}},{"type":"heading","lvl":1,"value":"Hippocampus","md":"# Hippocampus","bBox":{"x":36.67,"y":666.58,"w":227.83,"h":33.05}},{"type":"table","rows":[["Model","Description","URL"],["Hippocampus","Full scale network model of CA1 region of hippocampus",""]],"md":"| Model       | Description                                           | URL                               |\n| ----------- | ----------------------------------------------------- | --------------------------------- |\n| Hippocampus | Full scale network model of CA1 region of hippocampus | <https://github.com/mbezaire/ca1> |","isPerfectTable":false,"csv":"\"Model\",\"Description\",\"URL\"\n\"Hippocampus\",\"Full scale network model of CA1 region of hippocampus\",\"\"","bBox":{"x":36.5,"y":34.63,"w":538.83,"h":720.13}},{"type":"text","value":"Table 8 continued on next page\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Table 8 continued on next page\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":36.5,"y":705.75,"w":127,"h":9}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/OpenSourceBrain/AllenInstituteNeuroML","text":"https://github.com/OpenSourceBrain/ AllenInstituteNeuroML"},{"url":"https://github.com/OpenSourceBrain/AllenInstituteNeuroML","text":"AllenInstituteNeuroML"},{"url":"https://github.com/OpenSourceBrain/Brunel2000","text":"https://github.com/OpenSourceBrain/Brunel2000"},{"url":"https://github.com/OpenSourceBrain/L5bPyrCellHayEtAl2011","text":"https://github.com/OpenSourceBrain/ L5bPyrCellHayEtAl2011"},{"url":"https://github.com/OpenSourceBrain/L5bPyrCellHayEtAl2011","text":"L5bPyrCellHayEtAl2011"},{"url":"https://github.com/OpenSourceBrain/IzhikevichModel","text":"https://github.com/OpenSourceBrain/ IzhikevichModel"},{"url":"https://github.com/OpenSourceBrain/IzhikevichModel","text":"IzhikevichModel"},{"url":"https://github.com/OpenSourceBrain/BlueBrainProjectShowcase","text":"https://github.com/OpenSourceBrain/ BlueBrainProjectShowcase"},{"url":"https://github.com/OpenSourceBrain/BlueBrainProjectShowcase","text":"BlueBrainProjectShowcase"},{"url":"https://github.com/OpenSourceBrain/PospischilEtAl2008","text":"https://github.com/OpenSourceBrain/ PospischilEtAl2008"},{"url":"https://github.com/OpenSourceBrain/PospischilEtAl2008","text":"PospischilEtAl2008"},{"url":"https://github.com/OpenSourceBrain/PotjansDiesmann2014","text":"https://github.com/OpenSourceBrain/ PotjansDiesmann2014"},{"url":"https://github.com/OpenSourceBrain/PotjansDiesmann2014","text":"PotjansDiesmann2014"},{"url":"https://github.com/OpenSourceBrain/M1NetworkModel","text":"https://github.com/OpenSourceBrain/ M1NetworkModel"},{"url":"https://github.com/OpenSourceBrain/M1NetworkModel","text":"M1NetworkModel"},{"url":"https://github.com/OpenSourceBrain/SadehEtAl2017-InhibitionStabilizedNetworks","text":"https://github.com/OpenSourceBrain/ SadehEtAl2017-InhibitionStabilizedNetworks"},{"url":"https://github.com/OpenSourceBrain/SadehEtAl2017-InhibitionStabilizedNetworks","text":"SadehEtAl2017-InhibitionStabilizedNetworks"},{"url":"https://github.com/OpenSourceBrain/SmithEtAl2013-L23DendriticSpikes","text":"https://github.com/OpenSourceBrain/ SmithEtAl2013-L23DendriticSpikes"},{"url":"https://github.com/OpenSourceBrain/SmithEtAl2013-L23DendriticSpikes","text":"SmithEtAl2013-L23DendriticSpikes"},{"url":"https://github.com/OpenSourceBrain/Thalamocortical","text":"https://github.com/OpenSourceBrain/ Thalamocortical"},{"url":"https://github.com/OpenSourceBrain/Thalamocortical","text":"Thalamocortical"},{"url":"https://github.com/OpenSourceBrain/BahlEtAl2012_ReducedL5PyrCell","text":"https://github.com/OpenSourceBrain/ BahlEtAl2012_ReducedL5PyrCell"},{"url":"https://github.com/OpenSourceBrain/BahlEtAl2012_ReducedL5PyrCell","text":"BahlEtAl2012_ReducedL5PyrCell"},{"url":"https://github.com/OpenSourceBrain/WilsonCowan","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/WilsonCowan","text":"WilsonCowan"},{"url":"https://github.com/OpenSourceBrain/del-Molino2017","text":"https://github.com/OpenSourceBrain/del-"},{"url":"https://github.com/OpenSourceBrain/del-Molino2017","text":"Molino2017"},{"url":"https://github.com/OpenSourceBrain/MejiasEtAl2016","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/MejiasEtAl2016","text":"MejiasEtAl2016"},{"url":"https://github.com/OpenSourceBrain/GranuleCell","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/GranuleCell","text":"GranuleCell"},{"url":"https://github.com/SilverLabUCL/MF-GC-network-backprop-public","text":"https://github.com/SilverLabUCL/MF-GC-"},{"url":"https://github.com/SilverLabUCL/MF-GC-network-backprop-public","text":"network-backprop-public"},{"url":"https://github.com/OpenSourceBrain/GranCellLayer","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/GranCellLayer","text":"GranCellLayer"},{"url":"https://github.com/OpenSourceBrain/SolinasEtAl-GolgiCell","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/SolinasEtAl-GolgiCell","text":"SolinasEtAl-GolgiCell"},{"url":"https://github.com/OpenSourceBrain/VervaekeEtAl-GolgiCellNetwork","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/VervaekeEtAl-GolgiCellNetwork","text":"VervaekeEtAl-GolgiCellNetwork"},{"url":"https://github.com/mbezaire/ca1","text":"https://github.com/mbezaire/ca1"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.138},{"page":23,"text":"                                                                                                     Tools  and  resourceseuroscience\nTable 8 continued        Table 8 continued        Table 8 continued        Table 8 continued        Table 8 continued\nModel                    Model                    Model                    Model                    Modelescription                                                                                                                                                                                                                           URL\n                                                                                                                              Parvalbumin-                                                                            Parvalbumin-                                                                            Parvalbumin-                                                                            Parvalbumin-                                                                            Parvalbumin-                                                                            Parvalbumin-                                                                            Parvalbumin-                                                                            Parvalbumin-                                                                            Parvalbumin-                                                                            Parvalbumin-\npositive interneuron from CA1,                                                                                                                                                                                                        https://github.com/OpenSourceBrain/\n                                                                                                    Ferguson et al., 2013     based on Izhikevich cell model                                                          based on Izhikevich cell model                                                          based on Izhikevich cell model                                                          based on Izhikevich cell model                                                          based on Izhikevich cell model                                                          based on Izhikevich cell model                                                          based on Izhikevich cell model                                                          based on Izhikevich cell model                                                          based on Izhikevich cell model                                                          based on Izhikevich cell model                                                                                                                                                                                                        FergusonEtAl2013-PVFastFiringCell\n                                                                                                                              Pyramidal cell from CA1, based on Izhikevich cell                                       Pyramidal cell from CA1, based on Izhikevich cell                                       Pyramidal cell from CA1, based on Izhikevich cell                                       Pyramidal cell from CA1, based on Izhikevich cell                                       Pyramidal cell from CA1, based on Izhikevich cell                                       Pyramidal cell from CA1, based on Izhikevich cell                                       Pyramidal cell from CA1, based on Izhikevich cell                                       Pyramidal cell from CA1, based on Izhikevich cell                                       Pyramidal cell from CA1, based on Izhikevich cell                                       Pyramidal cell from CA1, based on Izhikevich cell                                                                                                                                                                                     https://github.com/OpenSourceBrain/\n                                                                                                    Ferguson et al., 2014     model                                                                                   model                                                                                   model                                                                                   model                                                                                   model                                                                                   model                                                                                   model                                                                                   model                                                                                   model                                                                                   model                                                                                                                                                                                                                                 FergusonEtAl2014-CA1PyrCell\n                                                                                                                              Multi-                                                                                  Multi-                                                                                  Multi-                                                                                  Multi-                                                                                  Multi-                                                                                  Multi-                                                                                  Multi-                                                                                  Multi-                                                                                  Multi-                                                                                  Multi-\ncompartmental model of pyramidal cell                                                                                                                                                                                                 https://github.com/OpenSourceBrain/\n                                                                                                    Migliore et al., 2005     from CA1 region of hippocampus                                                          from CA1 region of hippocampus                                                          from CA1 region of hippocampus                                                          from CA1 region of hippocampus                                                          from CA1 region of hippocampus                                                          from CA1 region of hippocampus                                                          from CA1 region of hippocampus                                                          from CA1 region of hippocampus                                                          from CA1 region of hippocampus                                                          from CA1 region of hippocampus                                                                                                                                                                                                        CA1PyramidalCell\nhttps://github.com/OpenSourceBrain/\n                                                                                                    Pinsky and Rinzelimplified model of CA3 pyramidal cell                                                                                                                                                                                                PinskyRinzelModel\n                                                                                                                              Hippocampal interneuronal network model                                                 Hippocampal interneuronal network model                                                 Hippocampal interneuronal network model                                                 Hippocampal interneuronal network model                                                 Hippocampal interneuronal network model                                                 Hippocampal interneuronal network model                                                 Hippocampal interneuronal network model                                                 Hippocampal interneuronal network model                                                 Hippocampal interneuronal network model                                                 Hippocampal interneuronal network model                                                                                                                                                                                               https://github.com/OpenSourceBrain/\n                                                                                                    Wang and Buzsáki, 1996    exhibiting gamma oscillations                                                           exhibiting gamma oscillations                                                           exhibiting gamma oscillations                                                           exhibiting gamma oscillations                                                           exhibiting gamma oscillations                                                           exhibiting gamma oscillations                                                           exhibiting gamma oscillations                                                           exhibiting gamma oscillations                                                           exhibiting gamma oscillations                                                           exhibiting gamma oscillations                                                                                                                                                                                                         WangBuzsaki1996\nOlfactory bulb           Olfactory bulb           Olfactory bulb           Olfactory bulb           Olfactory bulb\n                                                                                                                              Large-                                                                                  Large-                                                                                  Large-                                                                                  Large-                                                                                  Large-                                                                                  Large-                                                                                  Large-                                                                                  Large-                                                                                  Large-                                                                                  Large-\nscale 3D olfactory bulb network with              https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/\nMigliore et al., 2014    Migliore et al., 2014    Migliore et al., 2014    Migliore et al., 2014    Migliore et al., 2014     detailed mitral cells and granule cells                                                 detailed mitral cells and granule cells                                                 detailed mitral cells and granule cells                                                 detailed mitral cells and granule cells                                                 detailed mitral cells and granule cells                                                 detailed mitral cells and granule cells                                                 detailed mitral cells and granule cells                                                 detailed mitral cells and granule cells                                                 detailed mitral cells and granule cells                                                 detailed mitral cells and granule cells           MiglioreEtAl14_OlfactoryBulb3D               MiglioreEtAl14_OlfactoryBulb3D               MiglioreEtAl14_OlfactoryBulb3D               MiglioreEtAl14_OlfactoryBulb3D               MiglioreEtAl14_OlfactoryBulb3D\nInvertebrate             Invertebrate             Invertebrate             Invertebrate             Invertebrate\n                                                                                                                              Classic investigation of the ionic basis of the                                         Classic investigation of the ionic basis of the                                         Classic investigation of the ionic basis of the                                         Classic investigation of the ionic basis of the                                         Classic investigation of the ionic basis of the                                         Classic investigation of the ionic basis of the                                         Classic investigation of the ionic basis of the                                         Classic investigation of the ionic basis of the                                         Classic investigation of the ionic basis of the                                         Classic investigation of the ionic basis of the   https://github.com/openworm/hodgkin_huxley_  https://github.com/openworm/hodgkin_huxley_  https://github.com/openworm/hodgkin_huxley_  https://github.com/openworm/hodgkin_huxley_  https://github.com/openworm/hodgkin_huxley_\nHodgkin and Huxley, 1952 Hodgkin and Huxley, 1952 Hodgkin and Huxley, 1952 Hodgkin and Huxley, 1952 Hodgkin and Huxley, 1952  action potential                                                                        action potential                                                                        action potential                                                                        action potential                                                                        action potential                                                                        action potential                                                                        action potential                                                                        action potential                                                                        action potential                                                                        action potential                                  tutorial                                     tutorial                                     tutorial                                     tutorial                                     tutorial\nhttps://github.com/OpenSourceBrain/FitzHugh- https://github.com/OpenSourceBrain/FitzHugh- https://github.com/OpenSourceBrain/FitzHugh- https://github.com/OpenSourceBrain/FitzHugh- https://github.com/OpenSourceBrain/FitzHugh-\n                                                                                                    FitzHughimplified form of Hodgkin Huxley model           Nagumo                                       Nagumo                                       Nagumo                                       Nagumo                                       Nagumo\n                                                                                                                              Pyloric network of the lobster stomatogastric                                           Pyloric network of the lobster stomatogastric                                           Pyloric network of the lobster stomatogastric                                           Pyloric network of the lobster stomatogastric                                           Pyloric network of the lobster stomatogastric                                           Pyloric network of the lobster stomatogastric                                           Pyloric network of the lobster stomatogastric                                           Pyloric network of the lobster stomatogastric                                           Pyloric network of the lobster stomatogastric                                           Pyloric network of the lobster stomatogastric     https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/\n                                                                                                    Prinz et al., 2004        ganglion system                                                                         ganglion system                                                                         ganglion system                                                                         ganglion system                                                                         ganglion system                                                                         ganglion system                                                                         ganglion system                                                                         ganglion system                                                                         ganglion system                                                                         ganglion system                                   PyloricNetwork                               PyloricNetwork                               PyloricNetwork                               PyloricNetwork                               PyloricNetwork\n                                                                                                    Boyle and Cohenodel of body wall muscle from C. elegans                                                                                                                                                                                             https://github.com/openworm/muscle_model\n                                                                                                                              A multiscale framework for modeling the nervous                                         A multiscale framework for modeling the nervous                                         A multiscale framework for modeling the nervous                                         A multiscale framework for modeling the nervous                                         A multiscale framework for modeling the nervous                                         A multiscale framework for modeling the nervous                                         A multiscale framework for modeling the nervous                                         A multiscale framework for modeling the nervous                                         A multiscale framework for modeling the nervous                                         A multiscale framework for modeling the nervous\n                                                                                                    Gleeson et al., 2018      system of C. elegans                                                                    system of C. elegans                                                                    system of C. elegans                                                                    system of C. elegans                                                                    system of C. elegans                                                                    system of C. elegans                                                                    system of C. elegans                                                                    system of C. elegans                                                                    system of C. elegans                                                                    system of C. elegans                                                                                                                                                                                                                  https://github.com/openworm/c302\nGeneral                  General                  General                  General                  General\n                                                                                                                              Two dimensional reduced neuron model with                                               Two dimensional reduced neuron model with                                               Two dimensional reduced neuron model with                                               Two dimensional reduced neuron model with                                               Two dimensional reduced neuron model with                                               Two dimensional reduced neuron model with                                               Two dimensional reduced neuron model with                                               Two dimensional reduced neuron model with                                               Two dimensional reduced neuron model with                                               Two dimensional reduced neuron model with         https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/          https://github.com/OpenSourceBrain/\nMorris and Lecar, 1981   Morris and Lecar, 1981   Morris and Lecar, 1981   Morris and Lecar, 1981   Morris and Lecar, 1981    calcium and potassium conductances                                                      calcium and potassium conductances                                                      calcium and potassium conductances                                                      calcium and potassium conductances                                                      calcium and potassium conductances                                                      calcium and potassium conductances                                                      calcium and potassium conductances                                                      calcium and potassium conductances                                                      calcium and potassium conductances                                                      calcium and potassium conductances                MorrisLecarModel                             MorrisLecarModel                             MorrisLecarModel                             MorrisLecarModel                             MorrisLecarModel\n                                                                                                                              A simplified point cell model which captures                                            A simplified point cell model which captures                                            A simplified point cell model which captures                                            A simplified point cell model which captures                                            A simplified point cell model which captures                                            A simplified point cell model which captures                                            A simplified point cell model which captures                                            A simplified point cell model which captures                                            A simplified point cell model which captures                                            A simplified point cell model which captures\n                                                                                                                              complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/ complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/ complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/ complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/ complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/ complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/ complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/ complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/ complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/ complex firing patterns of single neurons, such as  https://github.com/OpenSourceBrain/\n                                                                                                    Hindmarsh and Rose, 1984  periodic and chaotic bursting                                                           periodic and chaotic bursting                                                           periodic and chaotic bursting                                                           periodic and chaotic bursting                                                           periodic and chaotic bursting                                                           periodic and chaotic bursting                                                           periodic and chaotic bursting                                                           periodic and chaotic bursting                                                           periodic and chaotic bursting                                                           periodic and chaotic bursting                                                                                                                                                                                                         HindmarshRose1984\nShowcases                Showcases                Showcases                Showcases                Showcases\nhttps://github.com/OpenSourceBrain/\nNEST Showcase            NEST Showcase            NEST Showcase            NEST Showcase            NEST Showcasexamples of interactions with simulator NEST                                                                                                                                                                                          NESTShowcase\nxamples of interactions between NeuroML and                                                                                                                                                                                          https://github.com/OpenSourceBrain/\n                                                                                                    PyNN ShowcaseyNN                                                                                                                                                                                                                                  PyNNShowcase\nxamples of interactions between NeuroML and                                                                                                                                                                                          https://github.com/OpenSourceBrain/\n                                                                                                    NetPyNE ShowcaseetPyNE                                                                                                                                                                                                                               NetPyNEShowcase\nxamples of interactions between NeuroML and                                                                                                                                                                                          https://github.com/OpenSourceBrain/\n                                                                                                    SBML Showcasehowcase\nxamples of interactions between NeuroML and                                                                                                                                                                                          https://github.com/OpenSourceBrain/\n                                                                                                    Brian Showcaserian                                                                                                                                                                                                                                 BrianShowcase\nxamples of interactions between NeuroML and                                                                                                                                                                                          https://github.com/OpenSourceBrain/\n                                                                                                    MOOSE Showcasehowcase\nxamples of interactions between NeuroML and                                                                                                                                                                                          https://github.com/OpenSourceBrain/\n                                                                                                    Arbor Showcase                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Arbor                                                                                                                                                                                                                                 ArborShowcase\nxamples of interactions between NeuroML and                                                                                                                                                                                          https://github.com/OpenSourceBrain/\n                                                                                                    EDEN Showcasehowcase\n                                                                                                    The Virtual Brain Showcasexamples of interactions between NeuroML and                                                                                                                                                                                          https://github.com/OpenSourceBrain/\nheVirtualBrainShowcase\n                                                                                                    Table 8 continued on next page\n                                                                                                    Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLifeof 44","md":"# Tools and resources\n\n# Neuroscience\n\n| Table 8 continued        |                                                                                    |                                                                                                           |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n| ------------------------ | ---------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | - | ------------------------ | ----------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------- | - | - | - | - | - | - | - | ----------------------------------------- | ------------------------------------------------------------------------- | - | - | - | --- |\n| Model                    |                                                                                    |                                                                                                           |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   | Description                               |                                                                           |   |   |   | URL |\n| Ferguson et al., 2013    | Parvalbumin-positive interneuron from CA1, based on Izhikevich cell model          | FergusonEtAl2013-PVFastFiringCell |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n| Ferguson et al., 2014    | Pyramidal cell from CA1, based on Izhikevich cell model                            | FergusonEtAl2014-CA1PyrCell             |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n| Migliore et al., 2005    | Multi-compartmental model of pyramidal cell from CA1 region of hippocampus         | CA1PyramidalCell                                   |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n|                          |                                                                                    |                                                                                                           |   | Pinsky and Rinzel, 1994  |                                                                                                                               |                                                                           |   |   |   |   |   |   |   | Simplified model of CA3 pyramidal cell    | PinskyRinzelModel |   |   |   |     |\n|                          |                                                                                    |                                                                                                           |   | Wang and Buzsáki, 1996   | Hippocampal interneuronal network model exhibiting gamma oscillations                                                         | WangBuzsaki1996     |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n| Migliore et al., 2014    | Large-scale 3D olfactory bulb network with detailed mitral cells and granule cells | MiglioreEtAl14\\_OlfactoryBulb3D      |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n| Hodgkin and Huxley, 1952 | Classic investigation of the ionic basis of the action potential                   | tutorial                                           |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n|                          |                                                                                    |                                                                                                           |   | FitzHugh, 1961           | Simplified form of Hodgkin Huxley model Nagumo                                                                                | Nagumo              |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n| Prinz et al., 2004       | Pyloric network of the lobster stomatogastric ganglion system                      | PyloricNetwork                                       |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n|                          |                                                                                    |                                                                                                           |   | Boyle and Cohen, 2008    |                                                                                                                               |                                                                           |   |   |   |   |   |   |   | Model of body wall muscle from C. elegans | muscle\\_model                 |   |   |   |     |\n| Gleeson et al., 2018     | A multiscale framework for modeling the nervous system of C. elegans               | c302                                                                  |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n| Morris and Lecar, 1981   | Two dimensional reduced neuron model with calcium and potassium conductances       | MorrisLecarModel                                   |   |                          |                                                                                                                               |                                                                           |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n|                          |                                                                                    |                                                                                                           |   | Hindmarsh and Rose, 1984 | A simplified point cell model which captures complex firing patterns of single neurons, such as periodic and chaotic bursting | HindmarshRose1984 |   |   |   |   |   |   |   |                                           |                                                                           |   |   |   |     |\n\n# Showcases\n\n| NEST Showcase              | Examples of interactions with simulator NEST                |\n| -------------------------- | -------------------------------------------------------------------------------------------------------------- |\n| PyNN Showcase              | Examples of interactions between NeuroML and PyNN           |\n| NetPyNE Showcase           | Examples of interactions between NeuroML and NetPyNE     |\n| SBML Showcase              | Examples of interactions between NeuroML and SBML           |\n| Brian Showcase             | Examples of interactions between NeuroML and Brian         |\n| MOOSE Showcase             | Examples of interactions between NeuroML and MOOSE         |\n| Arbor Showcase             | Examples of interactions between NeuroML and Arbor         |\n| EDEN Showcase              | Examples of interactions between NeuroML and EDEN           |\n| The Virtual Brain Showcase | Examples of interactions between NeuroML and TVB |\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"table","rows":[["Table 8 continued","","","","","","","","","","","","","","","","","","",""],["Model","","","","","","","","","","","","","","Description","","","","","URL"],["Ferguson et al., 2013","Parvalbumin-positive interneuron from CA1, based on Izhikevich cell model","FergusonEtAl2013-PVFastFiringCell","","","","","","","","","","","","","","","","",""],["Ferguson et al., 2014","Pyramidal cell from CA1, based on Izhikevich cell model","FergusonEtAl2014-CA1PyrCell","","","","","","","","","","","","","","","","",""],["Migliore et al., 2005","Multi-compartmental model of pyramidal cell from CA1 region of hippocampus","CA1PyramidalCell","","","","","","","","","","","","","","","","",""],["","","","","Pinsky and Rinzel, 1994","","","","","","","","","","Simplified model of CA3 pyramidal cell","PinskyRinzelModel","","","",""],["","","","","Wang and Buzsáki, 1996","Hippocampal interneuronal network model exhibiting gamma oscillations","WangBuzsaki1996","","","","","","","","","","","","",""],["Migliore et al., 2014","Large-scale 3D olfactory bulb network with detailed mitral cells and granule cells","MiglioreEtAl14_OlfactoryBulb3D","","","","","","","","","","","","","","","","",""],["Hodgkin and Huxley, 1952","Classic investigation of the ionic basis of the action potential","tutorial","","","","","","","","","","","","","","","","",""],["","","","","FitzHugh, 1961","Simplified form of Hodgkin Huxley model Nagumo","Nagumo","","","","","","","","","","","","",""],["Prinz et al., 2004","Pyloric network of the lobster stomatogastric ganglion system","PyloricNetwork","","","","","","","","","","","","","","","","",""],["","","","","Boyle and Cohen, 2008","","","","","","","","","","Model of body wall muscle from C. elegans","muscle_model","","","",""],["Gleeson et al., 2018","A multiscale framework for modeling the nervous system of C. elegans","c302","","","","","","","","","","","","","","","","",""],["Morris and Lecar, 1981","Two dimensional reduced neuron model with calcium and potassium conductances","MorrisLecarModel","","","","","","","","","","","","","","","","",""],["","","","","Hindmarsh and Rose, 1984","A simplified point cell model which captures complex firing patterns of single neurons, such as periodic and chaotic bursting","HindmarshRose1984","","","","","","","","","","","","",""]],"md":"| Table 8 continued        |                                                                                    |                                   |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n| ------------------------ | ---------------------------------------------------------------------------------- | --------------------------------- | - | ------------------------ | ----------------------------------------------------------------------------------------------------------------------------- | ----------------- | - | - | - | - | - | - | - | ----------------------------------------- | ----------------- | - | - | - | --- |\n| Model                    |                                                                                    |                                   |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   | Description                               |                   |   |   |   | URL |\n| Ferguson et al., 2013    | Parvalbumin-positive interneuron from CA1, based on Izhikevich cell model          | FergusonEtAl2013-PVFastFiringCell |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n| Ferguson et al., 2014    | Pyramidal cell from CA1, based on Izhikevich cell model                            | FergusonEtAl2014-CA1PyrCell       |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n| Migliore et al., 2005    | Multi-compartmental model of pyramidal cell from CA1 region of hippocampus         | CA1PyramidalCell                  |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n|                          |                                                                                    |                                   |   | Pinsky and Rinzel, 1994  |                                                                                                                               |                   |   |   |   |   |   |   |   | Simplified model of CA3 pyramidal cell    | PinskyRinzelModel |   |   |   |     |\n|                          |                                                                                    |                                   |   | Wang and Buzsáki, 1996   | Hippocampal interneuronal network model exhibiting gamma oscillations                                                         | WangBuzsaki1996   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n| Migliore et al., 2014    | Large-scale 3D olfactory bulb network with detailed mitral cells and granule cells | MiglioreEtAl14\\_OlfactoryBulb3D   |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n| Hodgkin and Huxley, 1952 | Classic investigation of the ionic basis of the action potential                   | tutorial                          |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n|                          |                                                                                    |                                   |   | FitzHugh, 1961           | Simplified form of Hodgkin Huxley model Nagumo                                                                                | Nagumo            |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n| Prinz et al., 2004       | Pyloric network of the lobster stomatogastric ganglion system                      | PyloricNetwork                    |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n|                          |                                                                                    |                                   |   | Boyle and Cohen, 2008    |                                                                                                                               |                   |   |   |   |   |   |   |   | Model of body wall muscle from C. elegans | muscle\\_model     |   |   |   |     |\n| Gleeson et al., 2018     | A multiscale framework for modeling the nervous system of C. elegans               | c302                              |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n| Morris and Lecar, 1981   | Two dimensional reduced neuron model with calcium and potassium conductances       | MorrisLecarModel                  |   |                          |                                                                                                                               |                   |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |\n|                          |                                                                                    |                                   |   | Hindmarsh and Rose, 1984 | A simplified point cell model which captures complex firing patterns of single neurons, such as periodic and chaotic bursting | HindmarshRose1984 |   |   |   |   |   |   |   |                                           |                   |   |   |   |     |","isPerfectTable":false,"csv":"\"Table 8 continued\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Model\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Description\",\"\",\"\",\"\",\"\",\"URL\"\n\"Ferguson et al., 2013\",\"Parvalbumin-positive interneuron from CA1, based on Izhikevich cell model\",\"FergusonEtAl2013-PVFastFiringCell\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Ferguson et al., 2014\",\"Pyramidal cell from CA1, based on Izhikevich cell model\",\"FergusonEtAl2014-CA1PyrCell\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Migliore et al., 2005\",\"Multi-compartmental model of pyramidal cell from CA1 region of hippocampus\",\"CA1PyramidalCell\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"\",\"\",\"Pinsky and Rinzel, 1994\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Simplified model of CA3 pyramidal cell\",\"PinskyRinzelModel\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"\",\"\",\"Wang and Buzsáki, 1996\",\"Hippocampal interneuronal network model exhibiting gamma oscillations\",\"WangBuzsaki1996\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Migliore et al., 2014\",\"Large-scale 3D olfactory bulb network with detailed mitral cells and granule cells\",\"MiglioreEtAl14_OlfactoryBulb3D\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Hodgkin and Huxley, 1952\",\"Classic investigation of the ionic basis of the action potential\",\"tutorial\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"\",\"\",\"FitzHugh, 1961\",\"Simplified form of Hodgkin Huxley model Nagumo\",\"Nagumo\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Prinz et al., 2004\",\"Pyloric network of the lobster stomatogastric ganglion system\",\"PyloricNetwork\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"\",\"\",\"Boyle and Cohen, 2008\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Model of body wall muscle from C. elegans\",\"muscle_model\",\"\",\"\",\"\",\"\"\n\"Gleeson et al., 2018\",\"A multiscale framework for modeling the nervous system of C. elegans\",\"c302\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"Morris and Lecar, 1981\",\"Two dimensional reduced neuron model with calcium and potassium conductances\",\"MorrisLecarModel\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"\",\"\",\"\",\"\",\"Hindmarsh and Rose, 1984\",\"A simplified point cell model which captures complex firing patterns of single neurons, such as periodic and chaotic bursting\",\"HindmarshRose1984\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"","bBox":{"x":36.5,"y":34.63,"w":538.83,"h":720.13}},{"type":"heading","lvl":1,"value":"Showcases","md":"# Showcases","bBox":{"x":36.61,"y":458.29,"w":39,"h":8}},{"type":"table","rows":[["NEST Showcase","Examples of interactions with simulator NEST"],["PyNN Showcase","Examples of interactions between NeuroML and PyNN"],["NetPyNE Showcase","Examples of interactions between NeuroML and NetPyNE"],["SBML Showcase","Examples of interactions between NeuroML and SBML"],["Brian Showcase","Examples of interactions between NeuroML and Brian"],["MOOSE Showcase","Examples of interactions between NeuroML and MOOSE"],["Arbor Showcase","Examples of interactions between NeuroML and Arbor"],["EDEN Showcase","Examples of interactions between NeuroML and EDEN"],["The Virtual Brain Showcase","Examples of interactions between NeuroML and TVB"]],"md":"| NEST Showcase              | Examples of interactions with simulator NEST         |\n| -------------------------- | ---------------------------------------------------- |\n| PyNN Showcase              | Examples of interactions between NeuroML and PyNN    |\n| NetPyNE Showcase           | Examples of interactions between NeuroML and NetPyNE |\n| SBML Showcase              | Examples of interactions between NeuroML and SBML    |\n| Brian Showcase             | Examples of interactions between NeuroML and Brian   |\n| MOOSE Showcase             | Examples of interactions between NeuroML and MOOSE   |\n| Arbor Showcase             | Examples of interactions between NeuroML and Arbor   |\n| EDEN Showcase              | Examples of interactions between NeuroML and EDEN    |\n| The Virtual Brain Showcase | Examples of interactions between NeuroML and TVB     |","isPerfectTable":false,"csv":"\"NEST Showcase\",\"Examples of interactions with simulator NEST\"\n\"PyNN Showcase\",\"Examples of interactions between NeuroML and PyNN\"\n\"NetPyNE Showcase\",\"Examples of interactions between NeuroML and NetPyNE\"\n\"SBML Showcase\",\"Examples of interactions between NeuroML and SBML\"\n\"Brian Showcase\",\"Examples of interactions between NeuroML and Brian\"\n\"MOOSE Showcase\",\"Examples of interactions between NeuroML and MOOSE\"\n\"Arbor Showcase\",\"Examples of interactions between NeuroML and Arbor\"\n\"EDEN Showcase\",\"Examples of interactions between NeuroML and EDEN\"\n\"The Virtual Brain Showcase\",\"Examples of interactions between NeuroML and TVB\"","bBox":{"x":36.61,"y":483.34,"w":448.23,"h":208.38}},{"type":"text","value":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":0,"y":0,"w":612,"h":792}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/OpenSourceBrain/FergusonEtAl2013-PVFastFiringCell","text":"https://github.com/OpenSourceBrain/ FergusonEtAl2013-PVFastFiringCell"},{"url":"https://github.com/OpenSourceBrain/FergusonEtAl2013-PVFastFiringCell","text":"FergusonEtAl2013-PVFastFiringCell"},{"url":"https://github.com/OpenSourceBrain/FergusonEtAl2014-CA1PyrCell","text":"https://github.com/OpenSourceBrain/ FergusonEtAl2014-CA1PyrCell"},{"url":"https://github.com/OpenSourceBrain/FergusonEtAl2014-CA1PyrCell","text":"FergusonEtAl2014-CA1PyrCell"},{"url":"https://github.com/OpenSourceBrain/CA1PyramidalCell","text":"https://github.com/OpenSourceBrain/ CA1PyramidalCell"},{"url":"https://github.com/OpenSourceBrain/CA1PyramidalCell","text":"CA1PyramidalCell"},{"url":"https://github.com/OpenSourceBrain/PinskyRinzelModel","text":"https://github.com/OpenSourceBrain/ PinskyRinzelModel"},{"url":"https://github.com/OpenSourceBrain/PinskyRinzelModel","text":"PinskyRinzelModel"},{"url":"https://github.com/OpenSourceBrain/WangBuzsaki1996","text":"https://github.com/OpenSourceBrain/ WangBuzsaki1996"},{"url":"https://github.com/OpenSourceBrain/WangBuzsaki1996","text":"WangBuzsaki1996"},{"url":"https://github.com/OpenSourceBrain/MiglioreEtAl14_OlfactoryBulb3D","text":"https://github.com/OpenSourceBrain/ MiglioreEtAl14_OlfactoryBulb3D"},{"url":"https://github.com/OpenSourceBrain/MiglioreEtAl14_OlfactoryBulb3D","text":"MiglioreEtAl14_OlfactoryBulb3D"},{"url":"https://github.com/openworm/hodgkin_huxley_tutorial","text":"https://github.com/openworm/hodgkin_huxley_ tutorial"},{"url":"https://github.com/openworm/hodgkin_huxley_tutorial","text":"tutorial"},{"url":"https://github.com/OpenSourceBrain/FitzHugh-Nagumo","text":"https://github.com/OpenSourceBrain/FitzHugh- Nagumo"},{"url":"https://github.com/OpenSourceBrain/FitzHugh-Nagumo","text":"Nagumo"},{"url":"https://github.com/OpenSourceBrain/PyloricNetwork","text":"https://github.com/OpenSourceBrain/ PyloricNetwork"},{"url":"https://github.com/OpenSourceBrain/PyloricNetwork","text":"PyloricNetwork"},{"url":"https://github.com/openworm/muscle_model","text":"https://github.com/openworm/muscle_model"},{"url":"https://github.com/openworm/c302","text":"https://github.com/openworm/c302"},{"url":"https://github.com/OpenSourceBrain/MorrisLecarModel","text":"https://github.com/OpenSourceBrain/ MorrisLecarModel"},{"url":"https://github.com/OpenSourceBrain/MorrisLecarModel","text":"MorrisLecarModel"},{"url":"https://github.com/OpenSourceBrain/HindmarshRose1984","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/HindmarshRose1984","text":"HindmarshRose1984"},{"url":"https://github.com/OpenSourceBrain/NESTShowcase","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/NESTShowcase","text":"NESTShowcase"},{"url":"https://github.com/OpenSourceBrain/PyNNShowcase","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/PyNNShowcase","text":"PyNNShowcase"},{"url":"https://github.com/OpenSourceBrain/NetPyNEShowcase","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/NetPyNEShowcase","text":"NetPyNEShowcase"},{"url":"https://github.com/OpenSourceBrain/SBMLShowcase","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/SBMLShowcase","text":"SBMLShowcase"},{"url":"https://github.com/OpenSourceBrain/BrianShowcase","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/BrianShowcase","text":"BrianShowcase"},{"url":"https://github.com/OpenSourceBrain/MOOSEShowcase","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/MOOSEShowcase","text":"MOOSEShowcase"},{"url":"https://github.com/OpenSourceBrain/ArborShowcase","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/ArborShowcase","text":"ArborShowcase"},{"url":"https://github.com/OpenSourceBrain/EDENShowcase","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/EDENShowcase","text":"EDENShowcase"},{"url":"https://github.com/OpenSourceBrain/TheVirtualBrainShowcase","text":"https://github.com/OpenSourceBrain/"},{"url":"https://github.com/OpenSourceBrain/TheVirtualBrainShowcase","text":"TheVirtualBrainShowcase"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.291},{"page":24,"text":"           Tools  and  resources                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Neuroscience\nTable 8 continued\nModelescription  URL\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            Examples of interactions between NeuroML and  Examples of interactions between NeuroML and  Examples of interactions between NeuroML and  https://github.com/OpenSourceBrain/\nNEURON Showcasehowcase\nhttps://github.com/OpenSourceBrain/\nneuroConstruct Showcasexamples of neuroConstruct projects  neuroConstructShowcase\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            Examples of reconstructions from NeuroMorpho. Examples of reconstructions from NeuroMorpho. Examples of reconstructions from NeuroMorpho. https://github.com/OpenSourceBrain/\nNeuroMorpho.Org                                                                                                                                                                                                                                                                                                                                                                                                                                             Org                                           Org                                           Org  NeuroMorpho\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            Janelia MouseLight project neuronal           Janelia MouseLight project neuronal           Janelia MouseLight project neuronal           https://github.com/OpenSourceBrain/\nJanelia MouseLight                                                                                                                                                                                                                                                                                                                                                                                                                                          reconstructions                               reconstructions                               reconstructions  MouseLightShowcase\n                                such as networks and neuronal models that reference multiple cell and ionic conductance deﬁnitions,     such as networks and neuronal models that reference multiple cell and ionic conductance deﬁnitions,     such as networks and neuronal models that reference multiple cell and ionic conductance deﬁnitions,     such as networks and neuronal models that reference multiple cell and ionic conductance deﬁnitions,\n                                can also be exported into a COMBINE zip archive (Bergmann et al., 2014), a zip ﬁle that includes        can also be exported into a COMBINE zip archive (Bergmann et al., 2014), a zip ﬁle that includes        can also be exported into a COMBINE zip archive (Bergmann et al., 2014), a zip ﬁle that includes        can also be exported into a COMBINE zip archive (Bergmann et al., 2014), a zip ﬁle that includes\n                                metadata about its contents. pyNeuroML includes functions to easily create COMBINE archives from        metadata about its contents. pyNeuroML includes functions to easily create COMBINE archives from        metadata about its contents. pyNeuroML includes functions to easily create COMBINE archives from        metadata about its contents. pyNeuroML includes functions to easily create COMBINE archives from\n                                NeuroML models and simulations (Figure 6).                                                              NeuroML models and simulations (Figure 6).                                                              NeuroML models and simulations (Figure 6).                                                              NeuroML models and simulations (Figure 6).\n                                                                                                                                                                                                                                                                                                                                                         OSB is designed so that researchers can share their code on their chosen platform (e.g. GitHub),  OSB is designed so that researchers can share their code on their chosen platform (e.g. GitHub),\n                                while retaining full control over write access to their repositories. Afterwards, a page for the model  while retaining full control over write access to their repositories. Afterwards, a page for the model  while retaining full control over write access to their repositories. Afterwards, a page for the model  while retaining full control over write access to their repositories. Afterwards, a page for the model\n                                can be created on OSB which lists the latest ﬁles present there, with links to OSB visualization/anal-  can be created on OSB which lists the latest ﬁles present there, with links to OSB visualization/anal-  can be created on OSB which lists the latest ﬁles present there, with links to OSB visualization/anal-  can be created on OSB which lists the latest ﬁles present there, with links to OSB visualization/anal-\n                                ysis/simulation features which can use the standardized ﬁles found in the resource.                     ysis/simulation features which can use the standardized ﬁles found in the resource.                     ysis/simulation features which can use the standardized ﬁles found in the resource.                     ysis/simulation features which can use the standardized ﬁles found in the resource.\n                                                                                                                                                                                                                                                                                                                                                         NeuroML supports the embedding of structured ontological information in model descriptions        NeuroML supports the embedding of structured ontological information in model descriptions\n                                (Neal et al., 2019). Models can include NeuroLex (now InterLex) (Larson and Martone, 2013) identi-      (Neal et al., 2019). Models can include NeuroLex (now InterLex) (Larson and Martone, 2013) identi-      (Neal et al., 2019). Models can include NeuroLex (now InterLex) (Larson and Martone, 2013) identi-      (Neal et al., 2019). Models can include NeuroLex (now InterLex) (Larson and Martone, 2013) identi-\n                                ﬁers for their components (e.g. neuro_lex_id in Figure 6). This links model components to their biolog- ﬁers for their components (e.g. neuro_lex_id in Figure 6). This links model components to their biolog- ﬁers for their components (e.g. neuro_lex_id in Figure 6). This links model components to their biolog- ﬁers for their components (e.g. neuro_lex_id in Figure 6). This links model components to their biolog-\n                                ical counterparts and makes them more transparent, ﬁndable, and reusable. For example, different        ical counterparts and makes them more transparent, ﬁndable, and reusable. For example, different        ical counterparts and makes them more transparent, ﬁndable, and reusable. For example, different        ical counterparts and makes them more transparent, ﬁndable, and reusable. For example, different\n                                types of neurons and brain regions have unique ontological ids. A user can use these ids to search for  types of neurons and brain regions have unique ontological ids. A user can use these ids to search for  types of neurons and brain regions have unique ontological ids. A user can use these ids to search for  types of neurons and brain regions have unique ontological ids. A user can use these ids to search for\n                                relevant model components on NeuroML-                                                                   relevant model components on NeuroML-                                                                   relevant model components on NeuroML-                                                                   relevant model components on NeuroML-\nore general information to maintain provenance can\n                                                                                                                                                                                                                                                                                                                                                        also be included in NeuroML models (https://docs.neuroml.org/Userdocs/Provenance.html).\n                                Reusing NeuroML models                                                                                  Reusing NeuroML models                                                                                  Reusing NeuroML models                                                                                  Reusing NeuroML models\n                                NeuroML models, once openly shared, become community resources that are accessible to all.              NeuroML models, once openly shared, become community resources that are accessible to all.              NeuroML models, once openly shared, become community resources that are accessible to all.              NeuroML models, once openly shared, become community resources that are accessible to all.\n                                Researchers can use models shared on NeuroML-DB and OSB without restrictions. Guide 5 in                Researchers can use models shared on NeuroML-DB and OSB without restrictions. Guide 5 in                Researchers can use models shared on NeuroML-DB and OSB without restrictions. Guide 5 in                Researchers can use models shared on NeuroML-DB and OSB without restrictions. Guide 5 in\nable 5\n                                provides an example of ﬁnding NeuroML- based model components using the API of NeuroML-  DB,            provides an example of ﬁnding NeuroML- based model components using the API of NeuroML-  DB,            provides an example of ﬁnding NeuroML- based model components using the API of NeuroML-  DB,            provides an example of ﬁnding NeuroML- based model components using the API of NeuroML-  DB,\n                                and creating novel models incorporating these elements.                                                 and creating novel models incorporating these elements.                                                 and creating novel models incorporating these elements.                                                 and creating novel models incorporating these elements.\n                                                                                                                                                                                                                                                                                                                                                         In addition to these platforms, other experimental data and model dissemination platforms also    In addition to these platforms, other experimental data and model dissemination platforms also\n                                provide standardized NeuroML versions of relevant models to promote uptake and reuse. For example,      provide standardized NeuroML versions of relevant models to promote uptake and reuse. For example,      provide standardized NeuroML versions of relevant models to promote uptake and reuse. For example,      provide standardized NeuroML versions of relevant models to promote uptake and reuse. For example,\n                                NeuroMorpho. org  (Ascoli et  al., 2007) includes a tool to download NeuroML compliant versions         NeuroMorpho. org  (Ascoli et  al., 2007) includes a tool to download NeuroML compliant versions         NeuroMorpho. org  (Ascoli et  al., 2007) includes a tool to download NeuroML compliant versions         NeuroMorpho. org  (Ascoli et  al., 2007) includes a tool to download NeuroML compliant versions\n                                of its cellular reconstructions (https://github.com/NeuroML/Cvapp-NeuroMorpho.org,                      of its cellular reconstructions (https://github.com/NeuroML/Cvapp-NeuroMorpho.org,                      of its cellular reconstructions (https://github.com/NeuroML/Cvapp-NeuroMorpho.org,                      of its cellular reconstructions (https://github.com/NeuroML/Cvapp-NeuroMorpho.org,                                                                                                              https://docs.\n                                neuroml.org/Userdocs/Software/Tools/SWC.html). NeuroML versions of models released by organiza-         neuroml.org/Userdocs/Software/Tools/SWC.html). NeuroML versions of models released by organiza-         neuroml.org/Userdocs/Software/Tools/SWC.html). NeuroML versions of models released by organiza-         neuroml.org/Userdocs/Software/Tools/SWC.html). NeuroML versions of models released by organiza-\n                                tions such as the Blue Brain Project (Markram et al., 2015) (whole cell models as well as ion channel   tions such as the Blue Brain Project (Markram et al., 2015) (whole cell models as well as ion channel   tions such as the Blue Brain Project (Markram et al., 2015) (whole cell models as well as ion channel   tions such as the Blue Brain Project (Markram et al., 2015) (whole cell models as well as ion channel\n                                models from Channelpedia Ranjan et al., 2011), the Allen Institute for Brain Science (Billeh et al.,    models from Channelpedia Ranjan et al., 2011), the Allen Institute for Brain Science (Billeh et al.,    models from Channelpedia Ranjan et al., 2011), the Allen Institute for Brain Science (Billeh et al.,    models from Channelpedia Ranjan et al., 2011), the Allen Institute for Brain Science (Billeh et al.,\n                                2020), and the OpenWorm project (Gleeson et al., 2018) are also openly available for reuse (Table 8).   2020), and the OpenWorm project (Gleeson et al., 2018) are also openly available for reuse (Table 8).   2020), and the OpenWorm project (Gleeson et al., 2018) are also openly available for reuse (Table 8).   2020), and the OpenWorm project (Gleeson et al., 2018) are also openly available for reuse (Table 8).\n                                                                                                                                                                                                                                                                                                                                                         NeuroML can also interact with other standards to further promote model re-                       NeuroML can also interact with other standards to further promote model re-\nuse. Whereas NeuroML\n                                is a declarative standard, PyNN (Davison et al., 2008) is a procedural standard with a Python API for   is a declarative standard, PyNN (Davison et al., 2008) is a procedural standard with a Python API for   is a declarative standard, PyNN (Davison et al., 2008) is a procedural standard with a Python API for   is a declarative standard, PyNN (Davison et al., 2008) is a procedural standard with a Python API for\n                                creating network models that can be simulated on multiple simulators. NeuroML models which are          creating network models that can be simulated on multiple simulators. NeuroML models which are          creating network models that can be simulated on multiple simulators. NeuroML models which are          creating network models that can be simulated on multiple simulators. NeuroML models which are\n                                within the scope of PyNN can be converted to the PyNN format, and vice-  versa. Similarly, NeuroML      within the scope of PyNN can be converted to the PyNN format, and vice-  versa. Similarly, NeuroML      within the scope of PyNN can be converted to the PyNN format, and vice-  versa. Similarly, NeuroML      within the scope of PyNN can be converted to the PyNN format, and vice-  versa. Similarly, NeuroML\n                                also interacts with SONATA (Dai et  al., 2020) data format by supporting the two way conversion         also interacts with SONATA (Dai et  al., 2020) data format by supporting the two way conversion         also interacts with SONATA (Dai et  al., 2020) data format by supporting the two way conversion         also interacts with SONATA (Dai et  al., 2020) data format by supporting the two way conversion\n                                of the network structures of NeuroML models into SONATA. In standards not speciﬁc to neurosci-          of the network structures of NeuroML models into SONATA. In standards not speciﬁc to neurosci-          of the network structures of NeuroML models into SONATA. In standards not speciﬁc to neurosci-          of the network structures of NeuroML models into SONATA. In standards not speciﬁc to neurosci-\n                                ence, models from the well established SBML standard (Hucka et  al., 2003) can be converted to          ence, models from the well established SBML standard (Hucka et  al., 2003) can be converted to          ence, models from the well established SBML standard (Hucka et  al., 2003) can be converted to          ence, models from the well established SBML standard (Hucka et  al., 2003) can be converted to\n                                LEMS (Cannon et al., 2014), for inclusion in neuroscience- related modeling pipelines, and a subset     LEMS (Cannon et al., 2014), for inclusion in neuroscience- related modeling pipelines, and a subset     LEMS (Cannon et al., 2014), for inclusion in neuroscience- related modeling pipelines, and a subset     LEMS (Cannon et al., 2014), for inclusion in neuroscience- related modeling pipelines, and a subset\n                                of NeuroML/LEMS models can be exported to SBML, which allows use with simulators and anal-              of NeuroML/LEMS models can be exported to SBML, which allows use with simulators and anal-              of NeuroML/LEMS models can be exported to SBML, which allows use with simulators and anal-              of NeuroML/LEMS models can be exported to SBML, which allows use with simulators and anal-\n                                ysis packages compliant to this standard, e.g., Tellurium (Choi et  al., 2018). Simulation execution    ysis packages compliant to this standard, e.g., Tellurium (Choi et  al., 2018). Simulation execution    ysis packages compliant to this standard, e.g., Tellurium (Choi et  al., 2018). Simulation execution    ysis packages compliant to this standard, e.g., Tellurium (Choi et  al., 2018). Simulation execution\n                                details of NeuroML/LEMS models can also be exported to Simulation Experiment Description Markup         details of NeuroML/LEMS models can also be exported to Simulation Experiment Description Markup         details of NeuroML/LEMS models can also be exported to Simulation Experiment Description Markup         details of NeuroML/LEMS models can also be exported to Simulation Experiment Description Markup\n                                Language (SED-                                                                                          Language (SED-                                                                                          Language (SED-                                                                                          Language (SED-\naltemath et  al., 2011), allowing advanced resources such as Biosimulators\n                                (Shaikh et al., 2022) (https://biosimulators.org) to feature NeuroML models.                            (Shaikh et al., 2022) (https://biosimulators.org) to feature NeuroML models.                            (Shaikh et al., 2022) (https://biosimulators.org) to feature NeuroML models.                            (Shaikh et al., 2022) (https://biosimulators.org) to feature NeuroML models.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                                                                                                                                                                                                                   24 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n| Model                   | Description                                   | URL                                                 |                                       |\n| ----------------------- | --------------------------------------------- | --------------------------------------------------- | ------------------------------------- |\n| NEURON                  | NEURON Showcase                               | Examples of interactions between NeuroML and NEURON | <https://github.com/OpenSourceBrain/> |\n| neuroConstruct Showcase | Examples of neuroConstruct projects           | <https://github.com/OpenSourceBrain/>               |                                       |\n| NeuroMorpho.Org         | Examples of reconstructions from NeuroMorpho. | <https://github.com/OpenSourceBrain/>               |                                       |\n|                         | Janelia MouseLight                            | Janelia MouseLight project neuronal reconstructions | <https://github.com/OpenSourceBrain/> |\n\nsuch as networks and neuronal models that reference multiple cell and ionic conductance definitions, can also be exported into a COMBINE zip archive (Bergmann et al., 2014), a zip file that includes metadata about its contents. pyNeuroML includes functions to easily create COMBINE archives from NeuroML models and simulations (Figure 6).\n\nOSB is designed so that researchers can share their code on their chosen platform (e.g. GitHub), while retaining full control over write access to their repositories. Afterwards, a page for the model can be created on OSB which lists the latest files present there, with links to OSB visualization/analysis/simulation features which can use the standardized files found in the resource.\n\nNeuroML supports the embedding of structured ontological information in model descriptions (Neal et al., 2019). Models can include NeuroLex (now InterLex) (Larson and Martone, 2013) identifiers for their components (e.g. neuro_lex_id in Figure 6). This links model components to their biological counterparts and makes them more transparent, findable, and reusable. For example, different types of neurons and brain regions have unique ontological ids. A user can use these ids to search for relevant model components on NeuroML-DB. More general information to maintain provenance can also be included in NeuroML models (https://docs.neuroml.org/Userdocs/Provenance.html).\n\n# Reusing NeuroML models\n\nNeuroML models, once openly shared, become community resources that are accessible to all. Researchers can use models shared on NeuroML-DB and OSB without restrictions. Guide 5 in Table 5 provides an example of finding NeuroML-based model components using the API of NeuroML-DB, and creating novel models incorporating these elements.\n\nIn addition to these platforms, other experimental data and model dissemination platforms also provide standardized NeuroML versions of relevant models to promote uptake and reuse. For example, NeuroMorpho.org (Ascoli et al., 2007) includes a tool to download NeuroML compliant versions of its cellular reconstructions (https://github.com/NeuroML/Cvapp-NeuroMorpho.org, https://neuroml.org/Userdocs/Software/Tools/SWC.html). NeuroML versions of models released by organizations such as the Blue Brain Project (Markram et al., 2015) (whole cell models as well as ion channel models from Channelpedia Ranjan et al., 2011), the Allen Institute for Brain Science (Billeh et al., 2020), and the OpenWorm project (Gleeson et al., 2018) are also openly available for reuse (Table 8).\n\nNeuroML can also interact with other standards to further promote model reuse. Whereas NeuroML is a declarative standard, PyNN (Davison et al., 2008) is a procedural standard with a Python API for creating network models that can be simulated on multiple simulators. NeuroML models which are within the scope of PyNN can be converted to the PyNN format, and vice-versa. Similarly, NeuroML also interacts with SONATA (Dai et al., 2020) data format by supporting the two way conversion of the network structures of NeuroML models into SONATA. In standards not specific to neuroscience, models from the well established SBML standard (Hucka et al., 2003) can be converted to LEMS (Cannon et al., 2014), for inclusion in neuroscience-related modeling pipelines, and a subset of NeuroML/LEMS models can be exported to SBML, which allows use with simulators and analysis packages compliant to this standard, e.g., Tellurium (Choi et al., 2018). Simulation execution details of NeuroML/LEMS models can also be exported to Simulation Experiment Description Markup Language (SED-ML) (Waltemath et al., 2011), allowing advanced resources such as Biosimulators (Shaikh et al., 2022) (https://biosimulators.org) to feature NeuroML models.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"table","rows":[["Model","Description","URL",""],["NEURON","NEURON Showcase","Examples of interactions between NeuroML and NEURON",""],["neuroConstruct Showcase","Examples of neuroConstruct projects","",""],["NeuroMorpho.Org","Examples of reconstructions from NeuroMorpho.","",""],["","Janelia MouseLight","Janelia MouseLight project neuronal reconstructions",""]],"md":"| Model                   | Description                                   | URL                                                 |                                       |\n| ----------------------- | --------------------------------------------- | --------------------------------------------------- | ------------------------------------- |\n| NEURON                  | NEURON Showcase                               | Examples of interactions between NeuroML and NEURON | <https://github.com/OpenSourceBrain/> |\n| neuroConstruct Showcase | Examples of neuroConstruct projects           | <https://github.com/OpenSourceBrain/>               |                                       |\n| NeuroMorpho.Org         | Examples of reconstructions from NeuroMorpho. | <https://github.com/OpenSourceBrain/>               |                                       |\n|                         | Janelia MouseLight                            | Janelia MouseLight project neuronal reconstructions | <https://github.com/OpenSourceBrain/> |","isPerfectTable":true,"csv":"\"Model\",\"Description\",\"URL\",\"\"\n\"NEURON\",\"NEURON Showcase\",\"Examples of interactions between NeuroML and NEURON\",\"\"\n\"neuroConstruct Showcase\",\"Examples of neuroConstruct projects\",\"\",\"\"\n\"NeuroMorpho.Org\",\"Examples of reconstructions from NeuroMorpho.\",\"\",\"\"\n\"\",\"Janelia MouseLight\",\"Janelia MouseLight project neuronal reconstructions\",\"\"","bBox":{"x":36.5,"y":34.63,"w":552.02,"h":720.13}},{"type":"text","value":"such as networks and neuronal models that reference multiple cell and ionic conductance definitions, can also be exported into a COMBINE zip archive (Bergmann et al., 2014), a zip file that includes metadata about its contents. pyNeuroML includes functions to easily create COMBINE archives from NeuroML models and simulations (Figure 6).\n\nOSB is designed so that researchers can share their code on their chosen platform (e.g. GitHub), while retaining full control over write access to their repositories. Afterwards, a page for the model can be created on OSB which lists the latest files present there, with links to OSB visualization/analysis/simulation features which can use the standardized files found in the resource.\n\nNeuroML supports the embedding of structured ontological information in model descriptions (Neal et al., 2019). Models can include NeuroLex (now InterLex) (Larson and Martone, 2013) identifiers for their components (e.g. neuro_lex_id in Figure 6). This links model components to their biological counterparts and makes them more transparent, findable, and reusable. For example, different types of neurons and brain regions have unique ontological ids. A user can use these ids to search for relevant model components on NeuroML-DB. More general information to maintain provenance can also be included in NeuroML models (https://docs.neuroml.org/Userdocs/Provenance.html).","md":"such as networks and neuronal models that reference multiple cell and ionic conductance definitions, can also be exported into a COMBINE zip archive (Bergmann et al., 2014), a zip file that includes metadata about its contents. pyNeuroML includes functions to easily create COMBINE archives from NeuroML models and simulations (Figure 6).\n\nOSB is designed so that researchers can share their code on their chosen platform (e.g. GitHub), while retaining full control over write access to their repositories. Afterwards, a page for the model can be created on OSB which lists the latest files present there, with links to OSB visualization/analysis/simulation features which can use the standardized files found in the resource.\n\nNeuroML supports the embedding of structured ontological information in model descriptions (Neal et al., 2019). Models can include NeuroLex (now InterLex) (Larson and Martone, 2013) identifiers for their components (e.g. neuro_lex_id in Figure 6). This links model components to their biological counterparts and makes them more transparent, findable, and reusable. For example, different types of neurons and brain regions have unique ontological ids. A user can use these ids to search for relevant model components on NeuroML-DB. More general information to maintain provenance can also be included in NeuroML models (https://docs.neuroml.org/Userdocs/Provenance.html).","bBox":{"x":36.5,"y":68.48,"w":544.02,"h":446.98}},{"type":"heading","lvl":1,"value":"Reusing NeuroML models","md":"# Reusing NeuroML models","bBox":{"x":36.5,"y":68.48,"w":278.02,"h":350}},{"type":"text","value":"NeuroML models, once openly shared, become community resources that are accessible to all. Researchers can use models shared on NeuroML-DB and OSB without restrictions. Guide 5 in Table 5 provides an example of finding NeuroML-based model components using the API of NeuroML-DB, and creating novel models incorporating these elements.\n\nIn addition to these platforms, other experimental data and model dissemination platforms also provide standardized NeuroML versions of relevant models to promote uptake and reuse. For example, NeuroMorpho.org (Ascoli et al., 2007) includes a tool to download NeuroML compliant versions of its cellular reconstructions (https://github.com/NeuroML/Cvapp-NeuroMorpho.org, https://neuroml.org/Userdocs/Software/Tools/SWC.html). NeuroML versions of models released by organizations such as the Blue Brain Project (Markram et al., 2015) (whole cell models as well as ion channel models from Channelpedia Ranjan et al., 2011), the Allen Institute for Brain Science (Billeh et al., 2020), and the OpenWorm project (Gleeson et al., 2018) are also openly available for reuse (Table 8).\n\nNeuroML can also interact with other standards to further promote model reuse. Whereas NeuroML is a declarative standard, PyNN (Davison et al., 2008) is a procedural standard with a Python API for creating network models that can be simulated on multiple simulators. NeuroML models which are within the scope of PyNN can be converted to the PyNN format, and vice-versa. Similarly, NeuroML also interacts with SONATA (Dai et al., 2020) data format by supporting the two way conversion of the network structures of NeuroML models into SONATA. In standards not specific to neuroscience, models from the well established SBML standard (Hucka et al., 2003) can be converted to LEMS (Cannon et al., 2014), for inclusion in neuroscience-related modeling pipelines, and a subset of NeuroML/LEMS models can be exported to SBML, which allows use with simulators and analysis packages compliant to this standard, e.g., Tellurium (Choi et al., 2018). Simulation execution details of NeuroML/LEMS models can also be exported to Simulation Experiment Description Markup Language (SED-ML) (Waltemath et al., 2011), allowing advanced resources such as Biosimulators (Shaikh et al., 2022) (https://biosimulators.org) to feature NeuroML models.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"NeuroML models, once openly shared, become community resources that are accessible to all. Researchers can use models shared on NeuroML-DB and OSB without restrictions. Guide 5 in Table 5 provides an example of finding NeuroML-based model components using the API of NeuroML-DB, and creating novel models incorporating these elements.\n\nIn addition to these platforms, other experimental data and model dissemination platforms also provide standardized NeuroML versions of relevant models to promote uptake and reuse. For example, NeuroMorpho.org (Ascoli et al., 2007) includes a tool to download NeuroML compliant versions of its cellular reconstructions (https://github.com/NeuroML/Cvapp-NeuroMorpho.org, https://neuroml.org/Userdocs/Software/Tools/SWC.html). NeuroML versions of models released by organizations such as the Blue Brain Project (Markram et al., 2015) (whole cell models as well as ion channel models from Channelpedia Ranjan et al., 2011), the Allen Institute for Brain Science (Billeh et al., 2020), and the OpenWorm project (Gleeson et al., 2018) are also openly available for reuse (Table 8).\n\nNeuroML can also interact with other standards to further promote model reuse. Whereas NeuroML is a declarative standard, PyNN (Davison et al., 2008) is a procedural standard with a Python API for creating network models that can be simulated on multiple simulators. NeuroML models which are within the scope of PyNN can be converted to the PyNN format, and vice-versa. Similarly, NeuroML also interacts with SONATA (Dai et al., 2020) data format by supporting the two way conversion of the network structures of NeuroML models into SONATA. In standards not specific to neuroscience, models from the well established SBML standard (Hucka et al., 2003) can be converted to LEMS (Cannon et al., 2014), for inclusion in neuroscience-related modeling pipelines, and a subset of NeuroML/LEMS models can be exported to SBML, which allows use with simulators and analysis packages compliant to this standard, e.g., Tellurium (Choi et al., 2018). Simulation execution details of NeuroML/LEMS models can also be exported to Simulation Experiment Description Markup Language (SED-ML) (Waltemath et al., 2011), allowing advanced resources such as Biosimulators (Shaikh et al., 2022) (https://biosimulators.org) to feature NeuroML models.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":36.5,"y":34.63,"w":552.02,"h":672.77}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/Userdocs/Provenance.html","text":""},{"url":"https://github.com/NeuroML/Cvapp-NeuroMorpho.org","text":""},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/SWC.html","text":"https://docs.  "},{"url":"https://docs.neuroml.org/Userdocs/Software/Tools/SWC.html","text":"neuroml.org/Userdocs/Software/Tools/SWC.html). NeuroML versions of models released by organiza-"},{"url":"https://biosimulators.org/","text":""},{"url":"https://github.com/OpenSourceBrain/NEURONShowcase","text":"https://github.com/OpenSourceBrain/ NEURONShowcase"},{"url":"https://github.com/OpenSourceBrain/NEURONShowcase","text":"NEURONShowcase"},{"url":"https://github.com/OpenSourceBrain/neuroConstructShowcase","text":"https://github.com/OpenSourceBrain/ neuroConstructShowcase"},{"url":"https://github.com/OpenSourceBrain/neuroConstructShowcase","text":"neuroConstructShowcase"},{"url":"https://github.com/OpenSourceBrain/NeuroMorpho","text":"https://github.com/OpenSourceBrain/ NeuroMorpho"},{"url":"https://github.com/OpenSourceBrain/NeuroMorpho","text":"NeuroMorpho"},{"url":"https://github.com/OpenSourceBrain/MouseLightShowcase","text":"https://github.com/OpenSourceBrain/ MouseLightShowcase"},{"url":"https://github.com/OpenSourceBrain/MouseLightShowcase","text":"MouseLightShowcase"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.284},{"page":25,"text":"          Tools  and  resources                                                                                                             Neuroscience\n                               NeuroML is extensible                                                                                       NeuroML is extensible\n                               While the standard NeuroML elements (Tables 1 and 2) provide a broad range of curated model types           While the standard NeuroML elements (Tables 1 and 2) provide a broad range of curated model types\n                               for simulation-                                                                                             for simulation-\n                                                                                                                                            based investigations, NeuroML can be extended (using LEMS) to incorporate novel\n                               model elements and types when they are not (yet) available in the standard.                                 model elements and types when they are not (yet) available in the standard.\n                                                                                                                                            LEMS is a general purpose model speciﬁcation language for creating fully machine readable deﬁni-\n                               tions of the structure and behavior of model elements (Cannon et al., 2014). The dynamics of NeuroML        tions of the structure and behavior of model elements (Cannon et al., 2014). The dynamics of NeuroML\n                               elements are described in LEMS. The hierarchical nature of LEMS means that new elements can build           elements are described in LEMS. The hierarchical nature of LEMS means that new elements can build\n                               on pre-                                                                                                     on pre-\n                                                                                                                                            existing elements of the modular NeuroML framework. For example, a novel ionic conduc-\n                               tance element can extend the ‘ionChannelHH’ element, which in turn extends ‘baseIonChannel.’ Thus,          tance element can extend the ‘ionChannelHH’ element, which in turn extends ‘baseIonChannel.’ Thus,\n                               the new element will be known to the NeuroML elements as depending on an external voltage and               the new element will be known to the NeuroML elements as depending on an external voltage and\n                               producing a conductance, properties that are inherited from ‘baseIonChannel.’ Other elements, such          producing a conductance, properties that are inherited from ‘baseIonChannel.’ Other elements, such\n                               as a cell, can incorporate this new type without needing any other information about its internal           as a cell, can incorporate this new type without needing any other information about its internal\n                               workings.                                                                                                   workings.\n                                                                                                                                            LEMS (and, therefore, NeuroML) element deﬁnitions (called ‘ComponentTypes’) specify the dynam-\n                               ical behavior of the model element in terms of a list of yet to be set parameters. Once the generic         ical behavior of the model element in terms of a list of yet to be set parameters. Once the generic\n                               model behavior is deﬁned, modelers only need to ﬁll in the appropriate values of the required param-        model behavior is deﬁned, modelers only need to ﬁll in the appropriate values of the required param-\n                               eters (e.g. conductance density, reversal potential, etc.) to create new instances (called ‘Compo-          eters (e.g. conductance density, reversal potential, etc.) to create new instances (called ‘Compo-\n                               nents’) of the element (see Methods for more details). Users can, therefore create arbitrary, reusable      nents’) of the element (see Methods for more details). Users can, therefore create arbitrary, reusable\n                               model elements in LEMS, which can be treated the same way as the standard model elements (for an            model elements in LEMS, which can be treated the same way as the standard model elements (for an\n                               example see Guide 7 in Table 5).                                                                            example see Guide 7 in Table 5).\n                                                                                                                                            Another major advantage of NeuroML’s use of the LEMS language is its translatability. Since LEMS\n                               is fully machine readable, its primitives (e.g. state variables and their dynamics, expressed as ordinary   is fully machine readable, its primitives (e.g. state variables and their dynamics, expressed as ordinary\n                               differential equations) can be readily mapped into other languages. As a result, simulator speciﬁc          differential equations) can be readily mapped into other languages. As a result, simulator speciﬁc\n                               code (Blundell et  al., 2018) can be generated from NeuroML models and their LEMS extensions                code (Blundell et  al., 2018) can be generated from NeuroML models and their LEMS extensions\n                               (Figure 5), allowing NeuroML to remain simulator-                                                           (Figure 5), allowing NeuroML to remain simulator-\n                                                                                                                                            independent while supporting multiple simulation\n                                                                                                                                           engines.\n                                                                                                                                            Newly created elements that may be of interest to the wider research community can be submitted\n                               to the NeuroML Editorial Board for inclusion into the standard. The standard, therefore, evolves as         to the NeuroML Editorial Board for inclusion into the standard. The standard, therefore, evolves as\n                               new model elements are added and improved versions of the standard and associated software tool             new model elements are added and improved versions of the standard and associated software tool\n                               chain are regularly released to the community.                                                              chain are regularly released to the community.\n                               NeuroML is a global open community initiative                                                               NeuroML is a global open community initiative\n                               NeuroML is a global open community standard that is used and maintained collectively by a diverse           NeuroML is a global open community standard that is used and maintained collectively by a diverse\n                               set of stakeholders. The NeuroML Scientiﬁc Committee (https://docs.neuroml.org/NeuroMLOrg/                  set of stakeholders. The NeuroML Scientiﬁc Committee (https://docs.neuroml.org/NeuroMLOrg/\n                               ScientiﬁcCommittee.html) and the elected NeuroML Editorial Board (https://docs.neuroml.org/                 ScientiﬁcCommittee.html) and the elected NeuroML Editorial Board (https://docs.neuroml.org/\n                               NeuroMLOrg/Board.html) oversee the standard, the core tools, and the initiative. This ensures that          NeuroMLOrg/Board.html) oversee the standard, the core tools, and the initiative. This ensures that\n                               NeuroML supports the myriad of use cases generated by a multi-                                              NeuroML supports the myriad of use cases generated by a multi-\n                                                                                                                                            disciplinary computational modeling\n                               community.                                                                                                  community.\n                                                                                                                                            NeuroML is an endorsed INCF (Abrams et al., 2022) community standard (Martone and Das,\n                               2019) and is one of the main standards of the international COMBINE initiative (Hucka et  al.,              2019) and is one of the main standards of the international COMBINE initiative (Hucka et  al.,\n                               2015), which supports the development of other standards in computational biology as well (e.g.             2015), which supports the development of other standards in computational biology as well (e.g.\n                               SBML (Hucka et  al., 2003) and CellML Lloyd et  al., 2004). Participation in these organizations            SBML (Hucka et  al., 2003) and CellML Lloyd et  al., 2004). Participation in these organizations\n                               guarantees that NeuroML follows current best practices in standardization, and remains linked to            guarantees that NeuroML follows current best practices in standardization, and remains linked to\n                               and interoperable with other standards wherever possible. The NeuroML community also partic-                and interoperable with other standards wherever possible. The NeuroML community also partic-\n                               ipates in training and outreach activities such as Google Summer of Code (https://docs.neuroml.             ipates in training and outreach activities such as Google Summer of Code (https://docs.neuroml.\n                               org/NeuroMLOrg/OutreachTraining.html), tutorials, and internships under these and other                     org/NeuroMLOrg/OutreachTraining.html), tutorials, and internships under these and other\n                               organizations.                                                                                              organizations.\n                                                                                                                                            The NeuroML community maintains public open communication channels to ensure that all\n                               community members can easily participate in troubleshooting, discussions, and development activ-            community members can easily participate in troubleshooting, discussions, and development activ-\n                               ities. A public mailing list (https://lists.sourceforge.net/lists/listinfo/neuroml-technology) is used for  ities. A public mailing list (https://lists.sourceforge.net/lists/listinfo/neuroml-technology) is used for\n                               asynchronous communication and announcements while open chat channels on Gitter (now Matrix/                asynchronous communication and announcements while open chat channels on Gitter (now Matrix/\n                               Element (#/#                                                                                                Element (#/#\n                                                                                                                                            NeuroML_\n                                                                                                                                            community:gitter.\n                                                                                                                                            im)) provide immediate access to the NeuroML community.\n                               All software repositories hosted on GitHub also have issue trackers for software speciﬁc queries. A         All software repositories hosted on GitHub also have issue trackers for software speciﬁc queries. A\n                               community Code of Conduct (https://docs.neuroml.org/NeuroMLOrg/CoC.html) sets the standards                 community Code of Conduct (https://docs.neuroml.org/NeuroMLOrg/CoC.html) sets the standards\n                               of communication and behavior expected on all community channels.                                           of communication and behavior expected on all community channels.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                       25 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# NeuroML is extensible\n\nWhile the standard NeuroML elements (Tables 1 and 2) provide a broad range of curated model types for simulation-based investigations, NeuroML can be extended (using LEMS) to incorporate novel model elements and types when they are not (yet) available in the standard.\n\nLEMS is a general purpose model specification language for creating fully machine readable definitions of the structure and behavior of model elements (Cannon et al., 2014). The dynamics of NeuroML elements are described in LEMS. The hierarchical nature of LEMS means that new elements can build on pre-existing elements of the modular NeuroML framework. For example, a novel ionic conductance element can extend the ‘ionChannelHH’ element, which in turn extends ‘baseIonChannel.’ Thus, the new element will be known to the NeuroML elements as depending on an external voltage and producing a conductance, properties that are inherited from ‘baseIonChannel.’ Other elements, such as a cell, can incorporate this new type without needing any other information about its internal workings.\n\nLEMS (and, therefore, NeuroML) element definitions (called ‘ComponentTypes’) specify the dynamical behavior of the model element in terms of a list of yet to be set parameters. Once the generic model behavior is defined, modelers only need to fill in the appropriate values of the required parameters (e.g. conductance density, reversal potential, etc.) to create new instances (called ‘Components’) of the element (see Methods for more details). Users can, therefore create arbitrary, reusable model elements in LEMS, which can be treated the same way as the standard model elements (for an example see Guide 7 in Table 5).\n\nAnother major advantage of NeuroML’s use of the LEMS language is its translatability. Since LEMS is fully machine readable, its primitives (e.g. state variables and their dynamics, expressed as ordinary differential equations) can be readily mapped into other languages. As a result, simulator specific code (Blundell et al., 2018) can be generated from NeuroML models and their LEMS extensions, allowing NeuroML to remain simulator-independent while supporting multiple simulation engines.\n\nNewly created elements that may be of interest to the wider research community can be submitted to the NeuroML Editorial Board for inclusion into the standard. The standard, therefore, evolves as new model elements are added and improved versions of the standard and associated software tool chain are regularly released to the community.\n\n# NeuroML is a global open community initiative\n\nNeuroML is a global open community standard that is used and maintained collectively by a diverse set of stakeholders. The NeuroML Scientific Committee (https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html) and the elected NeuroML Editorial Board (https://docs.neuroml.org/NeuroMLOrg/Board.html) oversee the standard, the core tools, and the initiative. This ensures that NeuroML supports the myriad of use cases generated by a multidisciplinary computational modeling community.\n\nNeuroML is an endorsed INCF (Abrams et al., 2022) community standard (Martone and Das, 2019) and is one of the main standards of the international COMBINE initiative (Hucka et al., 2015), which supports the development of other standards in computational biology as well (e.g. SBML (Hucka et al., 2003) and CellML Lloyd et al., 2004). Participation in these organizations guarantees that NeuroML follows current best practices in standardization, and remains linked to and interoperable with other standards wherever possible. The NeuroML community also participates in training and outreach activities such as Google Summer of Code (https://docs.neuroml.org/NeuroMLOrg/OutreachTraining.html), tutorials, and internships under these and other organizations.\n\nThe NeuroML community maintains public open communication channels to ensure that all community members can easily participate in troubleshooting, discussions, and development activities. A public mailing list (https://lists.sourceforge.net/lists/listinfo/neuroml-technology) is used for asynchronous communication and announcements while open chat channels on Gitter (now Matrix/Element (#/NeuroML_community:gitter.im)) provide immediate access to the NeuroML community.\n\nAll software repositories hosted on GitHub also have issue trackers for software specific queries. A community Code of Conduct (https://docs.neuroml.org/NeuroMLOrg/CoC.html) sets the standards of communication and behavior expected on all community channels.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"NeuroML is extensible","md":"# NeuroML is extensible","bBox":{"x":168.53,"y":51.07,"w":128,"h":12}},{"type":"text","value":"While the standard NeuroML elements (Tables 1 and 2) provide a broad range of curated model types for simulation-based investigations, NeuroML can be extended (using LEMS) to incorporate novel model elements and types when they are not (yet) available in the standard.\n\nLEMS is a general purpose model specification language for creating fully machine readable definitions of the structure and behavior of model elements (Cannon et al., 2014). The dynamics of NeuroML elements are described in LEMS. The hierarchical nature of LEMS means that new elements can build on pre-existing elements of the modular NeuroML framework. For example, a novel ionic conductance element can extend the ‘ionChannelHH’ element, which in turn extends ‘baseIonChannel.’ Thus, the new element will be known to the NeuroML elements as depending on an external voltage and producing a conductance, properties that are inherited from ‘baseIonChannel.’ Other elements, such as a cell, can incorporate this new type without needing any other information about its internal workings.\n\nLEMS (and, therefore, NeuroML) element definitions (called ‘ComponentTypes’) specify the dynamical behavior of the model element in terms of a list of yet to be set parameters. Once the generic model behavior is defined, modelers only need to fill in the appropriate values of the required parameters (e.g. conductance density, reversal potential, etc.) to create new instances (called ‘Components’) of the element (see Methods for more details). Users can, therefore create arbitrary, reusable model elements in LEMS, which can be treated the same way as the standard model elements (for an example see Guide 7 in Table 5).\n\nAnother major advantage of NeuroML’s use of the LEMS language is its translatability. Since LEMS is fully machine readable, its primitives (e.g. state variables and their dynamics, expressed as ordinary differential equations) can be readily mapped into other languages. As a result, simulator specific code (Blundell et al., 2018) can be generated from NeuroML models and their LEMS extensions, allowing NeuroML to remain simulator-independent while supporting multiple simulation engines.\n\nNewly created elements that may be of interest to the wider research community can be submitted to the NeuroML Editorial Board for inclusion into the standard. The standard, therefore, evolves as new model elements are added and improved versions of the standard and associated software tool chain are regularly released to the community.","md":"While the standard NeuroML elements (Tables 1 and 2) provide a broad range of curated model types for simulation-based investigations, NeuroML can be extended (using LEMS) to incorporate novel model elements and types when they are not (yet) available in the standard.\n\nLEMS is a general purpose model specification language for creating fully machine readable definitions of the structure and behavior of model elements (Cannon et al., 2014). The dynamics of NeuroML elements are described in LEMS. The hierarchical nature of LEMS means that new elements can build on pre-existing elements of the modular NeuroML framework. For example, a novel ionic conductance element can extend the ‘ionChannelHH’ element, which in turn extends ‘baseIonChannel.’ Thus, the new element will be known to the NeuroML elements as depending on an external voltage and producing a conductance, properties that are inherited from ‘baseIonChannel.’ Other elements, such as a cell, can incorporate this new type without needing any other information about its internal workings.\n\nLEMS (and, therefore, NeuroML) element definitions (called ‘ComponentTypes’) specify the dynamical behavior of the model element in terms of a list of yet to be set parameters. Once the generic model behavior is defined, modelers only need to fill in the appropriate values of the required parameters (e.g. conductance density, reversal potential, etc.) to create new instances (called ‘Components’) of the element (see Methods for more details). Users can, therefore create arbitrary, reusable model elements in LEMS, which can be treated the same way as the standard model elements (for an example see Guide 7 in Table 5).\n\nAnother major advantage of NeuroML’s use of the LEMS language is its translatability. Since LEMS is fully machine readable, its primitives (e.g. state variables and their dynamics, expressed as ordinary differential equations) can be readily mapped into other languages. As a result, simulator specific code (Blundell et al., 2018) can be generated from NeuroML models and their LEMS extensions, allowing NeuroML to remain simulator-independent while supporting multiple simulation engines.\n\nNewly created elements that may be of interest to the wider research community can be submitted to the NeuroML Editorial Board for inclusion into the standard. The standard, therefore, evolves as new model elements are added and improved versions of the standard and associated software tool chain are regularly released to the community.","bBox":{"x":168.53,"y":79.07,"w":415,"h":435.98}},{"type":"heading","lvl":1,"value":"NeuroML is a global open community initiative","md":"# NeuroML is a global open community initiative","bBox":{"x":168.53,"y":430.06,"w":265,"h":12}},{"type":"text","value":"NeuroML is a global open community standard that is used and maintained collectively by a diverse set of stakeholders. The NeuroML Scientific Committee (https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html) and the elected NeuroML Editorial Board (https://docs.neuroml.org/NeuroMLOrg/Board.html) oversee the standard, the core tools, and the initiative. This ensures that NeuroML supports the myriad of use cases generated by a multidisciplinary computational modeling community.\n\nNeuroML is an endorsed INCF (Abrams et al., 2022) community standard (Martone and Das, 2019) and is one of the main standards of the international COMBINE initiative (Hucka et al., 2015), which supports the development of other standards in computational biology as well (e.g. SBML (Hucka et al., 2003) and CellML Lloyd et al., 2004). Participation in these organizations guarantees that NeuroML follows current best practices in standardization, and remains linked to and interoperable with other standards wherever possible. The NeuroML community also participates in training and outreach activities such as Google Summer of Code (https://docs.neuroml.org/NeuroMLOrg/OutreachTraining.html), tutorials, and internships under these and other organizations.\n\nThe NeuroML community maintains public open communication channels to ensure that all community members can easily participate in troubleshooting, discussions, and development activities. A public mailing list (https://lists.sourceforge.net/lists/listinfo/neuroml-technology) is used for asynchronous communication and announcements while open chat channels on Gitter (now Matrix/Element (#/NeuroML_community:gitter.im)) provide immediate access to the NeuroML community.\n\nAll software repositories hosted on GitHub also have issue trackers for software specific queries. A community Code of Conduct (https://docs.neuroml.org/NeuroMLOrg/CoC.html) sets the standards of communication and behavior expected on all community channels.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"NeuroML is a global open community standard that is used and maintained collectively by a diverse set of stakeholders. The NeuroML Scientific Committee (https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html) and the elected NeuroML Editorial Board (https://docs.neuroml.org/NeuroMLOrg/Board.html) oversee the standard, the core tools, and the initiative. This ensures that NeuroML supports the myriad of use cases generated by a multidisciplinary computational modeling community.\n\nNeuroML is an endorsed INCF (Abrams et al., 2022) community standard (Martone and Das, 2019) and is one of the main standards of the international COMBINE initiative (Hucka et al., 2015), which supports the development of other standards in computational biology as well (e.g. SBML (Hucka et al., 2003) and CellML Lloyd et al., 2004). Participation in these organizations guarantees that NeuroML follows current best practices in standardization, and remains linked to and interoperable with other standards wherever possible. The NeuroML community also participates in training and outreach activities such as Google Summer of Code (https://docs.neuroml.org/NeuroMLOrg/OutreachTraining.html), tutorials, and internships under these and other organizations.\n\nThe NeuroML community maintains public open communication channels to ensure that all community members can easily participate in troubleshooting, discussions, and development activities. A public mailing list (https://lists.sourceforge.net/lists/listinfo/neuroml-technology) is used for asynchronous communication and announcements while open chat channels on Gitter (now Matrix/Element (#/NeuroML_community:gitter.im)) provide immediate access to the NeuroML community.\n\nAll software repositories hosted on GitHub also have issue trackers for software specific queries. A community Code of Conduct (https://docs.neuroml.org/NeuroMLOrg/CoC.html) sets the standards of communication and behavior expected on all community channels.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":446.06,"w":409.36,"h":272.93}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html","text":" "},{"url":"https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html","text":"ScientiﬁcCommittee.html) and the elected NeuroML Editorial Board (https://docs.neuroml.org/"},{"url":"https://docs.neuroml.org/NeuroMLOrg/Board.html","text":" "},{"url":"https://docs.neuroml.org/NeuroMLOrg/Board.html","text":"NeuroMLOrg/Board.html) oversee the standard, the core tools, and the initiative. This ensures that "},{"url":"https://docs.neuroml.org/NeuroMLOrg/OutreachTraining.html","text":" "},{"url":"https://docs.neuroml.org/NeuroMLOrg/OutreachTraining.html","text":"org/NeuroMLOrg/OutreachTraining.html), tutorials, and internships under these and other "},{"url":"https://lists.sourceforge.net/lists/listinfo/neuroml-technology","text":""},{"url":"https://docs.neuroml.org/NeuroMLOrg/CoC.html","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.552},{"page":26,"text":"          Tools  and  resources                                                                                                                                                                                                                     Neuroscience\n                                                                                                                                                                                                                                                    A crucial aim of NeuroML is to enable Open Science and ensure models in computational neuro-\n                                science are FAIR. To this end, all development and discussions related to NeuroML are done publicly.      science are FAIR. To this end, all development and discussions related to NeuroML are done publicly.      science are FAIR. To this end, all development and discussions related to NeuroML are done publicly.\n                                The schema, all core software tools, and relevant resources such as documentation are made freely         The schema, all core software tools, and relevant resources such as documentation are made freely         The schema, all core software tools, and relevant resources such as documentation are made freely\n                                available under suitable Free/Open Source Software (FOSS) licenses on public platforms. Everyone          available under suitable Free/Open Source Software (FOSS) licenses on public platforms. Everyone          available under suitable Free/Open Source Software (FOSS) licenses on public platforms. Everyone\n                                can, therefore, use, modify, study, and share all NeuroML artifacts without restriction. Users and devel- can, therefore, use, modify, study, and share all NeuroML artifacts without restriction. Users and devel- can, therefore, use, modify, study, and share all NeuroML artifacts without restriction. Users and devel-\n                                opers are encouraged to contribute modiﬁcations and improvements to the schema and core tools             opers are encouraged to contribute modiﬁcations and improvements to the schema and core tools             opers are encouraged to contribute modiﬁcations and improvements to the schema and core tools\n                                and to participate in the general maintenance and release process.                                        and to participate in the general maintenance and release process.                                        and to participate in the general maintenance and release process.\n                                Discussion                                                                                                Discussion                                                                                                Discussion\n                                NeuroMLv2 has matured into a widely adopted community standard for computational neurosci-                NeuroMLv2 has matured into a widely adopted community standard for computational neurosci-                NeuroMLv2 has matured into a widely adopted community standard for computational neurosci-\n                                ence. Its modular, hierarchical structure can deﬁne a wide range of neuronal and circuit model types      ence. Its modular, hierarchical structure can deﬁne a wide range of neuronal and circuit model types      ence. Its modular, hierarchical structure can deﬁne a wide range of neuronal and circuit model types\n                                including simpliﬁed representations and those with a high degree of biological detail. The standard-      including simpliﬁed representations and those with a high degree of biological detail. The standard-      including simpliﬁed representations and those with a high degree of biological detail. The standard-\n                                ized, machine readable format of the NeuroMLv2/LEMS framework provides a ﬂexible, common                  ized, machine readable format of the NeuroMLv2/LEMS framework provides a ﬂexible, common                  ized, machine readable format of the NeuroMLv2/LEMS framework provides a ﬂexible, common\n                                language for communicating between a wide range of tools and simulators used to create, validate,         language for communicating between a wide range of tools and simulators used to create, validate,         language for communicating between a wide range of tools and simulators used to create, validate,\n                                visualize, analyze, simulate, share, and reuse models. By enabling this interoperability, NeuroMLv2       visualize, analyze, simulate, share, and reuse models. By enabling this interoperability, NeuroMLv2       visualize, analyze, simulate, share, and reuse models. By enabling this interoperability, NeuroMLv2\n                                has spawned a large ecosystem of interacting tools that cover all stages of the model development         has spawned a large ecosystem of interacting tools that cover all stages of the model development         has spawned a large ecosystem of interacting tools that cover all stages of the model development\n                                life cycle, bringing greater coherence to a previously fragmented landscape. Moreover, the modular        life cycle, bringing greater coherence to a previously fragmented landscape. Moreover, the modular        life cycle, bringing greater coherence to a previously fragmented landscape. Moreover, the modular\n                                nature of the model components and hierarchical structure conferred by NeuroMLv2, combined with           nature of the model components and hierarchical structure conferred by NeuroMLv2, combined with           nature of the model components and hierarchical structure conferred by NeuroMLv2, combined with\n                                the ﬂexibility of coding in Python, has created a powerful ‘building block’ approach for constructing     the ﬂexibility of coding in Python, has created a powerful ‘building block’ approach for constructing     the ﬂexibility of coding in Python, has created a powerful ‘building block’ approach for constructing\n                                standardized models from scratch.                                                                         standardized models from scratch.                                                                         standardized models from scratch.\n                                                                                                                                                                                                                                                    NeuroML has, therefore, evolved from a standardized archiving format into a mature language\n                                that supports an ecosystem of tools for the creation and execution of models that support the FAIR        that supports an ecosystem of tools for the creation and execution of models that support the FAIR        that supports an ecosystem of tools for the creation and execution of models that support the FAIR\n                                principles and promote open, transparent, and reproducible science.                                       principles and promote open, transparent, and reproducible science.                                       principles and promote open, transparent, and reproducible science.\n                                Evolution of NeuroML and emergence of the NeuroMLv2 tool                                                  Evolution of NeuroML and emergence of the NeuroMLv2 tool                                                  Evolution of NeuroML and emergence of the NeuroMLv2 tool\n                                ecosystem                                                                                                 ecosystem                                                                                                 ecosystem\n                                NeuroML was conceived (Goddard et al., 2001) and developed (Gleeson et al., 2010) as a declar             NeuroML was conceived (Goddard et al., 2001) and developed (Gleeson et al., 2010) as a declar             NeuroML was conceived (Goddard et al., 2001) and developed (Gleeson et al., 2010) as a declar -\n                                ative XML-                                                                                                ative XML-                                                                                                ative XML-\n                                                                                                                                                                                                                                                    based framework for deﬁning biophysical models of neurons and networks in a standard-\n                                ized form in order to compare model properties across simulators and to promote transparency and          ized form in order to compare model properties across simulators and to promote transparency and          ized form in order to compare model properties across simulators and to promote transparency and\n                                reuse. NeuroML version 1 achieved these aims and was mainly used to archive and visualize existing        reuse. NeuroML version 1 achieved these aims and was mainly used to archive and visualize existing        reuse. NeuroML version 1 achieved these aims and was mainly used to archive and visualize existing\n                                models (Gleeson et  al., 2010). Building on this, the subsequent development of the NeuroMLv2/            models (Gleeson et  al., 2010). Building on this, the subsequent development of the NeuroMLv2/            models (Gleeson et  al., 2010). Building on this, the subsequent development of the NeuroMLv2/\n                                LEMS framework provided a way to describe models as a hierarchical set of components with dimen-          LEMS framework provided a way to describe models as a hierarchical set of components with dimen-          LEMS framework provided a way to describe models as a hierarchical set of components with dimen-\n                                sional parameters and state variables, so that their structure and dynamics are fully machine readable    sional parameters and state variables, so that their structure and dynamics are fully machine readable    sional parameters and state variables, so that their structure and dynamics are fully machine readable\n                                (Cannon et al., 2014). This enabled models to be losslessly mapped to other representations, greatly      (Cannon et al., 2014). This enabled models to be losslessly mapped to other representations, greatly      (Cannon et al., 2014). This enabled models to be losslessly mapped to other representations, greatly\n                                promoting interoperability between tools through read-                                                    promoting interoperability between tools through read-                                                    promoting interoperability between tools through read-\n                                                                                                                                                                                                                                                    write and automated code generation (Blun‐\n                                dell et al., 2018). As NeuroMLv2 matured and became a community standard recognized by the INCF           dell et al., 2018). As NeuroMLv2 matured and became a community standard recognized by the INCF           dell et al., 2018). As NeuroMLv2 matured and became a community standard recognized by the INCF\n                                with a formal governance structure, an increasingly wide range of models and modeling tools have          with a formal governance structure, an increasingly wide range of models and modeling tools have          with a formal governance structure, an increasingly wide range of models and modeling tools have\n                                been developed or modiﬁed to be NeuroMLv2 compliant (Tables 8, 3 and 4). The core tools, main-            been developed or modiﬁed to be NeuroMLv2 compliant (Tables 8, 3 and 4). The core tools, main-            been developed or modiﬁed to be NeuroMLv2 compliant (Tables 8, 3 and 4). The core tools, main-\n                                tained directly by the NeuroML developers (Figure 4), provide functionality to read, modify, or create    tained directly by the NeuroML developers (Figure 4), provide functionality to read, modify, or create    tained directly by the NeuroML developers (Figure 4), provide functionality to read, modify, or create\n                                new NeuroML models, as well as to analyze and visualize, and simulate the models. Furthermore,            new NeuroML models, as well as to analyze and visualize, and simulate the models. Furthermore,            new NeuroML models, as well as to analyze and visualize, and simulate the models. Furthermore,\n                                there are now a larger number of tools that have been developed by other members of the commu-            there are now a larger number of tools that have been developed by other members of the commu-            there are now a larger number of tools that have been developed by other members of the commu-\n                                nity (Figure 3) including a neuronal simulator designed speciﬁcally for NeuroMLv2 (Panagiotou et al.,     nity (Figure 3) including a neuronal simulator designed speciﬁcally for NeuroMLv2 (Panagiotou et al.,     nity (Figure 3) including a neuronal simulator designed speciﬁcally for NeuroMLv2 (Panagiotou et al.,\n                                2022). The emergence of an ecosystem of NeuroMLv2 compliant tools enables modelers to build tool          2022). The emergence of an ecosystem of NeuroMLv2 compliant tools enables modelers to build tool          2022). The emergence of an ecosystem of NeuroMLv2 compliant tools enables modelers to build tool\n                                chains that span the model life cycle and build and reuse standardized models.                            chains that span the model life cycle and build and reuse standardized models.                            chains that span the model life cycle and build and reuse standardized models.\n                                NeuroML and other standards in computational neuroscience                                                 NeuroML and other standards in computational neuroscience                                                 NeuroML and other standards in computational neuroscience\n                                Several other standards and formats exist to support computational modeling of neuronal systems.          Several other standards and formats exist to support computational modeling of neuronal systems.          Several other standards and formats exist to support computational modeling of neuronal systems.\n                                Whereas NeuroML is a modular, declarative simulator independent standard for biophysical neuronal         Whereas NeuroML is a modular, declarative simulator independent standard for biophysical neuronal         Whereas NeuroML is a modular, declarative simulator independent standard for biophysical neuronal\n                                modeling, PyNN (Davison et al., 2008) and SONATA (Dai et al., 2020) provide a procedural Python-          modeling, PyNN (Davison et al., 2008) and SONATA (Dai et al., 2020) provide a procedural Python-          modeling, PyNN (Davison et al., 2008) and SONATA (Dai et al., 2020) provide a procedural Python-\n                                based simulator independent API and a framework for efﬁciently handling large-                            based simulator independent API and a framework for efﬁciently handling large-                            based simulator independent API and a framework for efﬁciently handling large-\n                                                                                                                                                                                                                                                    scale network simula-\n                                tions, respectively. Even though there is some overlap in the functionality provided by these standards,  tions, respectively. Even though there is some overlap in the functionality provided by these standards,  tions, respectively. Even though there is some overlap in the functionality provided by these standards,\n                                they each target distinct use cases and have their own goals and features. The teams developing these     they each target distinct use cases and have their own goals and features. The teams developing these     they each target distinct use cases and have their own goals and features. The teams developing these\n                                standards work in concert to ensure that they remain interoperable with each other, frequently sharing    standards work in concert to ensure that they remain interoperable with each other, frequently sharing    standards work in concert to ensure that they remain interoperable with each other, frequently sharing\n                                methods and techniques (Dai et al., 2020). This allows researchers to use their standard of choice and    methods and techniques (Dai et al., 2020). This allows researchers to use their standard of choice and    methods and techniques (Dai et al., 2020). This allows researchers to use their standard of choice and\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                               26 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nA crucial aim of NeuroML is to enable Open Science and ensure models in computational neuroscience are FAIR. To this end, all development and discussions related to NeuroML are done publicly. The schema, all core software tools, and relevant resources such as documentation are made freely available under suitable Free/Open Source Software (FOSS) licenses on public platforms. Everyone can, therefore, use, modify, study, and share all NeuroML artifacts without restriction. Users and developers are encouraged to contribute modifications and improvements to the schema and core tools and to participate in the general maintenance and release process.\n\n# Discussion\n\nNeuroMLv2 has matured into a widely adopted community standard for computational neuroscience. Its modular, hierarchical structure can define a wide range of neuronal and circuit model types including simplified representations and those with a high degree of biological detail. The standardized, machine readable format of the NeuroMLv2/LEMS framework provides a flexible, common language for communicating between a wide range of tools and simulators used to create, validate, visualize, analyze, simulate, share, and reuse models. By enabling this interoperability, NeuroMLv2 has spawned a large ecosystem of interacting tools that cover all stages of the model development life cycle, bringing greater coherence to a previously fragmented landscape. Moreover, the modular nature of the model components and hierarchical structure conferred by NeuroMLv2, combined with the flexibility of coding in Python, has created a powerful ‘building block’ approach for constructing standardized models from scratch.\n\nNeuroML has, therefore, evolved from a standardized archiving format into a mature language that supports an ecosystem of tools for the creation and execution of models that support the FAIR principles and promote open, transparent, and reproducible science.\n\n# Evolution of NeuroML and emergence of the NeuroMLv2 tool ecosystem\n\nNeuroML was conceived (Goddard et al., 2001) and developed (Gleeson et al., 2010) as a declarative XML-based framework for defining biophysical models of neurons and networks in a standardized form in order to compare model properties across simulators and to promote transparency and reuse. NeuroML version 1 achieved these aims and was mainly used to archive and visualize existing models (Gleeson et al., 2010). Building on this, the subsequent development of the NeuroMLv2/LEMS framework provided a way to describe models as a hierarchical set of components with dimensional parameters and state variables, so that their structure and dynamics are fully machine readable (Cannon et al., 2014). This enabled models to be losslessly mapped to other representations, greatly promoting interoperability between tools through read-write and automated code generation (Blundell et al., 2018). As NeuroMLv2 matured and became a community standard recognized by the INCF with a formal governance structure, an increasingly wide range of models and modeling tools have been developed or modified to be NeuroMLv2 compliant (Tables 8, 3 and 4). The core tools, maintained directly by the NeuroML developers (Figure 4), provide functionality to read, modify, or create new NeuroML models, as well as to analyze and visualize, and simulate the models. Furthermore, there are now a larger number of tools that have been developed by other members of the community (Figure 3) including a neuronal simulator designed specifically for NeuroMLv2 (Panagiotou et al., 2022). The emergence of an ecosystem of NeuroMLv2 compliant tools enables modelers to build tool chains that span the model life cycle and build and reuse standardized models.\n\n# NeuroML and other standards in computational neuroscience\n\nSeveral other standards and formats exist to support computational modeling of neuronal systems. Whereas NeuroML is a modular, declarative simulator independent standard for biophysical neuronal modeling, PyNN (Davison et al., 2008) and SONATA (Dai et al., 2020) provide a procedural Python-based simulator independent API and a framework for efficiently handling large-scale network simulations, respectively. Even though there is some overlap in the functionality provided by these standards, they each target distinct use cases and have their own goals and features. The teams developing these standards work in concert to ensure that they remain interoperable with each other, frequently sharing methods and techniques (Dai et al., 2020). This allows researchers to use their standard of choice and...\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"A crucial aim of NeuroML is to enable Open Science and ensure models in computational neuroscience are FAIR. To this end, all development and discussions related to NeuroML are done publicly. The schema, all core software tools, and relevant resources such as documentation are made freely available under suitable Free/Open Source Software (FOSS) licenses on public platforms. Everyone can, therefore, use, modify, study, and share all NeuroML artifacts without restriction. Users and developers are encouraged to contribute modifications and improvements to the schema and core tools and to participate in the general maintenance and release process.","md":"A crucial aim of NeuroML is to enable Open Science and ensure models in computational neuroscience are FAIR. To this end, all development and discussions related to NeuroML are done publicly. The schema, all core software tools, and relevant resources such as documentation are made freely available under suitable Free/Open Source Software (FOSS) licenses on public platforms. Everyone can, therefore, use, modify, study, and share all NeuroML artifacts without restriction. Users and developers are encouraged to contribute modifications and improvements to the schema and core tools and to participate in the general maintenance and release process.","bBox":{"x":168.53,"y":34.63,"w":410,"h":135.58}},{"type":"heading","lvl":1,"value":"Discussion","md":"# Discussion","bBox":{"x":168.53,"y":156.22,"w":69,"h":14}},{"type":"text","value":"NeuroMLv2 has matured into a widely adopted community standard for computational neuroscience. Its modular, hierarchical structure can define a wide range of neuronal and circuit model types including simplified representations and those with a high degree of biological detail. The standardized, machine readable format of the NeuroMLv2/LEMS framework provides a flexible, common language for communicating between a wide range of tools and simulators used to create, validate, visualize, analyze, simulate, share, and reuse models. By enabling this interoperability, NeuroMLv2 has spawned a large ecosystem of interacting tools that cover all stages of the model development life cycle, bringing greater coherence to a previously fragmented landscape. Moreover, the modular nature of the model components and hierarchical structure conferred by NeuroMLv2, combined with the flexibility of coding in Python, has created a powerful ‘building block’ approach for constructing standardized models from scratch.\n\nNeuroML has, therefore, evolved from a standardized archiving format into a mature language that supports an ecosystem of tools for the creation and execution of models that support the FAIR principles and promote open, transparent, and reproducible science.","md":"NeuroMLv2 has matured into a widely adopted community standard for computational neuroscience. Its modular, hierarchical structure can define a wide range of neuronal and circuit model types including simplified representations and those with a high degree of biological detail. The standardized, machine readable format of the NeuroMLv2/LEMS framework provides a flexible, common language for communicating between a wide range of tools and simulators used to create, validate, visualize, analyze, simulate, share, and reuse models. By enabling this interoperability, NeuroMLv2 has spawned a large ecosystem of interacting tools that cover all stages of the model development life cycle, bringing greater coherence to a previously fragmented landscape. Moreover, the modular nature of the model components and hierarchical structure conferred by NeuroMLv2, combined with the flexibility of coding in Python, has created a powerful ‘building block’ approach for constructing standardized models from scratch.\n\nNeuroML has, therefore, evolved from a standardized archiving format into a mature language that supports an ecosystem of tools for the creation and execution of models that support the FAIR principles and promote open, transparent, and reproducible science.","bBox":{"x":168.53,"y":34.63,"w":409,"h":344.71}},{"type":"heading","lvl":1,"value":"Evolution of NeuroML and emergence of the NeuroMLv2 tool ecosystem","md":"# Evolution of NeuroML and emergence of the NeuroMLv2 tool ecosystem","bBox":{"x":168.53,"y":353.35,"w":355,"h":26}},{"type":"text","value":"NeuroML was conceived (Goddard et al., 2001) and developed (Gleeson et al., 2010) as a declarative XML-based framework for defining biophysical models of neurons and networks in a standardized form in order to compare model properties across simulators and to promote transparency and reuse. NeuroML version 1 achieved these aims and was mainly used to archive and visualize existing models (Gleeson et al., 2010). Building on this, the subsequent development of the NeuroMLv2/LEMS framework provided a way to describe models as a hierarchical set of components with dimensional parameters and state variables, so that their structure and dynamics are fully machine readable (Cannon et al., 2014). This enabled models to be losslessly mapped to other representations, greatly promoting interoperability between tools through read-write and automated code generation (Blundell et al., 2018). As NeuroMLv2 matured and became a community standard recognized by the INCF with a formal governance structure, an increasingly wide range of models and modeling tools have been developed or modified to be NeuroMLv2 compliant (Tables 8, 3 and 4). The core tools, maintained directly by the NeuroML developers (Figure 4), provide functionality to read, modify, or create new NeuroML models, as well as to analyze and visualize, and simulate the models. Furthermore, there are now a larger number of tools that have been developed by other members of the community (Figure 3) including a neuronal simulator designed specifically for NeuroMLv2 (Panagiotou et al., 2022). The emergence of an ecosystem of NeuroMLv2 compliant tools enables modelers to build tool chains that span the model life cycle and build and reuse standardized models.","md":"NeuroML was conceived (Goddard et al., 2001) and developed (Gleeson et al., 2010) as a declarative XML-based framework for defining biophysical models of neurons and networks in a standardized form in order to compare model properties across simulators and to promote transparency and reuse. NeuroML version 1 achieved these aims and was mainly used to archive and visualize existing models (Gleeson et al., 2010). Building on this, the subsequent development of the NeuroMLv2/LEMS framework provided a way to describe models as a hierarchical set of components with dimensional parameters and state variables, so that their structure and dynamics are fully machine readable (Cannon et al., 2014). This enabled models to be losslessly mapped to other representations, greatly promoting interoperability between tools through read-write and automated code generation (Blundell et al., 2018). As NeuroMLv2 matured and became a community standard recognized by the INCF with a formal governance structure, an increasingly wide range of models and modeling tools have been developed or modified to be NeuroMLv2 compliant (Tables 8, 3 and 4). The core tools, maintained directly by the NeuroML developers (Figure 4), provide functionality to read, modify, or create new NeuroML models, as well as to analyze and visualize, and simulate the models. Furthermore, there are now a larger number of tools that have been developed by other members of the community (Figure 3) including a neuronal simulator designed specifically for NeuroMLv2 (Panagiotou et al., 2022). The emergence of an ecosystem of NeuroMLv2 compliant tools enables modelers to build tool chains that span the model life cycle and build and reuse standardized models.","bBox":{"x":168.53,"y":367.35,"w":414.31,"h":228.95}},{"type":"heading","lvl":1,"value":"NeuroML and other standards in computational neuroscience","md":"# NeuroML and other standards in computational neuroscience","bBox":{"x":168.53,"y":34.63,"w":406.11,"h":587.84}},{"type":"text","value":"Several other standards and formats exist to support computational modeling of neuronal systems. Whereas NeuroML is a modular, declarative simulator independent standard for biophysical neuronal modeling, PyNN (Davison et al., 2008) and SONATA (Dai et al., 2020) provide a procedural Python-based simulator independent API and a framework for efficiently handling large-scale network simulations, respectively. Even though there is some overlap in the functionality provided by these standards, they each target distinct use cases and have their own goals and features. The teams developing these standards work in concert to ensure that they remain interoperable with each other, frequently sharing methods and techniques (Dai et al., 2020). This allows researchers to use their standard of choice and...\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Several other standards and formats exist to support computational modeling of neuronal systems. Whereas NeuroML is a modular, declarative simulator independent standard for biophysical neuronal modeling, PyNN (Davison et al., 2008) and SONATA (Dai et al., 2020) provide a procedural Python-based simulator independent API and a framework for efficiently handling large-scale network simulations, respectively. Even though there is some overlap in the functionality provided by these standards, they each target distinct use cases and have their own goals and features. The teams developing these standards work in concert to ensure that they remain interoperable with each other, frequently sharing methods and techniques (Dai et al., 2020). This allows researchers to use their standard of choice and...\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":383.35,"w":417,"h":324.11}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.352},{"page":27,"text":"           Tools  and  resources                                                                                                                                                                                                                                                                                                                                                                                                                                                Neuroscience\n                                easily combine with another if the need arises. PyNN and SONATA are, therefore, integral parts of the       easily combine with another if the need arises. PyNN and SONATA are, therefore, integral parts of the       easily combine with another if the need arises. PyNN and SONATA are, therefore, integral parts of the       easily combine with another if the need arises. PyNN and SONATA are, therefore, integral parts of the       easily combine with another if the need arises. PyNN and SONATA are, therefore, integral parts of the\n                                wider NeuroML ecosystem.                                                                                    wider NeuroML ecosystem.                                                                                    wider NeuroML ecosystem.                                                                                    wider NeuroML ecosystem.                                                                                    wider NeuroML ecosystem.\n                                Why using NeuroML and Python promotes the construction of FAIR                                              Why using NeuroML and Python promotes the construction of FAIR                                              Why using NeuroML and Python promotes the construction of FAIR                                              Why using NeuroML and Python promotes the construction of FAIR                                              Why using NeuroML and Python promotes the construction of FAIR\n                                models                                                                                                      models                                                                                                      models                                                                                                      models                                                                                                      models\n                                The modular and hierarchical structure of NeuroMLv2, when combined with Python, provides a                  The modular and hierarchical structure of NeuroMLv2, when combined with Python, provides a                  The modular and hierarchical structure of NeuroMLv2, when combined with Python, provides a                  The modular and hierarchical structure of NeuroMLv2, when combined with Python, provides a                  The modular and hierarchical structure of NeuroMLv2, when combined with Python, provides a\n                                powerful combination of structured declarative elements and ﬂexible procedural approaches that              powerful combination of structured declarative elements and ﬂexible procedural approaches that              powerful combination of structured declarative elements and ﬂexible procedural approaches that              powerful combination of structured declarative elements and ﬂexible procedural approaches that              powerful combination of structured declarative elements and ﬂexible procedural approaches that\n                                enables a ‘Lego-                                                                                            enables a ‘Lego-                                                                                            enables a ‘Lego-                                                                                            enables a ‘Lego-                                                                                            enables a ‘Lego-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                like’ building block approach for constructing biologically detailed models (Cayco‐\n                                Gajic et al., 2017;  Billings et al., 2014;  Kriener et al., 2022;  Gurnani and Silver, 2021). This has     Gajic et al., 2017;  Billings et al., 2014;  Kriener et al., 2022;  Gurnani and Silver, 2021). This has     Gajic et al., 2017;  Billings et al., 2014;  Kriener et al., 2022;  Gurnani and Silver, 2021). This has     Gajic et al., 2017;  Billings et al., 2014;  Kriener et al., 2022;  Gurnani and Silver, 2021). This has     Gajic et al., 2017;  Billings et al., 2014;  Kriener et al., 2022;  Gurnani and Silver, 2021). This has\n                                been advanced by the development of pyNeuroML, which provides a single installable package                  been advanced by the development of pyNeuroML, which provides a single installable package                  been advanced by the development of pyNeuroML, which provides a single installable package                  been advanced by the development of pyNeuroML, which provides a single installable package                  been advanced by the development of pyNeuroML, which provides a single installable package\n                                offering direct access to a range of functionality for handling NeuroML models (Figure  6). More-           offering direct access to a range of functionality for handling NeuroML models (Figure  6). More-           offering direct access to a range of functionality for handling NeuroML models (Figure  6). More-           offering direct access to a range of functionality for handling NeuroML models (Figure  6). More-           offering direct access to a range of functionality for handling NeuroML models (Figure  6). More-\n                                over, the web-based documentation of NeuroMLv2, with multiple Python scripts illustrating the usage         over, the web-based documentation of NeuroMLv2, with multiple Python scripts illustrating the usage         over, the web-based documentation of NeuroMLv2, with multiple Python scripts illustrating the usage         over, the web-based documentation of NeuroMLv2, with multiple Python scripts illustrating the usage         over, the web-based documentation of NeuroMLv2, with multiple Python scripts illustrating the usage\n                                of the language and associated tools (Table 5), has recently been updated and expanded (https://            of the language and associated tools (Table 5), has recently been updated and expanded (https://            of the language and associated tools (Table 5), has recently been updated and expanded (https://            of the language and associated tools (Table 5), has recently been updated and expanded (https://            of the language and associated tools (Table 5), has recently been updated and expanded (https://\n                                docs.neuroml.org). This provides a central resource for both new and experienced users of NeuroML           docs.neuroml.org). This provides a central resource for both new and experienced users of NeuroML           docs.neuroml.org). This provides a central resource for both new and experienced users of NeuroML           docs.neuroml.org). This provides a central resource for both new and experienced users of NeuroML           docs.neuroml.org). This provides a central resource for both new and experienced users of NeuroML\n                                supporting its use in model building. As the examples of this resource illustrate, building models          supporting its use in model building. As the examples of this resource illustrate, building models          supporting its use in model building. As the examples of this resource illustrate, building models          supporting its use in model building. As the examples of this resource illustrate, building models          supporting its use in model building. As the examples of this resource illustrate, building models\n                                using NeuroMLv2 is efﬁcient and intuitive, as the model components are pre- made and how they ﬁt            using NeuroMLv2 is efﬁcient and intuitive, as the model components are pre- made and how they ﬁt            using NeuroMLv2 is efﬁcient and intuitive, as the model components are pre- made and how they ﬁt            using NeuroMLv2 is efﬁcient and intuitive, as the model components are pre- made and how they ﬁt            using NeuroMLv2 is efﬁcient and intuitive, as the model components are pre- made and how they ﬁt\n                                together speciﬁed. The structured format allows APIs like libNeuroML to incorporate features such as        together speciﬁed. The structured format allows APIs like libNeuroML to incorporate features such as        together speciﬁed. The structured format allows APIs like libNeuroML to incorporate features such as        together speciﬁed. The structured format allows APIs like libNeuroML to incorporate features such as        together speciﬁed. The structured format allows APIs like libNeuroML to incorporate features such as\n                                auto-                                                                                                       auto-                                                                                                       auto-                                                                                                       auto-                                                                                                       auto-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                completion and inline validation of model parameters and structure as scripts are being devel-\n                                oped. In addition, automated multi-                                                                         oped. In addition, automated multi-                                                                         oped. In addition, automated multi-                                                                         oped. In addition, automated multi-                                                                         oped. In addition, automated multi-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                stage model validation ensures the code, equations and internal\n                                structure are validated against the NeuroML schema minimizing human errors and model simulations            structure are validated against the NeuroML schema minimizing human errors and model simulations            structure are validated against the NeuroML schema minimizing human errors and model simulations            structure are validated against the NeuroML schema minimizing human errors and model simulations            structure are validated against the NeuroML schema minimizing human errors and model simulations\n                                outputs are within acceptable bounds (Figure 7). The NeuroMLv2 ecosystem also provides convenient           outputs are within acceptable bounds (Figure 7). The NeuroMLv2 ecosystem also provides convenient           outputs are within acceptable bounds (Figure 7). The NeuroMLv2 ecosystem also provides convenient           outputs are within acceptable bounds (Figure 7). The NeuroMLv2 ecosystem also provides convenient           outputs are within acceptable bounds (Figure 7). The NeuroMLv2 ecosystem also provides convenient\n                                ways to visualize and inspect the inner structure of models. pyNeuroML provides Python functions            ways to visualize and inspect the inner structure of models. pyNeuroML provides Python functions            ways to visualize and inspect the inner structure of models. pyNeuroML provides Python functions            ways to visualize and inspect the inner structure of models. pyNeuroML provides Python functions            ways to visualize and inspect the inner structure of models. pyNeuroML provides Python functions\n                                and corresponding command line utilities to view neuronal morphology (Figure 8), neuronal electro-          and corresponding command line utilities to view neuronal morphology (Figure 8), neuronal electro-          and corresponding command line utilities to view neuronal morphology (Figure 8), neuronal electro-          and corresponding command line utilities to view neuronal morphology (Figure 8), neuronal electro-          and corresponding command line utilities to view neuronal morphology (Figure 8), neuronal electro-\n                                physiology (Figure  10), circuit connectivity and schematics (Figure  9). In addition, custom analysis      physiology (Figure  10), circuit connectivity and schematics (Figure  9). In addition, custom analysis      physiology (Figure  10), circuit connectivity and schematics (Figure  9). In addition, custom analysis      physiology (Figure  10), circuit connectivity and schematics (Figure  9). In addition, custom analysis      physiology (Figure  10), circuit connectivity and schematics (Figure  9). In addition, custom analysis\n                                pipelines and advanced neuroinformatics resources can easily be built using the APIs. For example,          pipelines and advanced neuroinformatics resources can easily be built using the APIs. For example,          pipelines and advanced neuroinformatics resources can easily be built using the APIs. For example,          pipelines and advanced neuroinformatics resources can easily be built using the APIs. For example,          pipelines and advanced neuroinformatics resources can easily be built using the APIs. For example,\n                                loading a NeuroML model of a neuron into OSB enables visualization of the morphology and the                loading a NeuroML model of a neuron into OSB enables visualization of the morphology and the                loading a NeuroML model of a neuron into OSB enables visualization of the morphology and the                loading a NeuroML model of a neuron into OSB enables visualization of the morphology and the                loading a NeuroML model of a neuron into OSB enables visualization of the morphology and the\n                                spatial distribution of ionic conductance over the membrane as well as inspection of the conductance        spatial distribution of ionic conductance over the membrane as well as inspection of the conductance        spatial distribution of ionic conductance over the membrane as well as inspection of the conductance        spatial distribution of ionic conductance over the membrane as well as inspection of the conductance        spatial distribution of ionic conductance over the membrane as well as inspection of the conductance\n                                state variables, while the connectivity and synaptic weight matrices can be automatically displayed for     state variables, while the connectivity and synaptic weight matrices can be automatically displayed for     state variables, while the connectivity and synaptic weight matrices can be automatically displayed for     state variables, while the connectivity and synaptic weight matrices can be automatically displayed for     state variables, while the connectivity and synaptic weight matrices can be automatically displayed for\n                                circuit models (Figure 8; Gleeson et al., 2019b). Such features of OSB, which are made possible by          circuit models (Figure 8; Gleeson et al., 2019b). Such features of OSB, which are made possible by          circuit models (Figure 8; Gleeson et al., 2019b). Such features of OSB, which are made possible by          circuit models (Figure 8; Gleeson et al., 2019b). Such features of OSB, which are made possible by          circuit models (Figure 8; Gleeson et al., 2019b). Such features of OSB, which are made possible by\n                                the structured format of NeuroMLv2, promote model transparency, reproducibility, and sharing. By            the structured format of NeuroMLv2, promote model transparency, reproducibility, and sharing. By            the structured format of NeuroMLv2, promote model transparency, reproducibility, and sharing. By            the structured format of NeuroMLv2, promote model transparency, reproducibility, and sharing. By            the structured format of NeuroMLv2, promote model transparency, reproducibility, and sharing. By\n                                enabling the development and sharing of well tested and transparent models the wider NeuroMLv2              enabling the development and sharing of well tested and transparent models the wider NeuroMLv2              enabling the development and sharing of well tested and transparent models the wider NeuroMLv2              enabling the development and sharing of well tested and transparent models the wider NeuroMLv2              enabling the development and sharing of well tested and transparent models the wider NeuroMLv2\n                                ecosystem promotes Open Science.                                                                            ecosystem promotes Open Science.                                                                            ecosystem promotes Open Science.                                                                            ecosystem promotes Open Science.                                                                            ecosystem promotes Open Science.\n                                Limitations of NeuroML and current work                                                                     Limitations of NeuroML and current work                                                                     Limitations of NeuroML and current work                                                                     Limitations of NeuroML and current work                                                                     Limitations of NeuroML and current work\n                                A limitation of any standardized framework is that there will always be models and model elements           A limitation of any standardized framework is that there will always be models and model elements           A limitation of any standardized framework is that there will always be models and model elements           A limitation of any standardized framework is that there will always be models and model elements           A limitation of any standardized framework is that there will always be models and model elements\n                                that fall outside the current scope of the standard. Although NeuroML suffers from this limitation, the     that fall outside the current scope of the standard. Although NeuroML suffers from this limitation, the     that fall outside the current scope of the standard. Although NeuroML suffers from this limitation, the     that fall outside the current scope of the standard. Although NeuroML suffers from this limitation, the     that fall outside the current scope of the standard. Although NeuroML suffers from this limitation, the\n                                underlying LEMS-                                                                                            underlying LEMS-                                                                                            underlying LEMS-                                                                                            underlying LEMS-                                                                                            underlying LEMS-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                based framework provides a ﬂexible route to develop a wide range of new types\n                                of physio-                                                                                                  of physio-                                                                                                  of physio-                                                                                                  of physio-                                                                                                  of physio-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                chemical models (Cannon et al., 2014). This is relatively straightforward if the new model\n                                component, such as a synaptic plasticity mechanism, ﬁts within the existing hierarchical structure of       component, such as a synaptic plasticity mechanism, ﬁts within the existing hierarchical structure of       component, such as a synaptic plasticity mechanism, ﬁts within the existing hierarchical structure of       component, such as a synaptic plasticity mechanism, ﬁts within the existing hierarchical structure of       component, such as a synaptic plasticity mechanism, ﬁts within the existing hierarchical structure of\n                                NeuroMLv2 as the new type of synaptic element can build on an existing base synapse type which              NeuroMLv2 as the new type of synaptic element can build on an existing base synapse type which              NeuroMLv2 as the new type of synaptic element can build on an existing base synapse type which              NeuroMLv2 as the new type of synaptic element can build on an existing base synapse type which              NeuroMLv2 as the new type of synaptic element can build on an existing base synapse type which\n                                speciﬁes the relevant input and outputs (e.g. local voltage and synaptic current). For more radical         speciﬁes the relevant input and outputs (e.g. local voltage and synaptic current). For more radical         speciﬁes the relevant input and outputs (e.g. local voltage and synaptic current). For more radical         speciﬁes the relevant input and outputs (e.g. local voltage and synaptic current). For more radical         speciﬁes the relevant input and outputs (e.g. local voltage and synaptic current). For more radical\n                                shifts in model types (e.g. neuronal morphologies that grow during learning) that do not ﬁt neatly into     shifts in model types (e.g. neuronal morphologies that grow during learning) that do not ﬁt neatly into     shifts in model types (e.g. neuronal morphologies that grow during learning) that do not ﬁt neatly into     shifts in model types (e.g. neuronal morphologies that grow during learning) that do not ﬁt neatly into     shifts in model types (e.g. neuronal morphologies that grow during learning) that do not ﬁt neatly into\n                                the current NeuroMLv2 schema, structural changes to the language would be required. This route              the current NeuroMLv2 schema, structural changes to the language would be required. This route              the current NeuroMLv2 schema, structural changes to the language would be required. This route              the current NeuroMLv2 schema, structural changes to the language would be required. This route              the current NeuroMLv2 schema, structural changes to the language would be required. This route\n                                is more involved as the pros and cons of changes to the structure of NeuroMLv2 would need to be             is more involved as the pros and cons of changes to the structure of NeuroMLv2 would need to be             is more involved as the pros and cons of changes to the structure of NeuroMLv2 would need to be             is more involved as the pros and cons of changes to the structure of NeuroMLv2 would need to be             is more involved as the pros and cons of changes to the structure of NeuroMLv2 would need to be\n                                considered by the Scientiﬁc Committee and, if approved, implemented by the Editorial Board.                 considered by the Scientiﬁc Committee and, if approved, implemented by the Editorial Board.                 considered by the Scientiﬁc Committee and, if approved, implemented by the Editorial Board.                 considered by the Scientiﬁc Committee and, if approved, implemented by the Editorial Board.                 considered by the Scientiﬁc Committee and, if approved, implemented by the Editorial Board.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Whereas the current scope of NeuroMLv2 encompasses models of spiking neurons and networks\n                                at different levels of biological detail, plans are in place to extend its scope to include more abstract,  at different levels of biological detail, plans are in place to extend its scope to include more abstract,  at different levels of biological detail, plans are in place to extend its scope to include more abstract,  at different levels of biological detail, plans are in place to extend its scope to include more abstract,  at different levels of biological detail, plans are in place to extend its scope to include more abstract,\n                                rate-                                                                                                       rate-                                                                                                       rate-                                                                                                       rate-                                                                                                       rate-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                based models of neuronal populations (e.g. see Wilson and Cowan, 1972;  Mejias et al., 2016\n                                in Table 8). Additionally, work is under way to extend current support for SBML (Hucka et al., 2003)        in Table 8). Additionally, work is under way to extend current support for SBML (Hucka et al., 2003)        in Table 8). Additionally, work is under way to extend current support for SBML (Hucka et al., 2003)        in Table 8). Additionally, work is under way to extend current support for SBML (Hucka et al., 2003)        in Table 8). Additionally, work is under way to extend current support for SBML (Hucka et al., 2003)\n                                based descriptions of chemical signaling pathways (Cannon et al., 2014), to enable better biochem-          based descriptions of chemical signaling pathways (Cannon et al., 2014), to enable better biochem-          based descriptions of chemical signaling pathways (Cannon et al., 2014), to enable better biochem-          based descriptions of chemical signaling pathways (Cannon et al., 2014), to enable better biochem-          based descriptions of chemical signaling pathways (Cannon et al., 2014), to enable better biochem-\n                                ical descriptions of sub-                                                                                   ical descriptions of sub-                                                                                   ical descriptions of sub-                                                                                   ical descriptions of sub-                                                                                   ical descriptions of sub-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                cellular activity in neurons and synapses.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                There is a growing interest in the ﬁeld for the efﬁcient generation and serialization of large-  scale\n                                network models, containing numbers of neurons closer to their biological equivalents (Markram et al.,       network models, containing numbers of neurons closer to their biological equivalents (Markram et al.,       network models, containing numbers of neurons closer to their biological equivalents (Markram et al.,       network models, containing numbers of neurons closer to their biological equivalents (Markram et al.,       network models, containing numbers of neurons closer to their biological equivalents (Markram et al.,\n                                2015; Billeh et al., 2020;  Einevoll et al., 2019). While a multitude of applications in the NeuroML        2015; Billeh et al., 2020;  Einevoll et al., 2019). While a multitude of applications in the NeuroML        2015; Billeh et al., 2020;  Einevoll et al., 2019). While a multitude of applications in the NeuroML        2015; Billeh et al., 2020;  Einevoll et al., 2019). While a multitude of applications in the NeuroML        2015; Billeh et al., 2020;  Einevoll et al., 2019). While a multitude of applications in the NeuroML\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ecosystem support large-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                scale model generation (e.g. NetPyNE, neuroConstruct, PyNN), the default\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                                                                                                                                           27 of 44","md":"# Tools and resources\n\n# Neuroscience\n\neasily combine with another if the need arises. PyNN and SONATA are, therefore, integral parts of the wider NeuroML ecosystem.\n\n# Why using NeuroML and Python promotes the construction of FAIR models\n\nThe modular and hierarchical structure of NeuroMLv2, when combined with Python, provides a powerful combination of structured declarative elements and flexible procedural approaches that enables a ‘Lego-like’ building block approach for constructing biologically detailed models (Cayco‐Gajic et al., 2017; Billings et al., 2014; Kriener et al., 2022; Gurnani and Silver, 2021). This has been advanced by the development of pyNeuroML, which provides a single installable package offering direct access to a range of functionality for handling NeuroML models (Figure 6). Moreover, the web-based documentation of NeuroMLv2, with multiple Python scripts illustrating the usage of the language and associated tools (Table 5), has recently been updated and expanded (https://docs.neuroml.org). This provides a central resource for both new and experienced users of NeuroML supporting its use in model building. As the examples of this resource illustrate, building models using NeuroMLv2 is efficient and intuitive, as the model components are pre-made and how they fit together specified. The structured format allows APIs like libNeuroML to incorporate features such as auto-completion and inline validation of model parameters and structure as scripts are being developed. In addition, automated multi-stage model validation ensures the code, equations and internal structure are validated against the NeuroML schema minimizing human errors and model simulations outputs are within acceptable bounds (Figure 7). The NeuroMLv2 ecosystem also provides convenient ways to visualize and inspect the inner structure of models. pyNeuroML provides Python functions and corresponding command line utilities to view neuronal morphology (Figure 8), neuronal electro-physiology (Figure 10), circuit connectivity and schematics (Figure 9). In addition, custom analysis pipelines and advanced neuroinformatics resources can easily be built using the APIs. For example, loading a NeuroML model of a neuron into OSB enables visualization of the morphology and the spatial distribution of ionic conductance over the membrane as well as inspection of the conductance state variables, while the connectivity and synaptic weight matrices can be automatically displayed for circuit models (Figure 8; Gleeson et al., 2019b). Such features of OSB, which are made possible by the structured format of NeuroMLv2, promote model transparency, reproducibility, and sharing. By enabling the development and sharing of well tested and transparent models the wider NeuroMLv2 ecosystem promotes Open Science.\n\n# Limitations of NeuroML and current work\n\nA limitation of any standardized framework is that there will always be models and model elements that fall outside the current scope of the standard. Although NeuroML suffers from this limitation, the underlying LEMS-based framework provides a flexible route to develop a wide range of new types of physio-chemical models (Cannon et al., 2014). This is relatively straightforward if the new model component, such as a synaptic plasticity mechanism, fits within the existing hierarchical structure of NeuroMLv2 as the new type of synaptic element can build on an existing base synapse type which specifies the relevant input and outputs (e.g. local voltage and synaptic current). For more radical shifts in model types (e.g. neuronal morphologies that grow during learning) that do not fit neatly into the current NeuroMLv2 schema, structural changes to the language would be required. This route is more involved as the pros and cons of changes to the structure of NeuroMLv2 would need to be considered by the Scientific Committee and, if approved, implemented by the Editorial Board. Whereas the current scope of NeuroMLv2 encompasses models of spiking neurons and networks at different levels of biological detail, plans are in place to extend its scope to include more abstract, rate-based models of neuronal populations (e.g. see Wilson and Cowan, 1972; Mejias et al., 2016 in Table 8). Additionally, work is under way to extend current support for SBML (Hucka et al., 2003) based descriptions of chemical signaling pathways (Cannon et al., 2014), to enable better biochemical descriptions of sub-cellular activity in neurons and synapses. There is a growing interest in the field for the efficient generation and serialization of large-scale network models, containing numbers of neurons closer to their biological equivalents (Markram et al., 2015; Billeh et al., 2020; Einevoll et al., 2019). While a multitude of applications in the NeuroML ecosystem support large-scale model generation (e.g. NetPyNE, neuroConstruct, PyNN), the default.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"easily combine with another if the need arises. PyNN and SONATA are, therefore, integral parts of the wider NeuroML ecosystem.","md":"easily combine with another if the need arises. PyNN and SONATA are, therefore, integral parts of the wider NeuroML ecosystem.","bBox":{"x":168.53,"y":51.8,"w":414,"h":21}},{"type":"heading","lvl":1,"value":"Why using NeuroML and Python promotes the construction of FAIR models","md":"# Why using NeuroML and Python promotes the construction of FAIR models","bBox":{"x":168.53,"y":88.14,"w":387,"h":26}},{"type":"text","value":"The modular and hierarchical structure of NeuroMLv2, when combined with Python, provides a powerful combination of structured declarative elements and flexible procedural approaches that enables a ‘Lego-like’ building block approach for constructing biologically detailed models (Cayco‐Gajic et al., 2017; Billings et al., 2014; Kriener et al., 2022; Gurnani and Silver, 2021). This has been advanced by the development of pyNeuroML, which provides a single installable package offering direct access to a range of functionality for handling NeuroML models (Figure 6). Moreover, the web-based documentation of NeuroMLv2, with multiple Python scripts illustrating the usage of the language and associated tools (Table 5), has recently been updated and expanded (https://docs.neuroml.org). This provides a central resource for both new and experienced users of NeuroML supporting its use in model building. As the examples of this resource illustrate, building models using NeuroMLv2 is efficient and intuitive, as the model components are pre-made and how they fit together specified. The structured format allows APIs like libNeuroML to incorporate features such as auto-completion and inline validation of model parameters and structure as scripts are being developed. In addition, automated multi-stage model validation ensures the code, equations and internal structure are validated against the NeuroML schema minimizing human errors and model simulations outputs are within acceptable bounds (Figure 7). The NeuroMLv2 ecosystem also provides convenient ways to visualize and inspect the inner structure of models. pyNeuroML provides Python functions and corresponding command line utilities to view neuronal morphology (Figure 8), neuronal electro-physiology (Figure 10), circuit connectivity and schematics (Figure 9). In addition, custom analysis pipelines and advanced neuroinformatics resources can easily be built using the APIs. For example, loading a NeuroML model of a neuron into OSB enables visualization of the morphology and the spatial distribution of ionic conductance over the membrane as well as inspection of the conductance state variables, while the connectivity and synaptic weight matrices can be automatically displayed for circuit models (Figure 8; Gleeson et al., 2019b). Such features of OSB, which are made possible by the structured format of NeuroMLv2, promote model transparency, reproducibility, and sharing. By enabling the development and sharing of well tested and transparent models the wider NeuroMLv2 ecosystem promotes Open Science.","md":"The modular and hierarchical structure of NeuroMLv2, when combined with Python, provides a powerful combination of structured declarative elements and flexible procedural approaches that enables a ‘Lego-like’ building block approach for constructing biologically detailed models (Cayco‐Gajic et al., 2017; Billings et al., 2014; Kriener et al., 2022; Gurnani and Silver, 2021). This has been advanced by the development of pyNeuroML, which provides a single installable package offering direct access to a range of functionality for handling NeuroML models (Figure 6). Moreover, the web-based documentation of NeuroMLv2, with multiple Python scripts illustrating the usage of the language and associated tools (Table 5), has recently been updated and expanded (https://docs.neuroml.org). This provides a central resource for both new and experienced users of NeuroML supporting its use in model building. As the examples of this resource illustrate, building models using NeuroMLv2 is efficient and intuitive, as the model components are pre-made and how they fit together specified. The structured format allows APIs like libNeuroML to incorporate features such as auto-completion and inline validation of model parameters and structure as scripts are being developed. In addition, automated multi-stage model validation ensures the code, equations and internal structure are validated against the NeuroML schema minimizing human errors and model simulations outputs are within acceptable bounds (Figure 7). The NeuroMLv2 ecosystem also provides convenient ways to visualize and inspect the inner structure of models. pyNeuroML provides Python functions and corresponding command line utilities to view neuronal morphology (Figure 8), neuronal electro-physiology (Figure 10), circuit connectivity and schematics (Figure 9). In addition, custom analysis pipelines and advanced neuroinformatics resources can easily be built using the APIs. For example, loading a NeuroML model of a neuron into OSB enables visualization of the morphology and the spatial distribution of ionic conductance over the membrane as well as inspection of the conductance state variables, while the connectivity and synaptic weight matrices can be automatically displayed for circuit models (Figure 8; Gleeson et al., 2019b). Such features of OSB, which are made possible by the structured format of NeuroMLv2, promote model transparency, reproducibility, and sharing. By enabling the development and sharing of well tested and transparent models the wider NeuroMLv2 ecosystem promotes Open Science.","bBox":{"x":168.53,"y":102.15,"w":413.01,"h":336.92}},{"type":"heading","lvl":1,"value":"Limitations of NeuroML and current work","md":"# Limitations of NeuroML and current work","bBox":{"x":168.53,"y":454.48,"w":236,"h":12}},{"type":"text","value":"A limitation of any standardized framework is that there will always be models and model elements that fall outside the current scope of the standard. Although NeuroML suffers from this limitation, the underlying LEMS-based framework provides a flexible route to develop a wide range of new types of physio-chemical models (Cannon et al., 2014). This is relatively straightforward if the new model component, such as a synaptic plasticity mechanism, fits within the existing hierarchical structure of NeuroMLv2 as the new type of synaptic element can build on an existing base synapse type which specifies the relevant input and outputs (e.g. local voltage and synaptic current). For more radical shifts in model types (e.g. neuronal morphologies that grow during learning) that do not fit neatly into the current NeuroMLv2 schema, structural changes to the language would be required. This route is more involved as the pros and cons of changes to the structure of NeuroMLv2 would need to be considered by the Scientific Committee and, if approved, implemented by the Editorial Board. Whereas the current scope of NeuroMLv2 encompasses models of spiking neurons and networks at different levels of biological detail, plans are in place to extend its scope to include more abstract, rate-based models of neuronal populations (e.g. see Wilson and Cowan, 1972; Mejias et al., 2016 in Table 8). Additionally, work is under way to extend current support for SBML (Hucka et al., 2003) based descriptions of chemical signaling pathways (Cannon et al., 2014), to enable better biochemical descriptions of sub-cellular activity in neurons and synapses. There is a growing interest in the field for the efficient generation and serialization of large-scale network models, containing numbers of neurons closer to their biological equivalents (Markram et al., 2015; Billeh et al., 2020; Einevoll et al., 2019). While a multitude of applications in the NeuroML ecosystem support large-scale model generation (e.g. NetPyNE, neuroConstruct, PyNN), the default.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"A limitation of any standardized framework is that there will always be models and model elements that fall outside the current scope of the standard. Although NeuroML suffers from this limitation, the underlying LEMS-based framework provides a flexible route to develop a wide range of new types of physio-chemical models (Cannon et al., 2014). This is relatively straightforward if the new model component, such as a synaptic plasticity mechanism, fits within the existing hierarchical structure of NeuroMLv2 as the new type of synaptic element can build on an existing base synapse type which specifies the relevant input and outputs (e.g. local voltage and synaptic current). For more radical shifts in model types (e.g. neuronal morphologies that grow during learning) that do not fit neatly into the current NeuroMLv2 schema, structural changes to the language would be required. This route is more involved as the pros and cons of changes to the structure of NeuroMLv2 would need to be considered by the Scientific Committee and, if approved, implemented by the Editorial Board. Whereas the current scope of NeuroMLv2 encompasses models of spiking neurons and networks at different levels of biological detail, plans are in place to extend its scope to include more abstract, rate-based models of neuronal populations (e.g. see Wilson and Cowan, 1972; Mejias et al., 2016 in Table 8). Additionally, work is under way to extend current support for SBML (Hucka et al., 2003) based descriptions of chemical signaling pathways (Cannon et al., 2014), to enable better biochemical descriptions of sub-cellular activity in neurons and synapses. There is a growing interest in the field for the efficient generation and serialization of large-scale network models, containing numbers of neurons closer to their biological equivalents (Markram et al., 2015; Billeh et al., 2020; Einevoll et al., 2019). While a multitude of applications in the NeuroML ecosystem support large-scale model generation (e.g. NetPyNE, neuroConstruct, PyNN), the default.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.52,"y":102.15,"w":411.01,"h":617.28}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/","text":" "},{"url":"https://docs.neuroml.org/","text":"docs.neuroml.org). This provides a central resource for both new and experienced users of NeuroML "}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.234},{"page":28,"text":"           Tools  and  resources                                                                                                                                                                                                                                                                                                                               Neuroscience\n                                serialization of NeuroML (XML) is inefﬁcient for reading/writing/storing such extensive descriptions.     serialization of NeuroML (XML) is inefﬁcient for reading/writing/storing such extensive descriptions.     serialization of NeuroML (XML) is inefﬁcient for reading/writing/storing such extensive descriptions.     serialization of NeuroML (XML) is inefﬁcient for reading/writing/storing such extensive descriptions.\n                                NeuroML does have an internal format for serializing in the binary format HDF5 (see Methods), but         NeuroML does have an internal format for serializing in the binary format HDF5 (see Methods), but         NeuroML does have an internal format for serializing in the binary format HDF5 (see Methods), but         NeuroML does have an internal format for serializing in the binary format HDF5 (see Methods), but\n                                has also recently added support for export of models to the SONATA data format (Dai et al., 2020)         has also recently added support for export of models to the SONATA data format (Dai et al., 2020)         has also recently added support for export of models to the SONATA data format (Dai et al., 2020)         has also recently added support for export of models to the SONATA data format (Dai et al., 2020)\n                                allowing efﬁcient serialization of large- scale models. Even though individual instances of large- scale  allowing efﬁcient serialization of large- scale models. Even though individual instances of large- scale  allowing efﬁcient serialization of large- scale models. Even though individual instances of large- scale  allowing efﬁcient serialization of large- scale models. Even though individual instances of large- scale\n                                models are useful, the ability to generate families of these for multiple simulation runs and more        models are useful, the ability to generate families of these for multiple simulation runs and more        models are useful, the ability to generate families of these for multiple simulation runs and more        models are useful, the ability to generate families of these for multiple simulation runs and more\n                                particularly a way to encapsulate, examine and reuse templates for network models, is also required.      particularly a way to encapsulate, examine and reuse templates for network models, is also required.      particularly a way to encapsulate, examine and reuse templates for network models, is also required.      particularly a way to encapsulate, examine and reuse templates for network models, is also required.\n                                A prototype package, NeuroMLlite (https://github.com/NeuroML/NeuroMLlite), has been developed             A prototype package, NeuroMLlite (https://github.com/NeuroML/NeuroMLlite), has been developed             A prototype package, NeuroMLlite (https://github.com/NeuroML/NeuroMLlite), has been developed             A prototype package, NeuroMLlite (https://github.com/NeuroML/NeuroMLlite), has been developed\n                                which allows these concise network templates to be described and multiple instances of networks to        which allows these concise network templates to be described and multiple instances of networks to        which allows these concise network templates to be described and multiple instances of networks to        which allows these concise network templates to be described and multiple instances of networks to\n                                be generated, and facilitates interaction with simulation platforms and efﬁcient serialization formats.   be generated, and facilitates interaction with simulation platforms and efﬁcient serialization formats.   be generated, and facilitates interaction with simulation platforms and efﬁcient serialization formats.   be generated, and facilitates interaction with simulation platforms and efﬁcient serialization formats.\n                                                                                                                                                                                                                                                                                                                                                               As discoveries and insights in neuroscience inform machine learning and visa versa, there is an\n                                increasing need to develop a common framework for describing both biological and artiﬁcial neural         increasing need to develop a common framework for describing both biological and artiﬁcial neural         increasing need to develop a common framework for describing both biological and artiﬁcial neural         increasing need to develop a common framework for describing both biological and artiﬁcial neural\n                                networks. Model Description Format (MDF) has been developed to address this (Gleeson et  al.,             networks. Model Description Format (MDF) has been developed to address this (Gleeson et  al.,             networks. Model Description Format (MDF) has been developed to address this (Gleeson et  al.,             networks. Model Description Format (MDF) has been developed to address this (Gleeson et  al.,\n                                2023). This initiative has developed a standardized format, along with a Python API, which allows         2023). This initiative has developed a standardized format, along with a Python API, which allows         2023). This initiative has developed a standardized format, along with a Python API, which allows         2023). This initiative has developed a standardized format, along with a Python API, which allows\n                                the speciﬁcation of artiﬁcial neural networks (e.g. Convolutional Neural Networks, Recurrent Neural       the speciﬁcation of artiﬁcial neural networks (e.g. Convolutional Neural Networks, Recurrent Neural       the speciﬁcation of artiﬁcial neural networks (e.g. Convolutional Neural Networks, Recurrent Neural       the speciﬁcation of artiﬁcial neural networks (e.g. Convolutional Neural Networks, Recurrent Neural\n                                Networks) and biological neurons using the same underlying entities. Support for mapping MDF to/          Networks) and biological neurons using the same underlying entities. Support for mapping MDF to/          Networks) and biological neurons using the same underlying entities. Support for mapping MDF to/          Networks) and biological neurons using the same underlying entities. Support for mapping MDF to/\n                                from NeuroMLv2/LEMS has been included from the start. This work will enable deeper integration of         from NeuroMLv2/LEMS has been included from the start. This work will enable deeper integration of         from NeuroMLv2/LEMS has been included from the start. This work will enable deeper integration of         from NeuroMLv2/LEMS has been included from the start. This work will enable deeper integration of\n                                computational neuroscience and ‘brain-                                                                    computational neuroscience and ‘brain-                                                                    computational neuroscience and ‘brain-                                                                    computational neuroscience and ‘brain-\n                                                                                                                                                                                                                                                                                                                                                               inspired’ networks in Artiﬁcial Intelligence (AI).\n                                Conclusion and vision for the future                                                                      Conclusion and vision for the future                                                                      Conclusion and vision for the future                                                                      Conclusion and vision for the future\n                                NeuroMLv2 is already a mature community standard that provides a framework for standardizing              NeuroMLv2 is already a mature community standard that provides a framework for standardizing              NeuroMLv2 is already a mature community standard that provides a framework for standardizing              NeuroMLv2 is already a mature community standard that provides a framework for standardizing\n                                biologically detailed neuronal network models. By providing a stable, common framework deﬁning            biologically detailed neuronal network models. By providing a stable, common framework deﬁning            biologically detailed neuronal network models. By providing a stable, common framework deﬁning            biologically detailed neuronal network models. By providing a stable, common framework deﬁning\n                                the essential entities required for biologically detailed neuronal modeling, NeuroML has spawned an       the essential entities required for biologically detailed neuronal modeling, NeuroML has spawned an       the essential entities required for biologically detailed neuronal modeling, NeuroML has spawned an       the essential entities required for biologically detailed neuronal modeling, NeuroML has spawned an\n                                ecosystem of tools that span all stages of the model development life cycle. In the short term, we        ecosystem of tools that span all stages of the model development life cycle. In the short term, we        ecosystem of tools that span all stages of the model development life cycle. In the short term, we        ecosystem of tools that span all stages of the model development life cycle. In the short term, we\n                                envision the functionality of NeuroML to expand further and for new online resources that encourage       envision the functionality of NeuroML to expand further and for new online resources that encourage       envision the functionality of NeuroML to expand further and for new online resources that encourage       envision the functionality of NeuroML to expand further and for new online resources that encourage\n                                the construction of FAIR models using pyNeuroML to be taken up by the community. The NeuroML              the construction of FAIR models using pyNeuroML to be taken up by the community. The NeuroML              the construction of FAIR models using pyNeuroML to be taken up by the community. The NeuroML              the construction of FAIR models using pyNeuroML to be taken up by the community. The NeuroML\n                                development team are also beginning to explore how to combine NeuroML-                                    development team are also beginning to explore how to combine NeuroML-                                    development team are also beginning to explore how to combine NeuroML-                                    development team are also beginning to explore how to combine NeuroML-\n                                                                                                                                                                                                                                                                                                                                                               based circuit models with\n                                musculo-                                                                                                  musculo-                                                                                                  musculo-                                                                                                  musculo-\n                                                                                                                                                                                                                                                                                                                                                               skeletal simulations to enable models of the neural control of behavior. In the longer term,\n                                developing seamless interfaces between NeuroML and other domain speciﬁc standards will enable             developing seamless interfaces between NeuroML and other domain speciﬁc standards will enable             developing seamless interfaces between NeuroML and other domain speciﬁc standards will enable             developing seamless interfaces between NeuroML and other domain speciﬁc standards will enable\n                                the development of more holistic models of the neural control of body systems across a wide range of      the development of more holistic models of the neural control of body systems across a wide range of      the development of more holistic models of the neural control of body systems across a wide range of      the development of more holistic models of the neural control of body systems across a wide range of\n                                organisms, as well as greater exchange of models and insights between computational neuroscience          organisms, as well as greater exchange of models and insights between computational neuroscience          organisms, as well as greater exchange of models and insights between computational neuroscience          organisms, as well as greater exchange of models and insights between computational neuroscience\n                                and AI.                                                                                                   and AI.                                                                                                   and AI.                                                                                                   and AI.\n                                Materials and methods                                                                                     Materials and methods                                                                                     Materials and methods                                                                                     Materials and methods\n                                NeuroMLv2 is formally speciﬁed by the NeuroMLv2 XML schema, which deﬁnes the allowed structure            NeuroMLv2 is formally speciﬁed by the NeuroMLv2 XML schema, which deﬁnes the allowed structure            NeuroMLv2 is formally speciﬁed by the NeuroMLv2 XML schema, which deﬁnes the allowed structure            NeuroMLv2 is formally speciﬁed by the NeuroMLv2 XML schema, which deﬁnes the allowed structure\n                                of XML ﬁles which comply to the standard, and the LEMS ComponentType deﬁnitions, which deﬁne              of XML ﬁles which comply to the standard, and the LEMS ComponentType deﬁnitions, which deﬁne              of XML ﬁles which comply to the standard, and the LEMS ComponentType deﬁnitions, which deﬁne              of XML ﬁles which comply to the standard, and the LEMS ComponentType deﬁnitions, which deﬁne\n                                the internal state variables of the underlying elements, providing a machine-readable speciﬁcation of     the internal state variables of the underlying elements, providing a machine-readable speciﬁcation of     the internal state variables of the underlying elements, providing a machine-readable speciﬁcation of     the internal state variables of the underlying elements, providing a machine-readable speciﬁcation of\n                                the time evolution of model components. The speciﬁcation is backed up by a suite of software tools        the time evolution of model components. The speciﬁcation is backed up by a suite of software tools        the time evolution of model components. The speciﬁcation is backed up by a suite of software tools        the time evolution of model components. The speciﬁcation is backed up by a suite of software tools\n                                that support the model life cycle and the accompanying usage and development documentation.               that support the model life cycle and the accompanying usage and development documentation.               that support the model life cycle and the accompanying usage and development documentation.               that support the model life cycle and the accompanying usage and development documentation.\n                                                                                                                                                                                                                                                                                                                                                               We illustrate the key parts of this framework using the HindmarshRose cell model (Hindmarsh and\n                                Rose, 1984;  Figure 11), which as an abstract point neuron model, serves as an appropriate simple         Rose, 1984;  Figure 11), which as an abstract point neuron model, serves as an appropriate simple         Rose, 1984;  Figure 11), which as an abstract point neuron model, serves as an appropriate simple         Rose, 1984;  Figure 11), which as an abstract point neuron model, serves as an appropriate simple\n                                NeuroMLv2 ComponentType.                                                                                  NeuroMLv2 ComponentType.                                                                                  NeuroMLv2 ComponentType.                                                                                  NeuroMLv2 ComponentType.\n                                The NeuroML XML Schema                                                                                    The NeuroML XML Schema                                                                                    The NeuroML XML Schema                                                                                    The NeuroML XML Schema\n                                We begin with the NeuroMLv2 standard. The standard consists of two parts, each serving different          We begin with the NeuroMLv2 standard. The standard consists of two parts, each serving different          We begin with the NeuroMLv2 standard. The standard consists of two parts, each serving different          We begin with the NeuroMLv2 standard. The standard consists of two parts, each serving different\n                                functions:                                                                                                functions:                                                                                                functions:                                                                                                functions:\n                                                                                                                                                                                                                                                                                                                                                               1.  the NeuroMLv2 XML schema\n                                                                                                                                                                                                                                                                                                                                                               2.  corresponding LEMS component type definitions\n                                                                                                                                                                                                                                                                                                                                                               The NeuroMLv2 schema is a language independent data model that constrains the structure of a\n                                NeuroMLv2 model description. The NeuroML schema is formally described as an XML Schema docu-              NeuroMLv2 model description. The NeuroML schema is formally described as an XML Schema docu-              NeuroMLv2 model description. The NeuroML schema is formally described as an XML Schema docu-              NeuroMLv2 model description. The NeuroML schema is formally described as an XML Schema docu-\n                                ment (https://neuroml.org/schema/neuroml2) in the XML Schema Deﬁnition (XSD) format, a recom-             ment (https://neuroml.org/schema/neuroml2) in the XML Schema Deﬁnition (XSD) format, a recom-             ment (https://neuroml.org/schema/neuroml2) in the XML Schema Deﬁnition (XSD) format, a recom-             ment (https://neuroml.org/schema/neuroml2) in the XML Schema Deﬁnition (XSD) format, a recom-\n                                mendation of the World Wide Web Consortium (W3C) (https://www.w3.org/TR/xmlschema-1/). An                 mendation of the World Wide Web Consortium (W3C) (https://www.w3.org/TR/xmlschema-1/). An                 mendation of the World Wide Web Consortium (W3C) (https://www.w3.org/TR/xmlschema-1/). An                 mendation of the World Wide Web Consortium (W3C) (https://www.w3.org/TR/xmlschema-1/). An\n                                XML document that claims to conform to a particular schema can be validated against the schema. All       XML document that claims to conform to a particular schema can be validated against the schema. All       XML document that claims to conform to a particular schema can be validated against the schema. All       XML document that claims to conform to a particular schema can be validated against the schema. All\n                                NeuroMLv2 model descriptions can, therefore, be validated against the NeuroMLv2 schema.                   NeuroMLv2 model descriptions can, therefore, be validated against the NeuroMLv2 schema.                   NeuroMLv2 model descriptions can, therefore, be validated against the NeuroMLv2 schema.                   NeuroMLv2 model descriptions can, therefore, be validated against the NeuroMLv2 schema.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                          28 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nSerialization of NeuroML (XML) is inefficient for reading/writing/storing such extensive descriptions. NeuroML does have an internal format for serializing in the binary format HDF5 (see Methods), but has also recently added support for export of models to the SONATA data format (Dai et al., 2020) allowing efficient serialization of large-scale models. Even though individual instances of large-scale models are useful, the ability to generate families of these for multiple simulation runs and more particularly a way to encapsulate, examine and reuse templates for network models, is also required. A prototype package, NeuroMLlite (https://github.com/NeuroML/NeuroMLlite), has been developed which allows these concise network templates to be described and multiple instances of networks to be generated, and facilitates interaction with simulation platforms and efficient serialization formats.\n\nAs discoveries and insights in neuroscience inform machine learning and vice versa, there is an increasing need to develop a common framework for describing both biological and artificial neural networks. Model Description Format (MDF) has been developed to address this (Gleeson et al., 2023). This initiative has developed a standardized format, along with a Python API, which allows the specification of artificial neural networks (e.g. Convolutional Neural Networks, Recurrent Neural Networks) and biological neurons using the same underlying entities. Support for mapping MDF to/from NeuroMLv2/LEMS has been included from the start. This work will enable deeper integration of computational neuroscience and ‘brain-inspired’ networks in Artificial Intelligence (AI).\n\n# Conclusion and vision for the future\n\nNeuroMLv2 is already a mature community standard that provides a framework for standardizing biologically detailed neuronal network models. By providing a stable, common framework defining the essential entities required for biologically detailed neuronal modeling, NeuroML has spawned an ecosystem of tools that span all stages of the model development life cycle. In the short term, we envision the functionality of NeuroML to expand further and for new online resources that encourage the construction of FAIR models using pyNeuroML to be taken up by the community. The NeuroML development team are also beginning to explore how to combine NeuroML-based circuit models with musculo-skeletal simulations to enable models of the neural control of behavior. In the longer term, developing seamless interfaces between NeuroML and other domain specific standards will enable the development of more holistic models of the neural control of body systems across a wide range of organisms, as well as greater exchange of models and insights between computational neuroscience and AI.\n\n# Materials and methods\n\nNeuroMLv2 is formally specified by the NeuroMLv2 XML schema, which defines the allowed structure of XML files which comply to the standard, and the LEMS ComponentType definitions, which define the internal state variables of the underlying elements, providing a machine-readable specification of the time evolution of model components. The specification is backed up by a suite of software tools that support the model life cycle and the accompanying usage and development documentation.\n\nWe illustrate the key parts of this framework using the HindmarshRose cell model (Hindmarsh and Rose, 1984; Figure 11), which as an abstract point neuron model, serves as an appropriate simple NeuroMLv2 ComponentType.\n\n# The NeuroML XML Schema\n\nWe begin with the NeuroMLv2 standard. The standard consists of two parts, each serving different functions:\n\n1. the NeuroMLv2 XML schema\n2. corresponding LEMS component type definitions\n\nThe NeuroMLv2 schema is a language independent data model that constrains the structure of a NeuroMLv2 model description. The NeuroML schema is formally described as an XML Schema document (https://neuroml.org/schema/neuroml2) in the XML Schema Definition (XSD) format, a recommendation of the World Wide Web Consortium (W3C) (https://www.w3.org/TR/xmlschema-1/). An XML document that claims to conform to a particular schema can be validated against the schema. All NeuroMLv2 model descriptions can, therefore, be validated against the NeuroMLv2 schema.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"Serialization of NeuroML (XML) is inefficient for reading/writing/storing such extensive descriptions. NeuroML does have an internal format for serializing in the binary format HDF5 (see Methods), but has also recently added support for export of models to the SONATA data format (Dai et al., 2020) allowing efficient serialization of large-scale models. Even though individual instances of large-scale models are useful, the ability to generate families of these for multiple simulation runs and more particularly a way to encapsulate, examine and reuse templates for network models, is also required. A prototype package, NeuroMLlite (https://github.com/NeuroML/NeuroMLlite), has been developed which allows these concise network templates to be described and multiple instances of networks to be generated, and facilitates interaction with simulation platforms and efficient serialization formats.\n\nAs discoveries and insights in neuroscience inform machine learning and vice versa, there is an increasing need to develop a common framework for describing both biological and artificial neural networks. Model Description Format (MDF) has been developed to address this (Gleeson et al., 2023). This initiative has developed a standardized format, along with a Python API, which allows the specification of artificial neural networks (e.g. Convolutional Neural Networks, Recurrent Neural Networks) and biological neurons using the same underlying entities. Support for mapping MDF to/from NeuroMLv2/LEMS has been included from the start. This work will enable deeper integration of computational neuroscience and ‘brain-inspired’ networks in Artificial Intelligence (AI).","md":"Serialization of NeuroML (XML) is inefficient for reading/writing/storing such extensive descriptions. NeuroML does have an internal format for serializing in the binary format HDF5 (see Methods), but has also recently added support for export of models to the SONATA data format (Dai et al., 2020) allowing efficient serialization of large-scale models. Even though individual instances of large-scale models are useful, the ability to generate families of these for multiple simulation runs and more particularly a way to encapsulate, examine and reuse templates for network models, is also required. A prototype package, NeuroMLlite (https://github.com/NeuroML/NeuroMLlite), has been developed which allows these concise network templates to be described and multiple instances of networks to be generated, and facilitates interaction with simulation platforms and efficient serialization formats.\n\nAs discoveries and insights in neuroscience inform machine learning and vice versa, there is an increasing need to develop a common framework for describing both biological and artificial neural networks. Model Description Format (MDF) has been developed to address this (Gleeson et al., 2023). This initiative has developed a standardized format, along with a Python API, which allows the specification of artificial neural networks (e.g. Convolutional Neural Networks, Recurrent Neural Networks) and biological neurons using the same underlying entities. Support for mapping MDF to/from NeuroMLv2/LEMS has been included from the start. This work will enable deeper integration of computational neuroscience and ‘brain-inspired’ networks in Artificial Intelligence (AI).","bBox":{"x":168.53,"y":34.63,"w":410,"h":218.12}},{"type":"heading","lvl":1,"value":"Conclusion and vision for the future","md":"# Conclusion and vision for the future","bBox":{"x":168.53,"y":267.23,"w":202,"h":12}},{"type":"text","value":"NeuroMLv2 is already a mature community standard that provides a framework for standardizing biologically detailed neuronal network models. By providing a stable, common framework defining the essential entities required for biologically detailed neuronal modeling, NeuroML has spawned an ecosystem of tools that span all stages of the model development life cycle. In the short term, we envision the functionality of NeuroML to expand further and for new online resources that encourage the construction of FAIR models using pyNeuroML to be taken up by the community. The NeuroML development team are also beginning to explore how to combine NeuroML-based circuit models with musculo-skeletal simulations to enable models of the neural control of behavior. In the longer term, developing seamless interfaces between NeuroML and other domain specific standards will enable the development of more holistic models of the neural control of body systems across a wide range of organisms, as well as greater exchange of models and insights between computational neuroscience and AI.","md":"NeuroMLv2 is already a mature community standard that provides a framework for standardizing biologically detailed neuronal network models. By providing a stable, common framework defining the essential entities required for biologically detailed neuronal modeling, NeuroML has spawned an ecosystem of tools that span all stages of the model development life cycle. In the short term, we envision the functionality of NeuroML to expand further and for new online resources that encourage the construction of FAIR models using pyNeuroML to be taken up by the community. The NeuroML development team are also beginning to explore how to combine NeuroML-based circuit models with musculo-skeletal simulations to enable models of the neural control of behavior. In the longer term, developing seamless interfaces between NeuroML and other domain specific standards will enable the development of more holistic models of the neural control of body systems across a wide range of organisms, as well as greater exchange of models and insights between computational neuroscience and AI.","bBox":{"x":168.53,"y":34.63,"w":415,"h":389.56}},{"type":"heading","lvl":1,"value":"Materials and methods","md":"# Materials and methods","bBox":{"x":168.53,"y":448.12,"w":152,"h":14}},{"type":"text","value":"NeuroMLv2 is formally specified by the NeuroMLv2 XML schema, which defines the allowed structure of XML files which comply to the standard, and the LEMS ComponentType definitions, which define the internal state variables of the underlying elements, providing a machine-readable specification of the time evolution of model components. The specification is backed up by a suite of software tools that support the model life cycle and the accompanying usage and development documentation.\n\nWe illustrate the key parts of this framework using the HindmarshRose cell model (Hindmarsh and Rose, 1984; Figure 11), which as an abstract point neuron model, serves as an appropriate simple NeuroMLv2 ComponentType.","md":"NeuroMLv2 is formally specified by the NeuroMLv2 XML schema, which defines the allowed structure of XML files which comply to the standard, and the LEMS ComponentType definitions, which define the internal state variables of the underlying elements, providing a machine-readable specification of the time evolution of model components. The specification is backed up by a suite of software tools that support the model life cycle and the accompanying usage and development documentation.\n\nWe illustrate the key parts of this framework using the HindmarshRose cell model (Hindmarsh and Rose, 1984; Figure 11), which as an abstract point neuron model, serves as an appropriate simple NeuroMLv2 ComponentType.","bBox":{"x":168.53,"y":514.11,"w":411.71,"h":44.99}},{"type":"heading","lvl":1,"value":"The NeuroML XML Schema","md":"# The NeuroML XML Schema","bBox":{"x":168.53,"y":573.55,"w":154,"h":12}},{"type":"text","value":"We begin with the NeuroMLv2 standard. The standard consists of two parts, each serving different functions:\n\n1. the NeuroMLv2 XML schema\n2. corresponding LEMS component type definitions\n\nThe NeuroMLv2 schema is a language independent data model that constrains the structure of a NeuroMLv2 model description. The NeuroML schema is formally described as an XML Schema document (https://neuroml.org/schema/neuroml2) in the XML Schema Definition (XSD) format, a recommendation of the World Wide Web Consortium (W3C) (https://www.w3.org/TR/xmlschema-1/). An XML document that claims to conform to a particular schema can be validated against the schema. All NeuroMLv2 model descriptions can, therefore, be validated against the NeuroMLv2 schema.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"We begin with the NeuroMLv2 standard. The standard consists of two parts, each serving different functions:\n\n1. the NeuroMLv2 XML schema\n2. corresponding LEMS component type definitions\n\nThe NeuroMLv2 schema is a language independent data model that constrains the structure of a NeuroMLv2 model description. The NeuroML schema is formally described as an XML Schema document (https://neuroml.org/schema/neuroml2) in the XML Schema Definition (XSD) format, a recommendation of the World Wide Web Consortium (W3C) (https://www.w3.org/TR/xmlschema-1/). An XML document that claims to conform to a particular schema can be validated against the schema. All NeuroMLv2 model descriptions can, therefore, be validated against the NeuroMLv2 schema.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":589.55,"w":413.84,"h":129.88}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/NeuroML/NeuroMLlite","text":""},{"url":"https://neuroml.org/schema/neuroml2","text":""},{"url":"https://www.w3.org/TR/xmlschema-1/","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.278},{"page":29,"text":"           Tools  and  resourceseuroscience\n                                                                                                                                                                                                                                                                                                                                                                                       a. NeuroML model description serialization\n                                                                                                                                                                                                                                                                                                                                                                                       <neuroml                                                                                                                                                                       xmlns=\"http://www.neuroml.org/schema/neuroml2\"\n                                                                                                                                                                                                                                                                                                                                                                                        xmlns:xs=\"http://www.w3.org/2001/ΧMLSchema\"                                            xmlns:xs=\"http://www.w3.org/2001/ΧMLSchema\"                                            xmlns:xs=\"http://www.w3.org/2001/ΧMLSchema\"\n                                                                                                                                                                                                                                                                                                                                                                                        xmlns:xsi=\"http://www.w3.org/2001/ΧMLSchema–instance\"                                  xmlns:xsi=\"http://www.w3.org/2001/ΧMLSchema–instance\"                                  xmlns:xsi=\"http://www.w3.org/2001/ΧMLSchema–instance\"\n                                                                                                                                                                                                                                                                                                                                                                                        xsi:schemaLocation=\"http://www.neuroml.org/schema/neuroml2                             xsi:schemaLocation=\"http://www.neuroml.org/schema/neuroml2                             xsi:schemaLocation=\"http://www.neuroml.org/schema/neuroml2\n                                                                                                                                                                                                                                                                                                                                                                                        https://raw.github.com/NeuroML/NeuroML2/development/Schemas/NeuroML2/NeuroML_v2.3.xsd\" https://raw.github.com/NeuroML/NeuroML2/development/Schemas/NeuroML2/NeuroML_v2.3.xsd\" https://raw.github.com/NeuroML/NeuroML2/development/Schemas/NeuroML2/NeuroML_v2.3.xsd\"\n                                                                                                                                                                                                                                                                                                                                                                                        id=\"ΗindmarshRoseNeuron\">                                                              id=\"ΗindmarshRoseNeuron\">                                                              id=\"ΗindmarshRoseNeuron\">\nhindmarshRose1984Cell id=\"hr_regular_bursting\" C=\"28.57142857pF\" a=\"1.0\" b=\"3.0\"\nc=\"–3.0\" d=\"5.0\" s=\"4.0\" x1=\"–1.3\" r=\"0.002\" x0=\"–1.1\" y0=\"–9\" z0=\"1.0\"\nv_scaling=\"1.0mV\"/>\npulseGenerator id=\"pulseGen_0\" delay=\"0s\" duration=\"1000s\" amplitude=\"5nΑ\"/>\n                                                                                                                                                                                                                                                                                                                                                                                        <network                                                                               <network                                                                               <network id=\"ΗRNet\">\npopulation id=\"ΗRPop0\" component=\"hr_regular_bursting\" size=\"1\"/>\nexplicitΙnput target=\"ΗRPop0[0]\" input=\"pulseGen_0\" destination=\"synapses\"/>\n                                                                                                                                                                                                                                                                                                                                                                                        </network>                                                                             </network>                                                                             </network>\n                                                                                                                                                                                                                                                                                                                                                                                       </neuroml>\n                                                                                                                                                                                                                                                                                                                                                                                       b.                                                                                                                                                                                0.06\nnnnn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ~0.04\nntime (s)\n                                Figure 11. Example model description of a HindmarshRose1984Cell NeuroML component. (a) XML serialization of       Figure 11. Example model description of a HindmarshRose1984Cell NeuroML component. (a) XML serialization of       Figure 11. Example model description of a HindmarshRose1984Cell NeuroML component. (a) XML serialization of       Figure 11. Example model description of a HindmarshRose1984Cell NeuroML component. (a) XML serialization of\n                                the model description containing the main hindmarshRose1984Cell element with a set of parameters which result     the model description containing the main hindmarshRose1984Cell element with a set of parameters which result     the model description containing the main hindmarshRose1984Cell element with a set of parameters which result     the model description containing the main hindmarshRose1984Cell element with a set of parameters which result\n                                in regular bursting. A current clamp stimulus is applied using a pulseGenerator, and a population of one cell is  in regular bursting. A current clamp stimulus is applied using a pulseGenerator, and a population of one cell is  in regular bursting. A current clamp stimulus is applied using a pulseGenerator, and a population of one cell is  in regular bursting. A current clamp stimulus is applied using a pulseGenerator, and a population of one cell is\n                                added with this in a network. This XML can be validated against the NeuroML Schema. (b) Membrane potentials       added with this in a network. This XML can be validated against the NeuroML Schema. (b) Membrane potentials       added with this in a network. This XML can be validated against the NeuroML Schema. (b) Membrane potentials       added with this in a network. This XML can be validated against the NeuroML Schema. (b) Membrane potentials\n                                generated from a simulation of the model in (a). The LEMS simulation file to execute this is shown in Figure 15.  generated from a simulation of the model in (a). The LEMS simulation file to execute this is shown in Figure 15.  generated from a simulation of the model in (a). The LEMS simulation file to execute this is shown in Figure 15.  generated from a simulation of the model in (a). The LEMS simulation file to execute this is shown in Figure 15.\n                                The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/       The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/       The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/       The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/\n                                master/NeuroML2/examples.                                                                                         master/NeuroML2/examples.                                                                                         master/NeuroML2/examples.                                                                                         master/NeuroML2/examples.\n                                                                                                                                                                                                                                                                                                                                                                                       The basic building blocks of an XSD schema are ‘simple’ or ‘complex’ types and their ‘attributes.’\n                                All types are created as ‘extensions’ or ‘restrictions’ of other types. Complex types may contain other           All types are created as ‘extensions’ or ‘restrictions’ of other types. Complex types may contain other           All types are created as ‘extensions’ or ‘restrictions’ of other types. Complex types may contain other           All types are created as ‘extensions’ or ‘restrictions’ of other types. Complex types may contain other\n                                types and attributes whereas simple types may not. Figure 12 shows some example types deﬁned                      types and attributes whereas simple types may not. Figure 12 shows some example types deﬁned                      types and attributes whereas simple types may not. Figure 12 shows some example types deﬁned                      types and attributes whereas simple types may not. Figure 12 shows some example types deﬁned\n                                in the NeuroMLv2 schema. For example, the Nml2Quantity_none simple type restricts the in- built                   in the NeuroMLv2 schema. For example, the Nml2Quantity_none simple type restricts the in- built                   in the NeuroMLv2 schema. For example, the Nml2Quantity_none simple type restricts the in- built                   in the NeuroMLv2 schema. For example, the Nml2Quantity_none simple type restricts the in- built\n                                ‘string’ type using a regular expression ‘pattern’ that limits what string values it can contain. The type        ‘string’ type using a regular expression ‘pattern’ that limits what string values it can contain. The type        ‘string’ type using a regular expression ‘pattern’ that limits what string values it can contain. The type        ‘string’ type using a regular expression ‘pattern’ that limits what string values it can contain. The type\n                                is Nml2Quantity_none is to be used for unit-                                                                      is Nml2Quantity_none is to be used for unit-                                                                      is Nml2Quantity_none is to be used for unit-                                                                      is Nml2Quantity_none is to be used for unit-\nless quantities (e.g. 3, 6.7, –1.1e-\nand the restriction\n                                pattern for translates to ‘a string that may start with a hyphen (negative sign), followed by any number          pattern for translates to ‘a string that may start with a hyphen (negative sign), followed by any number          pattern for translates to ‘a string that may start with a hyphen (negative sign), followed by any number          pattern for translates to ‘a string that may start with a hyphen (negative sign), followed by any number\n                                of numerical characters (potentially containing a decimal point) and a string containing capital or               of numerical characters (potentially containing a decimal point) and a string containing capital or               of numerical characters (potentially containing a decimal point) and a string containing capital or               of numerical characters (potentially containing a decimal point) and a string containing capital or\n                                small ‘e’ (to specify the exponent).’ The restriction pattern for the Nml2Quantity_voltage  type is               small ‘e’ (to specify the exponent).’ The restriction pattern for the Nml2Quantity_voltage  type is               small ‘e’ (to specify the exponent).’ The restriction pattern for the Nml2Quantity_voltage  type is               small ‘e’ (to specify the exponent).’ The restriction pattern for the Nml2Quantity_voltage  type is\n                                similar, but must be followed by a ‘V’ or ‘mV.’ In this way, the restriction ensures that a value of type         similar, but must be followed by a ‘V’ or ‘mV.’ In this way, the restriction ensures that a value of type         similar, but must be followed by a ‘V’ or ‘mV.’ In this way, the restriction ensures that a value of type         similar, but must be followed by a ‘V’ or ‘mV.’ In this way, the restriction ensures that a value of type\n                                ‘Nml2Quantity_voltage’ represents a physical voltage quantity with units ‘V’ (volt) or ‘mV’ (millivolt).          ‘Nml2Quantity_voltage’ represents a physical voltage quantity with units ‘V’ (volt) or ‘mV’ (millivolt).          ‘Nml2Quantity_voltage’ represents a physical voltage quantity with units ‘V’ (volt) or ‘mV’ (millivolt).          ‘Nml2Quantity_voltage’ represents a physical voltage quantity with units ‘V’ (volt) or ‘mV’ (millivolt).\n                                Furthermore, a NeuroMLv2 model description that uses a voltage value that does not match this                     Furthermore, a NeuroMLv2 model description that uses a voltage value that does not match this                     Furthermore, a NeuroMLv2 model description that uses a voltage value that does not match this                     Furthermore, a NeuroMLv2 model description that uses a voltage value that does not match this\n                                pattern, for example ‘0.5 s,’ will be invalid.                                                                    pattern, for example ‘0.5 s,’ will be invalid.                                                                    pattern, for example ‘0.5 s,’ will be invalid.                                                                    pattern, for example ‘0.5 s,’ will be invalid.\n                                                                                                                                                                                                                                                                                                                                                                                       The example of a complex type in Figure 12 is the HindmarshRose1984Cell type that extends\n                                the BaseCellMembPotCap complex type (the base type for any cell producing a membrane potential                    the BaseCellMembPotCap complex type (the base type for any cell producing a membrane potential                    the BaseCellMembPotCap complex type (the base type for any cell producing a membrane potential                    the BaseCellMembPotCap complex type (the base type for any cell producing a membrane potential\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    29 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# a. NeuroML model description serialization\n\n&lt;neuroml xmlns=\"http://www.neuroml.org/schema/neuroml2\"\nxmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://www.neuroml.org/schema/neuroml2\nhttps://raw.github.com/NeuroML/NeuroML2/development/Schemas/NeuroML2/NeuroML_v2.3.xsd\"\nid=\"HindmarshRoseNeuron\"&gt;\n&lt;hindmarshRose1984Cell id=\"hr_regular_bursting\" C=\"28.57142857pF\" a=\"1.0\" b=\"3.0\"\nc=\"–3.0\" d=\"5.0\" s=\"4.0\" x1=\"–1.3\" r=\"0.002\" x0=\"–1.1\" y0=\"–9\" z0=\"1.0\"\nv_scaling=\"1.0mV\"/&gt;\n&lt;pulseGenerator id=\"pulseGen_0\" delay=\"0s\" duration=\"1000s\" amplitude=\"5nA\"/&gt;\n&lt;network id=\"HRNet\"&gt;\n&lt;population id=\"HRPop0\" component=\"hr_regular_bursting\" size=\"1\"/&gt;\n&lt;explicitInput target=\"HRPop0[0]\" input=\"pulseGen_0\" destination=\"synapses\"/&gt;\n&lt;/network&gt;\n&lt;/neuroml&gt;\n\n# b.\n\n| 0.06                                   | 0.04 | 0.02 | 0.00 | 0.02 | \\~0.04 | -0.06 |\n| -------------------------------------- | ---- | ---- | ---- | ---- | ------ | ----- |\n| 0.00 0.25 0.50 0.75 1.00 1.25 time (s) |      |      |      |      |        |       |\n\nFigure 11. Example model description of a HindmarshRose1984Cell NeuroML component. (a) XML serialization of the model description containing the main hindmarshRose1984Cell element with a set of parameters which result in regular bursting. A current clamp stimulus is applied using a pulseGenerator, and a population of one cell is added with this in a network. This XML can be validated against the NeuroML Schema. (b) Membrane potentials generated from a simulation of the model in (a). The LEMS simulation file to execute this is shown in Figure 15. The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n\nThe basic building blocks of an XSD schema are ‘simple’ or ‘complex’ types and their ‘attributes.’ All types are created as ‘extensions’ or ‘restrictions’ of other types. Complex types may contain other types and attributes whereas simple types may not. Figure 12 shows some example types defined in the NeuroMLv2 schema. For example, the Nml2Quantity_none simple type restricts the in-built ‘string’ type using a regular expression ‘pattern’ that limits what string values it can contain. The type is Nml2Quantity_none is to be used for unit-less quantities (e.g. 3, 6.7, –1.1e-5) and the restriction pattern for translates to ‘a string that may start with a hyphen (negative sign), followed by any number of numerical characters (potentially containing a decimal point) and a string containing capital or small ‘e’ (to specify the exponent).’ The restriction pattern for the Nml2Quantity_voltage type is similar, but must be followed by a ‘V’ or ‘mV.’ In this way, the restriction ensures that a value of type ‘Nml2Quantity_voltage’ represents a physical voltage quantity with units ‘V’ (volt) or ‘mV’ (millivolt). Furthermore, a NeuroMLv2 model description that uses a voltage value that does not match this pattern, for example ‘0.5 s,’ will be invalid.\n\nThe example of a complex type in Figure 12 is the HindmarshRose1984Cell type that extends the BaseCellMembPotCap complex type (the base type for any cell producing a membrane potential).\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[{"name":"img_p28_1.png","height":459,"width":612,"x":273.5189819,"y":275.17137149999996,"original_width":612,"original_height":459,"ocr":[{"x":50,"y":38,"w":54,"h":24,"confidence":0.9998492002487183,"text":"0.06"},{"x":2,"y":78,"w":30,"h":38,"confidence":0.9969492611930697,"text":"2"},{"x":50,"y":96,"w":54,"h":24,"confidence":0.9999483823776245,"text":"0.04"},{"x":4,"y":114,"w":24,"h":108,"confidence":0.9943454556847975,"text":"L"},{"x":50,"y":154,"w":54,"h":24,"confidence":0.9999779462814331,"text":"0.02"},{"x":50,"y":210,"w":54,"h":24,"confidence":0.999626100063324,"text":"0.00"},{"x":50,"y":268,"w":52,"h":26,"confidence":0.9999970197677612,"text":"0.02"},{"x":36,"y":326,"w":66,"h":24,"confidence":0.8653958857756362,"text":"~0.04"},{"x":32,"y":382,"w":72,"h":26,"confidence":0.9483804494617302,"text":"-0.06"},{"x":106,"y":406,"w":54,"h":26,"confidence":0.9961934123759979,"text":"0.00"},{"x":186,"y":406,"w":54,"h":26,"confidence":0.999997079372406,"text":"0.25"},{"x":266,"y":406,"w":54,"h":26,"confidence":0.9999776482582092,"text":"0.50"},{"x":344,"y":406,"w":54,"h":26,"confidence":0.9926115644867209,"text":"0.75"},{"x":424,"y":406,"w":54,"h":26,"confidence":0.9999274611473083,"text":"1.00"},{"x":504,"y":406,"w":52,"h":26,"confidence":0.9999162464104452,"text":"1.25"},{"x":308,"y":432,"w":94,"h":27,"confidence":0.9149876568184532,"text":"time (s)"}]}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":207.31,"h":312.21}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"a. NeuroML model description serialization","md":"# a. NeuroML model description serialization","bBox":{"x":174.65,"y":58.84,"w":180.69,"h":288.16}},{"type":"text","value":"&lt;neuroml xmlns=\"http://www.neuroml.org/schema/neuroml2\"\nxmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://www.neuroml.org/schema/neuroml2\nhttps://raw.github.com/NeuroML/NeuroML2/development/Schemas/NeuroML2/NeuroML_v2.3.xsd\"\nid=\"HindmarshRoseNeuron\"&gt;\n&lt;hindmarshRose1984Cell id=\"hr_regular_bursting\" C=\"28.57142857pF\" a=\"1.0\" b=\"3.0\"\nc=\"–3.0\" d=\"5.0\" s=\"4.0\" x1=\"–1.3\" r=\"0.002\" x0=\"–1.1\" y0=\"–9\" z0=\"1.0\"\nv_scaling=\"1.0mV\"/&gt;\n&lt;pulseGenerator id=\"pulseGen_0\" delay=\"0s\" duration=\"1000s\" amplitude=\"5nA\"/&gt;\n&lt;network id=\"HRNet\"&gt;\n&lt;population id=\"HRPop0\" component=\"hr_regular_bursting\" size=\"1\"/&gt;\n&lt;explicitInput target=\"HRPop0[0]\" input=\"pulseGen_0\" destination=\"synapses\"/&gt;\n&lt;/network&gt;\n&lt;/neuroml&gt;","md":"&lt;neuroml xmlns=\"http://www.neuroml.org/schema/neuroml2\"\nxmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://www.neuroml.org/schema/neuroml2\nhttps://raw.github.com/NeuroML/NeuroML2/development/Schemas/NeuroML2/NeuroML_v2.3.xsd\"\nid=\"HindmarshRoseNeuron\"&gt;\n&lt;hindmarshRose1984Cell id=\"hr_regular_bursting\" C=\"28.57142857pF\" a=\"1.0\" b=\"3.0\"\nc=\"–3.0\" d=\"5.0\" s=\"4.0\" x1=\"–1.3\" r=\"0.002\" x0=\"–1.1\" y0=\"–9\" z0=\"1.0\"\nv_scaling=\"1.0mV\"/&gt;\n&lt;pulseGenerator id=\"pulseGen_0\" delay=\"0s\" duration=\"1000s\" amplitude=\"5nA\"/&gt;\n&lt;network id=\"HRNet\"&gt;\n&lt;population id=\"HRPop0\" component=\"hr_regular_bursting\" size=\"1\"/&gt;\n&lt;explicitInput target=\"HRPop0[0]\" input=\"pulseGen_0\" destination=\"synapses\"/&gt;\n&lt;/network&gt;\n&lt;/neuroml&gt;","bBox":{"x":174.65,"y":79.47,"w":380.94,"h":272.53}},{"type":"heading","lvl":1,"value":"b.","md":"# b.","bBox":{"x":174.65,"y":284.68,"w":8,"h":9}},{"type":"table","rows":[["0.06","0.04","0.02","0.00","0.02","~0.04","-0.06"],["0.00 0.25 0.50 0.75 1.00 1.25 time (s)","","","","","",""]],"md":"| 0.06                                   | 0.04 | 0.02 | 0.00 | 0.02 | \\~0.04 | -0.06 |\n| -------------------------------------- | ---- | ---- | ---- | ---- | ------ | ----- |\n| 0.00 0.25 0.50 0.75 1.00 1.25 time (s) |      |      |      |      |        |       |","isPerfectTable":true,"csv":"\"0.06\",\"0.04\",\"0.02\",\"0.00\",\"0.02\",\"~0.04\",\"-0.06\"\n\"0.00 0.25 0.50 0.75 1.00 1.25 time (s)\",\"\",\"\",\"\",\"\",\"\",\"\"","bBox":{"x":37.01,"y":34.63,"w":546.91,"h":720.13}},{"type":"text","value":"Figure 11. Example model description of a HindmarshRose1984Cell NeuroML component. (a) XML serialization of the model description containing the main hindmarshRose1984Cell element with a set of parameters which result in regular bursting. A current clamp stimulus is applied using a pulseGenerator, and a population of one cell is added with this in a network. This XML can be validated against the NeuroML Schema. (b) Membrane potentials generated from a simulation of the model in (a). The LEMS simulation file to execute this is shown in Figure 15. The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n\nThe basic building blocks of an XSD schema are ‘simple’ or ‘complex’ types and their ‘attributes.’ All types are created as ‘extensions’ or ‘restrictions’ of other types. Complex types may contain other types and attributes whereas simple types may not. Figure 12 shows some example types defined in the NeuroMLv2 schema. For example, the Nml2Quantity_none simple type restricts the in-built ‘string’ type using a regular expression ‘pattern’ that limits what string values it can contain. The type is Nml2Quantity_none is to be used for unit-less quantities (e.g. 3, 6.7, –1.1e-5) and the restriction pattern for translates to ‘a string that may start with a hyphen (negative sign), followed by any number of numerical characters (potentially containing a decimal point) and a string containing capital or small ‘e’ (to specify the exponent).’ The restriction pattern for the Nml2Quantity_voltage type is similar, but must be followed by a ‘V’ or ‘mV.’ In this way, the restriction ensures that a value of type ‘Nml2Quantity_voltage’ represents a physical voltage quantity with units ‘V’ (volt) or ‘mV’ (millivolt). Furthermore, a NeuroMLv2 model description that uses a voltage value that does not match this pattern, for example ‘0.5 s,’ will be invalid.\n\nThe example of a complex type in Figure 12 is the HindmarshRose1984Cell type that extends the BaseCellMembPotCap complex type (the base type for any cell producing a membrane potential).\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Figure 11. Example model description of a HindmarshRose1984Cell NeuroML component. (a) XML serialization of the model description containing the main hindmarshRose1984Cell element with a set of parameters which result in regular bursting. A current clamp stimulus is applied using a pulseGenerator, and a population of one cell is added with this in a network. This XML can be validated against the NeuroML Schema. (b) Membrane potentials generated from a simulation of the model in (a). The LEMS simulation file to execute this is shown in Figure 15. The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n\nThe basic building blocks of an XSD schema are ‘simple’ or ‘complex’ types and their ‘attributes.’ All types are created as ‘extensions’ or ‘restrictions’ of other types. Complex types may contain other types and attributes whereas simple types may not. Figure 12 shows some example types defined in the NeuroMLv2 schema. For example, the Nml2Quantity_none simple type restricts the in-built ‘string’ type using a regular expression ‘pattern’ that limits what string values it can contain. The type is Nml2Quantity_none is to be used for unit-less quantities (e.g. 3, 6.7, –1.1e-5) and the restriction pattern for translates to ‘a string that may start with a hyphen (negative sign), followed by any number of numerical characters (potentially containing a decimal point) and a string containing capital or small ‘e’ (to specify the exponent).’ The restriction pattern for the Nml2Quantity_voltage type is similar, but must be followed by a ‘V’ or ‘mV.’ In this way, the restriction ensures that a value of type ‘Nml2Quantity_voltage’ represents a physical voltage quantity with units ‘V’ (volt) or ‘mV’ (millivolt). Furthermore, a NeuroMLv2 model description that uses a voltage value that does not match this pattern, for example ‘0.5 s,’ will be invalid.\n\nThe example of a complex type in Figure 12 is the HindmarshRose1984Cell type that extends the BaseCellMembPotCap complex type (the base type for any cell producing a membrane potential).\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":284.68,"w":415.39,"h":434.77}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples","text":""},{"url":"https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples","text":"master/NeuroML2/examples."}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.349},{"page":30,"text":"           Tools  and  resources                                                                                                                                                                                                                                                               Neuroscience\n                                                                                                                                                      <xs:simpleType                                <xs:simpleType                                                                 name=\"Nml2Quantity_none\"> <!-- For dimensionless parameters -->\n                                                                                                                                                                                                      <xs:restriction base=\"xs:string\"> <xs:restriction base=\"xs:string\">\n                                                                                                                                                                                                                                         <xs:pattern                              <xs:pattern  value=\"–?([0–9]*(\\.[0–9]+)?)([eΕ]–?[0–9]+)?\"/>\n                                                                                                                                                                                                      </xs:restriction>                 </xs:restriction>\n                                                                                                                                                      </xs:simpleType>                              </xs:simpleType>\n                                                                                                                                                      <xs:simpleType                                <xs:simpleType                                                                 name=\"Nml2Quantity_voltage\"> <!-- For params with dimension voltage -->\n                                                                                                                                                                                                      <xs:restriction base=\"xs:string\"> <xs:restriction base=\"xs:string\">\n                                                                                                                                                                                                                                         <xs:pattern                              <xs:pattern  value=\"–?([0–9]*(\\.[0–9]+)?)([eΕ]–?[0–9]+)?[\\s]*(V|mV)\"/>\n                                                                                                                                                                                                                                        </xs:restriction>\n                                                                                                                                                      </xs:simpleType>                              </xs:simpleType>\n                                                                                                                                                      <xs:complexType name=\"ΗindmarshRose1984Cell\"> <xs:complexType name=\"ΗindmarshRose1984Cell\">\n                                                                                                                                                                                                                                        <xs:annotation>\n                                                                                                                                                                                                                                                                                  <xs:documentation>The Ηindmarsh Rose model is a simpliƒied point cell model which\n                                                                                                                                                                                                                                                                                   captures complex ƒiring patterns oƒ single neurons, such as\n                                                                                                                                                                                                                                                                                   periodic and chaotic bursting...\n                                                                                                                                                                                                                                         </xs:documentation>                      </xs:documentation>\n                                                                                                                                                                                                      </xs:annotation>                  </xs:annotation>\n                                                                                                                                                                                                      <xs:complexContent>               <xs:complexContent>\n                                                                                                                                                                                                                                         <xs:extension base=\"ΒaseCellMembPotCap\"> <xs:extension base=\"ΒaseCellMembPotCap\">\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"a\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"b\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"c\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"d\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"s\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"x1\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"r\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"x0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"y0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                               <xs:attribute name=\"z0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                  <xs:attribute name=\"v_scaling\" type=\"Nml2Quantity_voltage\" use=\"required\"/>\n                                                                                                                                                                                                                                                                                  </xs:extension>\n                                                                                                                                                                                                                                        </xs:complexContent>\n                                                                                                                                                                                                    </xs:complexType>\n                                   Figure 12. Type definitions taken from the NeuroMLv2 schema (https://github.com/NeuroML/NeuroML2/                 Figure 12. Type definitions taken from the NeuroMLv2 schema (https://github.com/NeuroML/NeuroML2/\n                                   blob/master/Schemas/NeuroML2/NeuroML_v2.3.1.xsd) which describes the structure of NeuroMLv2 elements.             blob/master/Schemas/NeuroML2/NeuroML_v2.3.1.xsd) which describes the structure of NeuroMLv2 elements.\n                                   Top: ‘simple’ types may not include other elements or attributes. Here, the Nml2Quantity_none and                 Top: ‘simple’ types may not include other elements or attributes. Here, the Nml2Quantity_none and\n                                   Nml2Quantity_voltage types define restrictions on the default string type to limit what strings can be used       Nml2Quantity_voltage types define restrictions on the default string type to limit what strings can be used\n                                   as valid values for attributes of these types. Bottom: example of a ‘complex’ type, the HindmarshRose cell model  as valid values for attributes of these types. Bottom: example of a ‘complex’ type, the HindmarshRose cell model\n                                   (Hindmarsh and Rose, 1984), that can also include other elements of other types, and extend other types.          (Hindmarsh and Rose, 1984), that can also include other elements of other types, and extend other types.\n                                   v with a capacitance parameter C), and deﬁnes new ‘required’ (compulsory) attributes. These attri-                v with a capacitance parameter C), and deﬁnes new ‘required’ (compulsory) attributes. These attri-\n                                   butes are of simple types—these are all unit-less quantities apart from                                           butes are of simple types—these are all unit-less quantities apart from\n                                                                                                                                                                                                                                                                                               v_scaling, which has dimen-\n                                   sion voltage. Note that inherited attributes are not re-                                                          sion voltage. Note that inherited attributes are not re-                                                                                  listed in the complex type deﬁnition—the\n                                   compulsory capacitance attribute, C, is inherited here from BaseCellMembPotCap.                                   compulsory capacitance attribute, C, is inherited here from BaseCellMembPotCap.\n                                                                                                                                                                                                     The NeuroMLv2 schema serves multiple critical functions. A variety of tools and libraries support\n                                   the validation of ﬁles against XSD schema deﬁnitions. Therefore, the NeuroMLv2 schema enables                     the validation of ﬁles against XSD schema deﬁnitions. Therefore, the NeuroMLv2 schema enables\n                                   the validation of model descriptions—model structure, parameters, parameter values and their units,               the validation of model descriptions—model structure, parameters, parameter values and their units,\n                                   cardinality, element positioning in the model hierarchy (level 1 validation in Figure 7)—prior to simu‐           cardinality, element positioning in the model hierarchy (level 1 validation in Figure 7)—prior to simu‐\n                                   lation. XSD schema deﬁnitions, as language independent data models, also allow the generation of                  lation. XSD schema deﬁnitions, as language independent data models, also allow the generation of\n                                   APIs in different languages. More information on how APIs in different languages are generated using              APIs in different languages. More information on how APIs in different languages are generated using\n                                   the NeuroMLv2 XSD schema deﬁnition is provided in later sections.                                                 the NeuroMLv2 XSD schema deﬁnition is provided in later sections.\n                                                                                                                                                                                                     The NeuroMLv2 XSD schema is also released and maintained as a versioned artifact, similar to\n                                   the software packages. The current version is 2.3, and can be found in the NeuroML2 repository on                 the software packages. The current version is 2.3, and can be found in the NeuroML2 repository on\n                                   GitHub (https://github.com/NeuroML/NeuroML2/tree/master/Schemas/NeuroML2).                                        GitHub (https://github.com/NeuroML/NeuroML2/tree/master/Schemas/NeuroML2).\n                                   LEMS ComponentType definitions                                                                                    LEMS ComponentType definitions\n                                   The second part of the NeuroMLv2 standard consists of the corresponding LEMS ComponentType                        The second part of the NeuroMLv2 standard consists of the corresponding LEMS ComponentType\n                                   deﬁnitions. Whereas the XSD Schema describes the structure of a NeuroMLv2 model description, the                  deﬁnitions. Whereas the XSD Schema describes the structure of a NeuroMLv2 model description, the\n                                                                                                                                                     LEMS ComponentType deﬁnitions formally describe the dynamics of the model elements.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                          30 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n<xs:simpleType name=\"Nml2Quantity_none\">\n<xs:restriction base=\"xs:string\">\n<xs:pattern value=\"–?([0–9]*(\\.[0–9]+)?)([eΕ]–?[0–9]+)?\"/>\n</xs:restriction>\n</xs:simpleType>\n<xs:simpleType name=\"Nml2Quantity_voltage\">\n<xs:restriction base=\"xs:string\">\n<xs:pattern value=\"–?([0–9]*(\\.[0–9]+)?)([eΕ]–?[0–9]+)?[\\s]*(V|mV)\"/>\n</xs:restriction>\n</xs:simpleType>\n<xs:complexType name=\"ΗindmarshRose1984Cell\">\n<xs:annotation>\n<xs:documentation>The Ηindmarsh Rose model is a simplified point cell model which captures complex firing patterns of single neurons, such as periodic and chaotic bursting...</xs:documentation>\n</xs:annotation>\n<xs:complexContent>\n<xs:extension base=\"ΒaseCellMembPotCap\">\n<xs:attribute name=\"a\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"b\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"c\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"d\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"s\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"x1\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"r\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"x0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"y0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"z0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"v_scaling\" type=\"Nml2Quantity_voltage\" use=\"required\"/>\n</xs:extension>\n</xs:complexContent>\n</xs:complexType>\nFigure 12. Type definitions taken from the NeuroMLv2 schema (https://github.com/NeuroML/NeuroML2/blob/master/Schemas/NeuroML2/NeuroML_v2.3.1.xsd) which describes the structure of NeuroMLv2 elements.\n\nTop: ‘simple’ types may not include other elements or attributes. Here, the Nml2Quantity_none and Nml2Quantity_voltage types define restrictions on the default string type to limit what strings can be used as valid values for attributes of these types. Bottom: example of a ‘complex’ type, the HindmarshRose cell model (Hindmarsh and Rose, 1984), that can also include other elements of other types, and extend other types.\n\nv with a capacitance parameter C), and defines new ‘required’ (compulsory) attributes. These attributes are of simple types—these are all unit-less quantities apart from v_scaling, which has dimension voltage. Note that inherited attributes are not listed in the complex type definition—the compulsory capacitance attribute, C, is inherited here from BaseCellMembPotCap.\n\nThe NeuroMLv2 schema serves multiple critical functions. A variety of tools and libraries support the validation of files against XSD schema definitions. Therefore, the NeuroMLv2 schema enables the validation of model descriptions—model structure, parameters, parameter values and their units, cardinality, element positioning in the model hierarchy (level 1 validation in Figure 7)—prior to simulation. XSD schema definitions, as language independent data models, also allow the generation of APIs in different languages. More information on how APIs in different languages are generated using the NeuroMLv2 XSD schema definition is provided in later sections.\n\nThe NeuroMLv2 XSD schema is also released and maintained as a versioned artifact, similar to the software packages. The current version is 2.3, and can be found in the NeuroML2 repository on GitHub (https://github.com/NeuroML/NeuroML2/tree/master/Schemas/NeuroML2).\n\n# LEMS ComponentType definitions\n\nThe second part of the NeuroMLv2 standard consists of the corresponding LEMS ComponentType definitions. Whereas the XSD Schema describes the structure of a NeuroMLv2 model description, the LEMS ComponentType definitions formally describe the dynamics of the model elements.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"<xs:simpleType name=\"Nml2Quantity_none\">\n<xs:restriction base=\"xs:string\">\n<xs:pattern value=\"–?([0–9]*(\\.[0–9]+)?)([eΕ]–?[0–9]+)?\"/>\n</xs:restriction>\n</xs:simpleType>\n<xs:simpleType name=\"Nml2Quantity_voltage\">\n<xs:restriction base=\"xs:string\">\n<xs:pattern value=\"–?([0–9]*(\\.[0–9]+)?)([eΕ]–?[0–9]+)?[\\s]*(V|mV)\"/>\n</xs:restriction>\n</xs:simpleType>\n<xs:complexType name=\"ΗindmarshRose1984Cell\">\n<xs:annotation>\n<xs:documentation>The Ηindmarsh Rose model is a simplified point cell model which captures complex firing patterns of single neurons, such as periodic and chaotic bursting...</xs:documentation>\n</xs:annotation>\n<xs:complexContent>\n<xs:extension base=\"ΒaseCellMembPotCap\">\n<xs:attribute name=\"a\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"b\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"c\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"d\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"s\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"x1\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"r\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"x0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"y0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"z0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"v_scaling\" type=\"Nml2Quantity_voltage\" use=\"required\"/>\n</xs:extension>\n</xs:complexContent>\n</xs:complexType>\nFigure 12. Type definitions taken from the NeuroMLv2 schema (https://github.com/NeuroML/NeuroML2/blob/master/Schemas/NeuroML2/NeuroML_v2.3.1.xsd) which describes the structure of NeuroMLv2 elements.\n\nTop: ‘simple’ types may not include other elements or attributes. Here, the Nml2Quantity_none and Nml2Quantity_voltage types define restrictions on the default string type to limit what strings can be used as valid values for attributes of these types. Bottom: example of a ‘complex’ type, the HindmarshRose cell model (Hindmarsh and Rose, 1984), that can also include other elements of other types, and extend other types.\n\nv with a capacitance parameter C), and defines new ‘required’ (compulsory) attributes. These attributes are of simple types—these are all unit-less quantities apart from v_scaling, which has dimension voltage. Note that inherited attributes are not listed in the complex type definition—the compulsory capacitance attribute, C, is inherited here from BaseCellMembPotCap.\n\nThe NeuroMLv2 schema serves multiple critical functions. A variety of tools and libraries support the validation of files against XSD schema definitions. Therefore, the NeuroMLv2 schema enables the validation of model descriptions—model structure, parameters, parameter values and their units, cardinality, element positioning in the model hierarchy (level 1 validation in Figure 7)—prior to simulation. XSD schema definitions, as language independent data models, also allow the generation of APIs in different languages. More information on how APIs in different languages are generated using the NeuroMLv2 XSD schema definition is provided in later sections.\n\nThe NeuroMLv2 XSD schema is also released and maintained as a versioned artifact, similar to the software packages. The current version is 2.3, and can be found in the NeuroML2 repository on GitHub (https://github.com/NeuroML/NeuroML2/tree/master/Schemas/NeuroML2).","md":"<xs:simpleType name=\"Nml2Quantity_none\">\n<xs:restriction base=\"xs:string\">\n<xs:pattern value=\"–?([0–9]*(\\.[0–9]+)?)([eΕ]–?[0–9]+)?\"/>\n</xs:restriction>\n</xs:simpleType>\n<xs:simpleType name=\"Nml2Quantity_voltage\">\n<xs:restriction base=\"xs:string\">\n<xs:pattern value=\"–?([0–9]*(\\.[0–9]+)?)([eΕ]–?[0–9]+)?[\\s]*(V|mV)\"/>\n</xs:restriction>\n</xs:simpleType>\n<xs:complexType name=\"ΗindmarshRose1984Cell\">\n<xs:annotation>\n<xs:documentation>The Ηindmarsh Rose model is a simplified point cell model which captures complex firing patterns of single neurons, such as periodic and chaotic bursting...</xs:documentation>\n</xs:annotation>\n<xs:complexContent>\n<xs:extension base=\"ΒaseCellMembPotCap\">\n<xs:attribute name=\"a\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"b\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"c\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"d\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"s\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"x1\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"r\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"x0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"y0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"z0\" type=\"Nml2Quantity_none\" use=\"required\"/>\n<xs:attribute name=\"v_scaling\" type=\"Nml2Quantity_voltage\" use=\"required\"/>\n</xs:extension>\n</xs:complexContent>\n</xs:complexType>\nFigure 12. Type definitions taken from the NeuroMLv2 schema (https://github.com/NeuroML/NeuroML2/blob/master/Schemas/NeuroML2/NeuroML_v2.3.1.xsd) which describes the structure of NeuroMLv2 elements.\n\nTop: ‘simple’ types may not include other elements or attributes. Here, the Nml2Quantity_none and Nml2Quantity_voltage types define restrictions on the default string type to limit what strings can be used as valid values for attributes of these types. Bottom: example of a ‘complex’ type, the HindmarshRose cell model (Hindmarsh and Rose, 1984), that can also include other elements of other types, and extend other types.\n\nv with a capacitance parameter C), and defines new ‘required’ (compulsory) attributes. These attributes are of simple types—these are all unit-less quantities apart from v_scaling, which has dimension voltage. Note that inherited attributes are not listed in the complex type definition—the compulsory capacitance attribute, C, is inherited here from BaseCellMembPotCap.\n\nThe NeuroMLv2 schema serves multiple critical functions. A variety of tools and libraries support the validation of files against XSD schema definitions. Therefore, the NeuroMLv2 schema enables the validation of model descriptions—model structure, parameters, parameter values and their units, cardinality, element positioning in the model hierarchy (level 1 validation in Figure 7)—prior to simulation. XSD schema definitions, as language independent data models, also allow the generation of APIs in different languages. More information on how APIs in different languages are generated using the NeuroMLv2 XSD schema definition is provided in later sections.\n\nThe NeuroMLv2 XSD schema is also released and maintained as a versioned artifact, similar to the software packages. The current version is 2.3, and can be found in the NeuroML2 repository on GitHub (https://github.com/NeuroML/NeuroML2/tree/master/Schemas/NeuroML2).","bBox":{"x":168.53,"y":58.77,"w":413.01,"h":599.68}},{"type":"heading","lvl":1,"value":"LEMS ComponentType definitions","md":"# LEMS ComponentType definitions","bBox":{"x":168.53,"y":670.49,"w":192,"h":12}},{"type":"text","value":"The second part of the NeuroMLv2 standard consists of the corresponding LEMS ComponentType definitions. Whereas the XSD Schema describes the structure of a NeuroMLv2 model description, the LEMS ComponentType definitions formally describe the dynamics of the model elements.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"The second part of the NeuroMLv2 standard consists of the corresponding LEMS ComponentType definitions. Whereas the XSD Schema describes the structure of a NeuroMLv2 model description, the LEMS ComponentType definitions formally describe the dynamics of the model elements.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":670.49,"w":399,"h":25}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/NeuroML/NeuroML2/tree/master/Schemas/NeuroML2","text":""},{"url":"https://github.com/NeuroML/NeuroML2/blob/master/Schemas/NeuroML2/NeuroML_v2.3.1.xsd","text":""},{"url":"https://github.com/NeuroML/NeuroML2/blob/master/Schemas/NeuroML2/NeuroML_v2.3.1.xsd","text":"blob/master/Schemas/NeuroML2/NeuroML_v2.3.1.xsd) which describes the structure of NeuroMLv2 elements. "}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.554},{"page":31,"text":"           Tools  and  resourceseuroscience\nannon et al., 2014) is a domain independent general purpose machine-\nreadable language\nfor describing models and their simulations. A complete description of LEMS is provided in  Cannon\n                                 et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here,           et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here,           et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here,           et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here,           et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here,           et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here,           et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here,\nwe limit ourselves to a short summary necessary for understanding the NeuroMLv2 ComponentType\n                                 deﬁnitions.                                                                                                deﬁnitions.                                                                                                deﬁnitions.                                                                                                deﬁnitions.                                                                                                deﬁnitions.                                                                                                deﬁnitions.                                                                                                deﬁnitions.\nallows the deﬁnition of new model types called\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ComponentTypes. These are formal descrip-\n                                 tions of how a generic model element of that type behaves (the ‘dynamics’), independent of the             tions of how a generic model element of that type behaves (the ‘dynamics’), independent of the             tions of how a generic model element of that type behaves (the ‘dynamics’), independent of the             tions of how a generic model element of that type behaves (the ‘dynamics’), independent of the             tions of how a generic model element of that type behaves (the ‘dynamics’), independent of the             tions of how a generic model element of that type behaves (the ‘dynamics’), independent of the             tions of how a generic model element of that type behaves (the ‘dynamics’), independent of the\n                                 speciﬁc set of parameters in any instance. To describe the dynamics, such descriptions must list any       speciﬁc set of parameters in any instance. To describe the dynamics, such descriptions must list any       speciﬁc set of parameters in any instance. To describe the dynamics, such descriptions must list any       speciﬁc set of parameters in any instance. To describe the dynamics, such descriptions must list any       speciﬁc set of parameters in any instance. To describe the dynamics, such descriptions must list any       speciﬁc set of parameters in any instance. To describe the dynamics, such descriptions must list any       speciﬁc set of parameters in any instance. To describe the dynamics, such descriptions must list any\nnecessary parameters that are required, as well as the time-  varying state variables. The dimensions\nof these parameters and state variables must be speciﬁed, and any expressions involving them must\n                                 be dimensionally consistent. An instance of such a generic model is termed a Component                     be dimensionally consistent. An instance of such a generic model is termed a Component                     be dimensionally consistent. An instance of such a generic model is termed a Component                     be dimensionally consistent. An instance of such a generic model is termed a Component                     be dimensionally consistent. An instance of such a generic model is termed a Component                     be dimensionally consistent. An instance of such a generic model is termed a Component                     be dimensionally consistent. An instance of such a generic model is termed a Component   and can\n                                 be instantiated from a ComponentType                                                                       be instantiated from a ComponentType                                                                       be instantiated from a ComponentType                                                                       be instantiated from a ComponentType                                                                       be instantiated from a ComponentType                                                                       be instantiated from a ComponentType                                                                       be instantiated from a ComponentType  by providing the necessary parameters. One can think of\nomponentTypes as user deﬁned data types similar to ‘classes’ in many programming languages and\n                                 Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also          Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also          Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also          Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also          Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also          Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also          Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also\n                                 extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS  extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS  extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS  extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS  extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS  extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS  extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS\n                                 is designed for model simulation, ComponentType  deﬁnitions also include other simulation- related         is designed for model simulation, ComponentType  deﬁnitions also include other simulation- related         is designed for model simulation, ComponentType  deﬁnitions also include other simulation- related         is designed for model simulation, ComponentType  deﬁnitions also include other simulation- related         is designed for model simulation, ComponentType  deﬁnitions also include other simulation- related         is designed for model simulation, ComponentType  deﬁnitions also include other simulation- related         is designed for model simulation, ComponentType  deﬁnitions also include other simulation- related\n                                 features such as Exposures, specifying quantities that may be accessed/recorded by users.                  features such as Exposures, specifying quantities that may be accessed/recorded by users.                  features such as Exposures, specifying quantities that may be accessed/recorded by users.                  features such as Exposures, specifying quantities that may be accessed/recorded by users.                  features such as Exposures, specifying quantities that may be accessed/recorded by users.                  features such as Exposures, specifying quantities that may be accessed/recorded by users.                  features such as Exposures, specifying quantities that may be accessed/recorded by users.\nor model elements included in the NeuroML standard, there is a one-  to-\none mapping between\ntypes speciﬁed in the NeuroML XSD schema and LEMS\nomponentTypes, with the same parameters\n                                 speciﬁed in each. The addition of new model elements to the NeuroML standard, therefore, requires          speciﬁed in each. The addition of new model elements to the NeuroML standard, therefore, requires          speciﬁed in each. The addition of new model elements to the NeuroML standard, therefore, requires          speciﬁed in each. The addition of new model elements to the NeuroML standard, therefore, requires          speciﬁed in each. The addition of new model elements to the NeuroML standard, therefore, requires          speciﬁed in each. The addition of new model elements to the NeuroML standard, therefore, requires          speciﬁed in each. The addition of new model elements to the NeuroML standard, therefore, requires\n                                 the addition of new type deﬁnitions to both the XSD schema and the LEMS deﬁnitions. New user               the addition of new type deﬁnitions to both the XSD schema and the LEMS deﬁnitions. New user               the addition of new type deﬁnitions to both the XSD schema and the LEMS deﬁnitions. New user               the addition of new type deﬁnitions to both the XSD schema and the LEMS deﬁnitions. New user               the addition of new type deﬁnitions to both the XSD schema and the LEMS deﬁnitions. New user               the addition of new type deﬁnitions to both the XSD schema and the LEMS deﬁnitions. New user               the addition of new type deﬁnitions to both the XSD schema and the LEMS deﬁnitions. New user\n                                 deﬁned  ComponentTypes, nevertheless, can be deﬁned in LEMS and used freely in models, and                 deﬁned  ComponentTypes, nevertheless, can be deﬁned in LEMS and used freely in models, and                 deﬁned  ComponentTypes, nevertheless, can be deﬁned in LEMS and used freely in models, and                 deﬁned  ComponentTypes, nevertheless, can be deﬁned in LEMS and used freely in models, and                 deﬁned  ComponentTypes, nevertheless, can be deﬁned in LEMS and used freely in models, and                 deﬁned  ComponentTypes, nevertheless, can be deﬁned in LEMS and used freely in models, and                 deﬁned  ComponentTypes, nevertheless, can be deﬁned in LEMS and used freely in models, and\n                                 these do not need to be added to the standard before use. The only limitation here is that new user        these do not need to be added to the standard before use. The only limitation here is that new user        these do not need to be added to the standard before use. The only limitation here is that new user        these do not need to be added to the standard before use. The only limitation here is that new user        these do not need to be added to the standard before use. The only limitation here is that new user        these do not need to be added to the standard before use. The only limitation here is that new user        these do not need to be added to the standard before use. The only limitation here is that new user\n                                 deﬁned ComponentTypes cannot be validated against the NeuroML schema since their type deﬁni-               deﬁned ComponentTypes cannot be validated against the NeuroML schema since their type deﬁni-               deﬁned ComponentTypes cannot be validated against the NeuroML schema since their type deﬁni-               deﬁned ComponentTypes cannot be validated against the NeuroML schema since their type deﬁni-               deﬁned ComponentTypes cannot be validated against the NeuroML schema since their type deﬁni-               deﬁned ComponentTypes cannot be validated against the NeuroML schema since their type deﬁni-               deﬁned ComponentTypes cannot be validated against the NeuroML schema since their type deﬁni-\n                                 tions will not be included there.                                                                          tions will not be included there.                                                                          tions will not be included there.                                                                          tions will not be included there.                                                                          tions will not be included there.                                                                          tions will not be included there.                                                                          tions will not be included there.\nigure  13 shows the ComponentType  deﬁnition for the HindmarshRose1984Cell   model\nelement. Here, the HindmarshRose1984Cell  ComponentType extends baseCellMembPotCap\n                                 and inherits its elements. The ComponentType                                                               and inherits its elements. The ComponentType                                                               and inherits its elements. The ComponentType                                                               and inherits its elements. The ComponentType                                                               and inherits its elements. The ComponentType                                                               and inherits its elements. The ComponentType                                                               and inherits its elements. The ComponentType  includes parameters that users must provide when\n                                 creating a new instance (component): a, b, c, d, r, v, x1, v_scaling.                                      creating a new instance (component): a, b, c, d, r, v, x1, v_scaling.                                      creating a new instance (component): a, b, c, d, r, v, x1, v_scaling.                                      creating a new instance (component): a, b, c, d, r, v, x1, v_scaling.                                      creating a new instance (component): a, b, c, d, r, v, x1, v_scaling.                                      creating a new instance (component): a, b, c, d, r, v, x1, v_scaling.                                      creating a new instance (component): a, b, c, d, r, v, x1, v_scaling.\nther parameters, x0, y0, and z0 are used to initialize the three state variables of the model, x, y, z.\n                                 x is the proxy for the membrane potential of the cell used in the original formulation of the model        x is the proxy for the membrane potential of the cell used in the original formulation of the model        x is the proxy for the membrane potential of the cell used in the original formulation of the model        x is the proxy for the membrane potential of the cell used in the original formulation of the model        x is the proxy for the membrane potential of the cell used in the original formulation of the model        x is the proxy for the membrane potential of the cell used in the original formulation of the model        x is the proxy for the membrane potential of the cell used in the original formulation of the model\n                                 (Hindmarsh and Rose, 1984) and is here scaled by a factor  v_scaled to expose a more physiological         (Hindmarsh and Rose, 1984) and is here scaled by a factor  v_scaled to expose a more physiological         (Hindmarsh and Rose, 1984) and is here scaled by a factor  v_scaled to expose a more physiological         (Hindmarsh and Rose, 1984) and is here scaled by a factor  v_scaled to expose a more physiological         (Hindmarsh and Rose, 1984) and is here scaled by a factor  v_scaled to expose a more physiological         (Hindmarsh and Rose, 1984) and is here scaled by a factor  v_scaled to expose a more physiological         (Hindmarsh and Rose, 1984) and is here scaled by a factor  v_scaled to expose a more physiological\nvalue for the membrane potential of the cell in StateVariable  v. A Constant , MSEC, is deﬁned\nto hold the value of    for use in the ComponentType. Next, an Attachment enables the addition\nms\nof entities that would provide external inputs to the ComponentType. Here, synapses are Attach-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ments of the type basePointCurrent and provide synaptic current input to this ComponentType.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   The Dynamics block lists the mathematical formalism required to simulate the ComponentType .\ny default, variables deﬁned in the Dynamics  block are private, i.e., they are not visible outside the\nomponentType. To make these visible to other ComponentTypes   and to allow users to record\nthem, they must be connected to Exposures. Exposures for this ComponentType include the three\nstate variables and also the internal derived variables, which while not used by other components,\nare useful in inspecting the ComponentType  and its dynamics. An extra exposure,  spiking, is added\n                                 to allow other NeuroML components access to the spiking state of the cell that will be determined in       to allow other NeuroML components access to the spiking state of the cell that will be determined in       to allow other NeuroML components access to the spiking state of the cell that will be determined in       to allow other NeuroML components access to the spiking state of the cell that will be determined in       to allow other NeuroML components access to the spiking state of the cell that will be determined in       to allow other NeuroML components access to the spiking state of the cell that will be determined in       to allow other NeuroML components access to the spiking state of the cell that will be determined in\n                                 the Dynamics block.                                                                                        the Dynamics block.                                                                                        the Dynamics block.                                                                                        the Dynamics block.                                                                                        the Dynamics block.                                                                                        the Dynamics block.                                                                                        the Dynamics block.\ntateVariable deﬁnitions are followed by DerivedVariables\nvariables whose values depend\n                                 on other variables but are not time derivatives (which are handled separately in TimeDerivative            on other variables but are not time derivatives (which are handled separately in TimeDerivative            on other variables but are not time derivatives (which are handled separately in TimeDerivative            on other variables but are not time derivatives (which are handled separately in TimeDerivative            on other variables but are not time derivatives (which are handled separately in TimeDerivative            on other variables but are not time derivatives (which are handled separately in TimeDerivative            on other variables but are not time derivatives (which are handled separately in TimeDerivative\nblocks (below)). The total synaptic current, iSyn, is a summation of all the synaptic currents, i received\nby the synapses that may be attached on to this ComponentType. The synapse[*]/i  value of the\nselect ﬁeld tells LEMS to collect all the  i exposures from any synapses  Attachments, and the  add\nvalue of the reduce ﬁeld tells LEMS to sum the multiple values. As noted,  x is a scaled version of the\nmembrane potential variable, v. This is followed by the three derived variables,  phi, chi, rho where:\nphi = y − ax3 + bx2  (1)\nchi = c − dx2 − y  (2)\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLifeof 44","md":"# Tools and resources\n\n# Neuroscience\n\nLEMS (Cannon et al., 2014) is a domain independent general purpose machine-readable language for describing models and their simulations. A complete description of LEMS is provided in Cannon et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here, we limit ourselves to a short summary necessary for understanding the NeuroMLv2 ComponentType definitions.\n\nLEMS allows the definition of new model types called ComponentTypes. These are formal descriptions of how a generic model element of that type behaves (the ‘dynamics’), independent of the specific set of parameters in any instance. To describe the dynamics, such descriptions must list any necessary parameters that are required, as well as the time-varying state variables. The dimensions of these parameters and state variables must be specified, and any expressions involving them must be dimensionally consistent. An instance of such a generic model is termed a Component and can be instantiated from a ComponentType by providing the necessary parameters. One can think of ComponentTypes as user defined data types similar to ‘classes’ in many programming languages and Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS is designed for model simulation, ComponentType definitions also include other simulation-related features such as Exposures, specifying quantities that may be accessed/recorded by users.\n\nFor model elements included in the NeuroML standard, there is a one-to-one mapping between types specified in the NeuroML XSD schema and LEMS ComponentTypes, with the same parameters specified in each. The addition of new model elements to the NeuroML standard, therefore, requires the addition of new type definitions to both the XSD schema and the LEMS definitions. New user defined ComponentTypes, nevertheless, can be defined in LEMS and used freely in models, and these do not need to be added to the standard before use. The only limitation here is that new user defined ComponentTypes cannot be validated against the NeuroML schema since their type definitions will not be included there.\n\nFigure 13 shows the ComponentType definition for the HindmarshRose1984Cell model element. Here, the HindmarshRose1984Cell ComponentType extends baseCellMembPotCap and inherits its elements. The ComponentType includes parameters that users must provide when creating a new instance (component): a, b, c, d, r, v, x1, v_scaling. Other parameters, x0, y0, and z0 are used to initialize the three state variables of the model, x, y, z. x is the proxy for the membrane potential of the cell used in the original formulation of the model (Hindmarsh and Rose, 1984) and is here scaled by a factor v_scaled to expose a more physiological value for the membrane potential of the cell in StateVariable v. A Constant, MSEC, is defined to hold the value of 1 ms for use in the ComponentType. Next, an Attachment enables the addition of entities that would provide external inputs to the ComponentType. Here, synapses are Attachments of the type basePointCurrent and provide synaptic current input to this ComponentType.\n\nThe Dynamics block lists the mathematical formalism required to simulate the ComponentType. By default, variables defined in the Dynamics block are private, i.e., they are not visible outside the ComponentType. To make these visible to other ComponentTypes and to allow users to record them, they must be connected to Exposures. Exposures for this ComponentType include the three state variables and also the internal derived variables, which while not used by other components, are useful in inspecting the ComponentType and its dynamics. An extra exposure, spiking, is added to allow other NeuroML components access to the spiking state of the cell that will be determined in the Dynamics block.\n\nStateVariable definitions are followed by DerivedVariables, variables whose values depend on other variables but are not time derivatives (which are handled separately in TimeDerivative blocks). The total synaptic current, iSyn, is a summation of all the synaptic currents, i received by the synapses that may be attached on to this ComponentType. The synapse[*]/i value of the select field tells LEMS to collect all the i exposures from any synapses Attachments, and the add value of the reduce field tells LEMS to sum the multiple values. As noted, x is a scaled version of the membrane potential variable, v. This is followed by the three derived variables, phi, chi, rho where:\n\n| phi | = | y − ax3 + bx2 |\n| --- | - | ------------- |\n| chi | = | c − dx2 − y   |\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"LEMS (Cannon et al., 2014) is a domain independent general purpose machine-readable language for describing models and their simulations. A complete description of LEMS is provided in Cannon et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here, we limit ourselves to a short summary necessary for understanding the NeuroMLv2 ComponentType definitions.\n\nLEMS allows the definition of new model types called ComponentTypes. These are formal descriptions of how a generic model element of that type behaves (the ‘dynamics’), independent of the specific set of parameters in any instance. To describe the dynamics, such descriptions must list any necessary parameters that are required, as well as the time-varying state variables. The dimensions of these parameters and state variables must be specified, and any expressions involving them must be dimensionally consistent. An instance of such a generic model is termed a Component and can be instantiated from a ComponentType by providing the necessary parameters. One can think of ComponentTypes as user defined data types similar to ‘classes’ in many programming languages and Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS is designed for model simulation, ComponentType definitions also include other simulation-related features such as Exposures, specifying quantities that may be accessed/recorded by users.\n\nFor model elements included in the NeuroML standard, there is a one-to-one mapping between types specified in the NeuroML XSD schema and LEMS ComponentTypes, with the same parameters specified in each. The addition of new model elements to the NeuroML standard, therefore, requires the addition of new type definitions to both the XSD schema and the LEMS definitions. New user defined ComponentTypes, nevertheless, can be defined in LEMS and used freely in models, and these do not need to be added to the standard before use. The only limitation here is that new user defined ComponentTypes cannot be validated against the NeuroML schema since their type definitions will not be included there.\n\nFigure 13 shows the ComponentType definition for the HindmarshRose1984Cell model element. Here, the HindmarshRose1984Cell ComponentType extends baseCellMembPotCap and inherits its elements. The ComponentType includes parameters that users must provide when creating a new instance (component): a, b, c, d, r, v, x1, v_scaling. Other parameters, x0, y0, and z0 are used to initialize the three state variables of the model, x, y, z. x is the proxy for the membrane potential of the cell used in the original formulation of the model (Hindmarsh and Rose, 1984) and is here scaled by a factor v_scaled to expose a more physiological value for the membrane potential of the cell in StateVariable v. A Constant, MSEC, is defined to hold the value of 1 ms for use in the ComponentType. Next, an Attachment enables the addition of entities that would provide external inputs to the ComponentType. Here, synapses are Attachments of the type basePointCurrent and provide synaptic current input to this ComponentType.\n\nThe Dynamics block lists the mathematical formalism required to simulate the ComponentType. By default, variables defined in the Dynamics block are private, i.e., they are not visible outside the ComponentType. To make these visible to other ComponentTypes and to allow users to record them, they must be connected to Exposures. Exposures for this ComponentType include the three state variables and also the internal derived variables, which while not used by other components, are useful in inspecting the ComponentType and its dynamics. An extra exposure, spiking, is added to allow other NeuroML components access to the spiking state of the cell that will be determined in the Dynamics block.\n\nStateVariable definitions are followed by DerivedVariables, variables whose values depend on other variables but are not time derivatives (which are handled separately in TimeDerivative blocks). The total synaptic current, iSyn, is a summation of all the synaptic currents, i received by the synapses that may be attached on to this ComponentType. The synapse[*]/i value of the select field tells LEMS to collect all the i exposures from any synapses Attachments, and the add value of the reduce field tells LEMS to sum the multiple values. As noted, x is a scaled version of the membrane potential variable, v. This is followed by the three derived variables, phi, chi, rho where:","md":"LEMS (Cannon et al., 2014) is a domain independent general purpose machine-readable language for describing models and their simulations. A complete description of LEMS is provided in Cannon et al., 2014 and in our documentation (https://docs.neuroml.org/Userdocs/LEMSSchema.html). Here, we limit ourselves to a short summary necessary for understanding the NeuroMLv2 ComponentType definitions.\n\nLEMS allows the definition of new model types called ComponentTypes. These are formal descriptions of how a generic model element of that type behaves (the ‘dynamics’), independent of the specific set of parameters in any instance. To describe the dynamics, such descriptions must list any necessary parameters that are required, as well as the time-varying state variables. The dimensions of these parameters and state variables must be specified, and any expressions involving them must be dimensionally consistent. An instance of such a generic model is termed a Component and can be instantiated from a ComponentType by providing the necessary parameters. One can think of ComponentTypes as user defined data types similar to ‘classes’ in many programming languages and Components as ‘objects’ of these types with particular sets of parameters. Types in LEMS can also extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS is designed for model simulation, ComponentType definitions also include other simulation-related features such as Exposures, specifying quantities that may be accessed/recorded by users.\n\nFor model elements included in the NeuroML standard, there is a one-to-one mapping between types specified in the NeuroML XSD schema and LEMS ComponentTypes, with the same parameters specified in each. The addition of new model elements to the NeuroML standard, therefore, requires the addition of new type definitions to both the XSD schema and the LEMS definitions. New user defined ComponentTypes, nevertheless, can be defined in LEMS and used freely in models, and these do not need to be added to the standard before use. The only limitation here is that new user defined ComponentTypes cannot be validated against the NeuroML schema since their type definitions will not be included there.\n\nFigure 13 shows the ComponentType definition for the HindmarshRose1984Cell model element. Here, the HindmarshRose1984Cell ComponentType extends baseCellMembPotCap and inherits its elements. The ComponentType includes parameters that users must provide when creating a new instance (component): a, b, c, d, r, v, x1, v_scaling. Other parameters, x0, y0, and z0 are used to initialize the three state variables of the model, x, y, z. x is the proxy for the membrane potential of the cell used in the original formulation of the model (Hindmarsh and Rose, 1984) and is here scaled by a factor v_scaled to expose a more physiological value for the membrane potential of the cell in StateVariable v. A Constant, MSEC, is defined to hold the value of 1 ms for use in the ComponentType. Next, an Attachment enables the addition of entities that would provide external inputs to the ComponentType. Here, synapses are Attachments of the type basePointCurrent and provide synaptic current input to this ComponentType.\n\nThe Dynamics block lists the mathematical formalism required to simulate the ComponentType. By default, variables defined in the Dynamics block are private, i.e., they are not visible outside the ComponentType. To make these visible to other ComponentTypes and to allow users to record them, they must be connected to Exposures. Exposures for this ComponentType include the three state variables and also the internal derived variables, which while not used by other components, are useful in inspecting the ComponentType and its dynamics. An extra exposure, spiking, is added to allow other NeuroML components access to the spiking state of the cell that will be determined in the Dynamics block.\n\nStateVariable definitions are followed by DerivedVariables, variables whose values depend on other variables but are not time derivatives (which are handled separately in TimeDerivative blocks). The total synaptic current, iSyn, is a summation of all the synaptic currents, i received by the synapses that may be attached on to this ComponentType. The synapse[*]/i value of the select field tells LEMS to collect all the i exposures from any synapses Attachments, and the add value of the reduce field tells LEMS to sum the multiple values. As noted, x is a scaled version of the membrane potential variable, v. This is followed by the three derived variables, phi, chi, rho where:","bBox":{"x":168.5,"y":51.8,"w":415.01,"h":614}},{"type":"table","rows":[["phi","=","y − ax3 + bx2"],["chi","=","c − dx2 − y"]],"md":"| phi | = | y − ax3 + bx2 |\n| --- | - | ------------- |\n| chi | = | c − dx2 − y   |","isPerfectTable":true,"csv":"\"phi\",\"=\",\"y − ax3 + bx2\"\n\"chi\",\"=\",\"c − dx2 − y\"","bBox":{"x":168.51,"y":51.8,"w":415,"h":665.54}},{"type":"text","value":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":0,"y":0,"w":612,"h":792}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/Userdocs/LEMSSchema.html","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.296},{"page":32,"text":"             Tools  and  resources                                                                                                                                                                                                                                                                                                                        Neuroscience\n                                                                                                                                            <ComponentType name=\"hindmarshRose1984Cell\" extends=\"baseCellMembPotCap\" description=\"The Ηindmarsh Rose\n                                                                                                                                             model\">\n                                                                                                                                                                                                                                                                                      <Parameter  name=\"a\" dimension=\"none\" description=\"cubic term in x nullcline\"/>\n                                                                                                                                                                                                                                                                                      <Parameter  name=\"b\" dimension=\"none\" description=\"quadratic term in x nullcline\"/>\n                                                                                                                                                                                                                                                                                      <Parameter  name=\"c\" dimension=\"none\" description=\"constant term in y nullcline\"/>\n                                                                                                                                                                                                                                                                                      <Parameter  name=\"d\" dimension=\"none\" description=\"quadratic term in y nullcline\"/>\n                                                                                                                                                                                                                                                                                      <Parameter  name=\"r\" dimension=\"none\" description=\"timescale separation between slow and ƒast subsystem (r\n                                                                                                                                                                                                                                                                                      greater than 0; r much less than 1)\"/>\n                                                                                                                                                                                                                                                                                      <Parameter  name=\"s\" dimension=\"none\" description=\"related to adaptation\"/>\n                                                                                                                                                                                                                                                                                      <Parameter  name=\"x1\" dimension=\"none\" description=\"related to the system s resting potential\"/>\n                                                                                                                                                                                                                                                                                      <Parameter  name=\"v_scaling\" dimension=\"voltage\" description=\"scaling oƒ x ƒor physiological membrane\n                                                                                                                                                                                                                                                                                      potential\"/>\n                                                                                                                                             <!-- Initial Conditions -->\n                                                                                                                                                                                                                                                                                      <Parameter                    name=\"x0\" dimension=\"none\"/>\n                                                                                                                                                                                                                                                                                      <Parameter                    name=\"y0\" dimension=\"none\"/>\n                                                                                                                                                                                                                                                                                      <Parameter                    name=\"z0\" dimension=\"none\"/>\n                                                                                                                                             <Constant name=\"MSΕC\" dimension=\"time\" value=\"1ms\"/>\n                                                                                                                                             <Αttachments name=\"synapses\" type=\"basePointCurrent\"/>\n                                                                                                                                             <Εxposure name=\"x\" dimension=\"none\"/>\n                                                                                                                                             <Εxposure name=\"y\" dimension=\"none\"/>\n                                                                                                                                             <Εxposure name=\"z\" dimension=\"none\"/>\n                                                                                                                                             <Εxposure name=\"phi\" dimension=\"none\"/>\n                                                                                                                                                                                                                                                                                                        <Εxposure name=\"chi\" dimension=\"none\"/>\n                                                                                                                                                                                                                                                                                                        <Εxposure name=\"rho\" dimension=\"none\"/>\n                                                                                                                                             <Εxposure name=\"spiking\" dimension=\"none\"/>\n                                                                                                                                             <Dynamics>\n                                                                                                                                                                                                                                                                                      <StateVariable name=\"v\" dimension=\"voltage\" exposure=\"v\"/>\n                                                                                                                                                                                                                                                                                      <StateVariable name=\"y\" dimension=\"none\" exposure=\"y\"/>\n                                                                                                                                              <StateVariable name=\"z\" dimension=\"none\" exposure=\"z\"/>             <StateVariable name=\"z\" dimension=\"none\" exposure=\"z\"/>             <StateVariable name=\"z\" dimension=\"none\" exposure=\"z\"/>\n                                                                                                                                              <StateVariable name=\"spiking\" dimension=\"none\" exposure=\"spiking\"/> <StateVariable name=\"spiking\" dimension=\"none\" exposure=\"spiking\"/> <StateVariable name=\"spiking\" dimension=\"none\" exposure=\"spiking\"/>\n                                                                                                                                                                                                                                                                                      <DerivedVariable  name=\"iSyn\" dimension=\"current\" exposure=\"iSyn\" select=\"synapses[*]/i\" reduce=\"add\" />\n                                                                                                                                                                                                                                                                                      <DerivedVariable  name=\"x\" dimension=\"none\" exposure=\"x\" value=\"v / v_scaling\"/>\n                                                                                                                                                                                                                                                                                      <DerivedVariable  name=\"phi\" dimension=\"none\" exposure=\"phi\" value=\"y – a * x^3 + b * x^2\"/>\n                                                                                                                                                                                                                                                                                      <DerivedVariable  name=\"chi\" dimension=\"none\" exposure=\"chi\" value=\"c – d * x^2 – y\"/>\n                                                                                                                                                                                                                                                                                      <DerivedVariable  name=\"rho\" dimension=\"none\" exposure=\"rho\" value=\"s * ( x – x1 ) – z\"/>\n                                                                                                                                                                                                                                                                                      <DerivedVariable  name=\"iMemb\" dimension=\"current\" exposure=\"iMemb\"\n                                                                                                                                                                                                                                                                                                        value=\"(C * (v_scaling * (phi – z) / MSΕC)) + iSyn\"/>\n                                                                                                                                                                                                                                                                                      <TimeDerivative variable=\"v\" value=\"iMemb/C\"/>\n                                                                                                                                                                                                                                                                                      <TimeDerivative variable=\"y\" value=\"chi / MSΕC\"/>\n                                                                                                                                                                                                                                                                                      <TimeDerivative variable=\"z\" value=\"r * rho / MSΕC\"/>\n                                                                                                                                                                                                                                                                                      <OnStart>\n                                                                                                                                                                                                                                                                                                  <StateΑssignment  variable=\"v\" value=\"x0 * v_scaling\"/>\n                                                                                                                                                                                                                                                                                                  <StateΑssignment  variable=\"y\" value=\"y0\"/>\n                                                                                                                                                                                                                                                                                                  <StateΑssignment  variable=\"z\" value=\"z0\"/>\n                                                                                                                                              </OnStart>                                                          </OnStart>                                                          </OnStart>\n                                                                                                                                              <OnCondition test=\"v .gt. 0 .and. spiking .lt. 0.5\">                <OnCondition test=\"v .gt. 0 .and. spiking .lt. 0.5\">                <OnCondition test=\"v .gt. 0 .and. spiking .lt. 0.5\">\n                                                                                                                                                                                                                                                                                                  <StateΑssignment  variable=\"spiking\" value=\"1\"/>\n                                                                                                                                                                                                                                                                                      <ΕventOut port=\"spike\"/>\n                                                                                                                                              </OnCondition>                                                      </OnCondition>                                                      </OnCondition>\n                                                                                                                                              <OnCondition test=\"v .lt. 0\">                                       <OnCondition test=\"v .lt. 0\">                                       <OnCondition test=\"v .lt. 0\">\n                                                                                                                                                                                                                                                                                                  <StateΑssignment  variable=\"spiking\" value=\"0\"/>\n                                                                                                                                                                                                                                                                                      </OnCondition>\n                                                                                                                                             </Dynamics>\n                                                                                                                                            </ComponentType>\n                                       Figure 13. LEMS ComponentType definition of the HindmarshRose cell model (Hindmarsh and Rose, 1984,  Figure 13. LEMS ComponentType definition of the HindmarshRose cell model (Hindmarsh and Rose, 1984,\n                                       https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Cells.xml).                        https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Cells.xml).\n                                                                                                                                                                                                                                                                                                                                     rho = s(x − x1) − z   (3)\n                                                                                                                                            The total membrane potential of the cell, iMemb, is calculated as the sum of the capacitive current\n                                       and the synaptic current:                                                                            and the synaptic current:\n                                                                                                                                                                                                                                                                                                                    iMemb = C(v_scaling(phi − z)) + iSyn   (4)\n                                                                                                                                                                                                                                                                                                                    MSEC\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                     32 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n<ComponentType name=\"hindmarshRose1984Cell\" extends=\"baseCellMembPotCap\" description=\"The Ηindmarsh Rose model\">\n<Parameter name=\"a\" dimension=\"none\" description=\"cubic term in x nullcline\"/>\n<Parameter name=\"b\" dimension=\"none\" description=\"quadratic term in x nullcline\"/>\n<Parameter name=\"c\" dimension=\"none\" description=\"constant term in y nullcline\"/>\n<Parameter name=\"d\" dimension=\"none\" description=\"quadratic term in y nullcline\"/>\n<Parameter name=\"r\" dimension=\"none\" description=\"timescale separation between slow and fast subsystem (r greater than 0; r much less than 1)\"/>\n<Parameter name=\"s\" dimension=\"none\" description=\"related to adaptation\"/>\n<Parameter name=\"x1\" dimension=\"none\" description=\"related to the system's resting potential\"/>\n<Parameter name=\"v_scaling\" dimension=\"voltage\" description=\"scaling of x for physiological membrane potential\"/>\n<Parameter name=\"x0\" dimension=\"none\"/>\n<Parameter name=\"y0\" dimension=\"none\"/>\n<Parameter name=\"z0\" dimension=\"none\"/>\n<Constant name=\"MSEC\" dimension=\"time\" value=\"1ms\"/>\n<Attachments name=\"synapses\" type=\"basePointCurrent\"/>\n<Exposure name=\"x\" dimension=\"none\"/>\n<Exposure name=\"y\" dimension=\"none\"/>\n<Exposure name=\"z\" dimension=\"none\"/>\n<Exposure name=\"phi\" dimension=\"none\"/>\n<Exposure name=\"chi\" dimension=\"none\"/>\n<Exposure name=\"rho\" dimension=\"none\"/>\n<Exposure name=\"spiking\" dimension=\"none\"/>\n<Dynamics>\n<StateVariable name=\"v\" dimension=\"voltage\" exposure=\"v\"/>\n<StateVariable name=\"y\" dimension=\"none\" exposure=\"y\"/>\n<StateVariable name=\"z\" dimension=\"none\" exposure=\"z\"/>\n<StateVariable name=\"spiking\" dimension=\"none\" exposure=\"spiking\"/>\n<DerivedVariable name=\"iSyn\" dimension=\"current\" exposure=\"iSyn\" select=\"synapses[*]/i\" reduce=\"add\"/>\n<DerivedVariable name=\"x\" dimension=\"none\" exposure=\"x\" value=\"v / v_scaling\"/>\n<DerivedVariable name=\"phi\" dimension=\"none\" exposure=\"phi\" value=\"y – a * x^3 + b * x^2\"/>\n<DerivedVariable name=\"chi\" dimension=\"none\" exposure=\"chi\" value=\"c – d * x^2 – y\"/>\n<DerivedVariable name=\"rho\" dimension=\"none\" exposure=\"rho\" value=\"s * (x – x1) – z\"/>\n<DerivedVariable name=\"iMemb\" dimension=\"current\" exposure=\"iMemb\" value=\"(C * (v_scaling * (phi – z) / MSEC)) + iSyn\"/>\n<TimeDerivative variable=\"v\" value=\"iMemb/C\"/>\n<TimeDerivative variable=\"y\" value=\"chi / MSEC\"/>\n<TimeDerivative variable=\"z\" value=\"r * rho / MSEC\"/>\n<OnStart>\n<StateAssignment variable=\"v\" value=\"x0 * v_scaling\"/>\n<StateAssignment variable=\"y\" value=\"y0\"/>\n<StateAssignment variable=\"z\" value=\"z0\"/>\n</OnStart>\n<OnCondition test=\"v .gt. 0 .and. spiking .lt. 0.5\">\n<StateAssignment variable=\"spiking\" value=\"1\"/>\n<EventOut port=\"spike\"/>\n</OnCondition>\n<OnCondition test=\"v .lt. 0\">\n<StateAssignment variable=\"spiking\" value=\"0\"/>\n</OnCondition>\n</Dynamics>\n</ComponentType>\nFigure 13. LEMS ComponentType definition of the HindmarshRose cell model (Hindmarsh and Rose, 1984, https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Cells.xml).\n\nrho = s(x − x1) − z   (3)\n\nThe total membrane potential of the cell, iMemb, is calculated as the sum of the capacitive current and the synaptic current:\n\niMemb = C(v_scaling(phi − z)) + iSyn   (4)\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"<ComponentType name=\"hindmarshRose1984Cell\" extends=\"baseCellMembPotCap\" description=\"The Ηindmarsh Rose model\">\n<Parameter name=\"a\" dimension=\"none\" description=\"cubic term in x nullcline\"/>\n<Parameter name=\"b\" dimension=\"none\" description=\"quadratic term in x nullcline\"/>\n<Parameter name=\"c\" dimension=\"none\" description=\"constant term in y nullcline\"/>\n<Parameter name=\"d\" dimension=\"none\" description=\"quadratic term in y nullcline\"/>\n<Parameter name=\"r\" dimension=\"none\" description=\"timescale separation between slow and fast subsystem (r greater than 0; r much less than 1)\"/>\n<Parameter name=\"s\" dimension=\"none\" description=\"related to adaptation\"/>\n<Parameter name=\"x1\" dimension=\"none\" description=\"related to the system's resting potential\"/>\n<Parameter name=\"v_scaling\" dimension=\"voltage\" description=\"scaling of x for physiological membrane potential\"/>\n<Parameter name=\"x0\" dimension=\"none\"/>\n<Parameter name=\"y0\" dimension=\"none\"/>\n<Parameter name=\"z0\" dimension=\"none\"/>\n<Constant name=\"MSEC\" dimension=\"time\" value=\"1ms\"/>\n<Attachments name=\"synapses\" type=\"basePointCurrent\"/>\n<Exposure name=\"x\" dimension=\"none\"/>\n<Exposure name=\"y\" dimension=\"none\"/>\n<Exposure name=\"z\" dimension=\"none\"/>\n<Exposure name=\"phi\" dimension=\"none\"/>\n<Exposure name=\"chi\" dimension=\"none\"/>\n<Exposure name=\"rho\" dimension=\"none\"/>\n<Exposure name=\"spiking\" dimension=\"none\"/>\n<Dynamics>\n<StateVariable name=\"v\" dimension=\"voltage\" exposure=\"v\"/>\n<StateVariable name=\"y\" dimension=\"none\" exposure=\"y\"/>\n<StateVariable name=\"z\" dimension=\"none\" exposure=\"z\"/>\n<StateVariable name=\"spiking\" dimension=\"none\" exposure=\"spiking\"/>\n<DerivedVariable name=\"iSyn\" dimension=\"current\" exposure=\"iSyn\" select=\"synapses[*]/i\" reduce=\"add\"/>\n<DerivedVariable name=\"x\" dimension=\"none\" exposure=\"x\" value=\"v / v_scaling\"/>\n<DerivedVariable name=\"phi\" dimension=\"none\" exposure=\"phi\" value=\"y – a * x^3 + b * x^2\"/>\n<DerivedVariable name=\"chi\" dimension=\"none\" exposure=\"chi\" value=\"c – d * x^2 – y\"/>\n<DerivedVariable name=\"rho\" dimension=\"none\" exposure=\"rho\" value=\"s * (x – x1) – z\"/>\n<DerivedVariable name=\"iMemb\" dimension=\"current\" exposure=\"iMemb\" value=\"(C * (v_scaling * (phi – z) / MSEC)) + iSyn\"/>\n<TimeDerivative variable=\"v\" value=\"iMemb/C\"/>\n<TimeDerivative variable=\"y\" value=\"chi / MSEC\"/>\n<TimeDerivative variable=\"z\" value=\"r * rho / MSEC\"/>\n<OnStart>\n<StateAssignment variable=\"v\" value=\"x0 * v_scaling\"/>\n<StateAssignment variable=\"y\" value=\"y0\"/>\n<StateAssignment variable=\"z\" value=\"z0\"/>\n</OnStart>\n<OnCondition test=\"v .gt. 0 .and. spiking .lt. 0.5\">\n<StateAssignment variable=\"spiking\" value=\"1\"/>\n<EventOut port=\"spike\"/>\n</OnCondition>\n<OnCondition test=\"v .lt. 0\">\n<StateAssignment variable=\"spiking\" value=\"0\"/>\n</OnCondition>\n</Dynamics>\n</ComponentType>\nFigure 13. LEMS ComponentType definition of the HindmarshRose cell model (Hindmarsh and Rose, 1984, https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Cells.xml).\n\nrho = s(x − x1) − z   (3)\n\nThe total membrane potential of the cell, iMemb, is calculated as the sum of the capacitive current and the synaptic current:\n\niMemb = C(v_scaling(phi − z)) + iSyn   (4)\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"<ComponentType name=\"hindmarshRose1984Cell\" extends=\"baseCellMembPotCap\" description=\"The Ηindmarsh Rose model\">\n<Parameter name=\"a\" dimension=\"none\" description=\"cubic term in x nullcline\"/>\n<Parameter name=\"b\" dimension=\"none\" description=\"quadratic term in x nullcline\"/>\n<Parameter name=\"c\" dimension=\"none\" description=\"constant term in y nullcline\"/>\n<Parameter name=\"d\" dimension=\"none\" description=\"quadratic term in y nullcline\"/>\n<Parameter name=\"r\" dimension=\"none\" description=\"timescale separation between slow and fast subsystem (r greater than 0; r much less than 1)\"/>\n<Parameter name=\"s\" dimension=\"none\" description=\"related to adaptation\"/>\n<Parameter name=\"x1\" dimension=\"none\" description=\"related to the system's resting potential\"/>\n<Parameter name=\"v_scaling\" dimension=\"voltage\" description=\"scaling of x for physiological membrane potential\"/>\n<Parameter name=\"x0\" dimension=\"none\"/>\n<Parameter name=\"y0\" dimension=\"none\"/>\n<Parameter name=\"z0\" dimension=\"none\"/>\n<Constant name=\"MSEC\" dimension=\"time\" value=\"1ms\"/>\n<Attachments name=\"synapses\" type=\"basePointCurrent\"/>\n<Exposure name=\"x\" dimension=\"none\"/>\n<Exposure name=\"y\" dimension=\"none\"/>\n<Exposure name=\"z\" dimension=\"none\"/>\n<Exposure name=\"phi\" dimension=\"none\"/>\n<Exposure name=\"chi\" dimension=\"none\"/>\n<Exposure name=\"rho\" dimension=\"none\"/>\n<Exposure name=\"spiking\" dimension=\"none\"/>\n<Dynamics>\n<StateVariable name=\"v\" dimension=\"voltage\" exposure=\"v\"/>\n<StateVariable name=\"y\" dimension=\"none\" exposure=\"y\"/>\n<StateVariable name=\"z\" dimension=\"none\" exposure=\"z\"/>\n<StateVariable name=\"spiking\" dimension=\"none\" exposure=\"spiking\"/>\n<DerivedVariable name=\"iSyn\" dimension=\"current\" exposure=\"iSyn\" select=\"synapses[*]/i\" reduce=\"add\"/>\n<DerivedVariable name=\"x\" dimension=\"none\" exposure=\"x\" value=\"v / v_scaling\"/>\n<DerivedVariable name=\"phi\" dimension=\"none\" exposure=\"phi\" value=\"y – a * x^3 + b * x^2\"/>\n<DerivedVariable name=\"chi\" dimension=\"none\" exposure=\"chi\" value=\"c – d * x^2 – y\"/>\n<DerivedVariable name=\"rho\" dimension=\"none\" exposure=\"rho\" value=\"s * (x – x1) – z\"/>\n<DerivedVariable name=\"iMemb\" dimension=\"current\" exposure=\"iMemb\" value=\"(C * (v_scaling * (phi – z) / MSEC)) + iSyn\"/>\n<TimeDerivative variable=\"v\" value=\"iMemb/C\"/>\n<TimeDerivative variable=\"y\" value=\"chi / MSEC\"/>\n<TimeDerivative variable=\"z\" value=\"r * rho / MSEC\"/>\n<OnStart>\n<StateAssignment variable=\"v\" value=\"x0 * v_scaling\"/>\n<StateAssignment variable=\"y\" value=\"y0\"/>\n<StateAssignment variable=\"z\" value=\"z0\"/>\n</OnStart>\n<OnCondition test=\"v .gt. 0 .and. spiking .lt. 0.5\">\n<StateAssignment variable=\"spiking\" value=\"1\"/>\n<EventOut port=\"spike\"/>\n</OnCondition>\n<OnCondition test=\"v .lt. 0\">\n<StateAssignment variable=\"spiking\" value=\"0\"/>\n</OnCondition>\n</Dynamics>\n</ComponentType>\nFigure 13. LEMS ComponentType definition of the HindmarshRose cell model (Hindmarsh and Rose, 1984, https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Cells.xml).\n\nrho = s(x − x1) − z   (3)\n\nThe total membrane potential of the cell, iMemb, is calculated as the sum of the capacitive current and the synaptic current:\n\niMemb = C(v_scaling(phi − z)) + iSyn   (4)\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.52,"y":58.89,"w":408.79,"h":660.5}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Cells.xml","text":"https://github.com/NeuroML/NeuroML2/blob/master/NeuroML2CoreTypes/Cells.xml)."}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.471},{"page":33,"text":"           Tools  and  resources                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Neuroscience\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             v, y, z are TimeDerivatives, with the ‘value’ representing the rate of change of each variable:\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               dv/dt = iMemb/C\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (5)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              dy/dt = chi/MSEC                 (6)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           dz/dt = (r × rho)/MSEC              (7)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             The ﬁnal few blocks set the initial state of the component (OnStart),\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          v = x0 × v_scaling   (8)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   y = y0                      (9)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   z = z0\nn                                 and deﬁne conditional expressions to set the spiking state of the cell:                                    and deﬁne conditional expressions to set the spiking state of the cell:                                    and deﬁne conditional expressions to set the spiking state of the cell:                                    and deﬁne conditional expressions to set the spiking state of the cell:                                    and deﬁne conditional expressions to set the spiking state of the cell:\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ⎧\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ⎪\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             spiking = ⎨1  if (v > 0) ∧ (spiking < 0.5)        (11)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ⎪\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ⎩0          if (v < 0)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Both the XSD schema and the LEMS ComponentType   deﬁnitions enable model validation.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             However, despite some overlap, they support different types of validation. Whereas the XSD schema\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             allows for the validation of model descriptions (e.g. the XML ﬁles), the LEMS ComponentType deﬁni-\n                                 tions enable validation of model instances, i.e., the ‘runnable’ instances of models that are constructed  tions enable validation of model instances, i.e., the ‘runnable’ instances of models that are constructed  tions enable validation of model instances, i.e., the ‘runnable’ instances of models that are constructed  tions enable validation of model instances, i.e., the ‘runnable’ instances of models that are constructed  tions enable validation of model instances, i.e., the ‘runnable’ instances of models that are constructed\n                                 once components have been created by instantiating ComponentTypes with the necessary parame-               once components have been created by instantiating ComponentTypes with the necessary parame-               once components have been created by instantiating ComponentTypes with the necessary parame-               once components have been created by instantiating ComponentTypes with the necessary parame-               once components have been created by instantiating ComponentTypes with the necessary parame-\n                                 ters, and various attachments created between source and target components. A model description            ters, and various attachments created between source and target components. A model description            ters, and various attachments created between source and target components. A model description            ters, and various attachments created between source and target components. A model description            ters, and various attachments created between source and target components. A model description\n                                 may be used to create many different model instances for simulation. Indeed, it is common practice to      may be used to create many different model instances for simulation. Indeed, it is common practice to      may be used to create many different model instances for simulation. Indeed, it is common practice to      may be used to create many different model instances for simulation. Indeed, it is common practice to      may be used to create many different model instances for simulation. Indeed, it is common practice to\n                                 run models that include stochasticity with different seeds for random number generators to verify the      run models that include stochasticity with different seeds for random number generators to verify the      run models that include stochasticity with different seeds for random number generators to verify the      run models that include stochasticity with different seeds for random number generators to verify the      run models that include stochasticity with different seeds for random number generators to verify the\n                                 robustness of simulation results. Thus, the validation of dimensions and units that LEMS carries out is    robustness of simulation results. Thus, the validation of dimensions and units that LEMS carries out is    robustness of simulation results. Thus, the validation of dimensions and units that LEMS carries out is    robustness of simulation results. Thus, the validation of dimensions and units that LEMS carries out is    robustness of simulation results. Thus, the validation of dimensions and units that LEMS carries out is\n                                 done only after a runnable instance of a model has been created.                                           done only after a runnable instance of a model has been created.                                           done only after a runnable instance of a model has been created.                                           done only after a runnable instance of a model has been created.                                           done only after a runnable instance of a model has been created.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             The LEMS ComponentType deﬁnitions for NeuroMLv2 are also maintained as versioned ﬁles that\n                                 are updated along with the XSD schema. These can also be seen in the NeuroMLv2 GitHub repos-               are updated along with the XSD schema. These can also be seen in the NeuroMLv2 GitHub repos-               are updated along with the XSD schema. These can also be seen in the NeuroMLv2 GitHub repos-               are updated along with the XSD schema. These can also be seen in the NeuroMLv2 GitHub repos-               are updated along with the XSD schema. These can also be seen in the NeuroMLv2 GitHub repos-\n                                 itory (https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes). An index of the                 itory (https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes). An index of the                 itory (https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes). An index of the                 itory (https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes). An index of the                 itory (https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes). An index of the\n                                 ComponentTypes included in version 2.3 of the NeuroML standard, with links to online documenta-            ComponentTypes included in version 2.3 of the NeuroML standard, with links to online documenta-            ComponentTypes included in version 2.3 of the NeuroML standard, with links to online documenta-            ComponentTypes included in version 2.3 of the NeuroML standard, with links to online documenta-            ComponentTypes included in version 2.3 of the NeuroML standard, with links to online documenta-\n                                 tion, is also provided in Tables 1 and 2.                                                                  tion, is also provided in Tables 1 and 2.                                                                  tion, is also provided in Tables 1 and 2.                                                                  tion, is also provided in Tables 1 and 2.                                                                  tion, is also provided in Tables 1 and 2.\n                                 NeuroML APIs                                                                                               NeuroML APIs                                                                                               NeuroML APIs                                                                                               NeuroML APIs                                                                                               NeuroML APIs\n                                 The NeuroMLv2 software stack relies on the NeuroML APIs that provide functionality to read, write,         The NeuroMLv2 software stack relies on the NeuroML APIs that provide functionality to read, write,         The NeuroMLv2 software stack relies on the NeuroML APIs that provide functionality to read, write,         The NeuroMLv2 software stack relies on the NeuroML APIs that provide functionality to read, write,         The NeuroMLv2 software stack relies on the NeuroML APIs that provide functionality to read, write,\n                                 validate, and inspect NeuroML models. The APIs are programmatically generated from the machine             validate, and inspect NeuroML models. The APIs are programmatically generated from the machine             validate, and inspect NeuroML models. The APIs are programmatically generated from the machine             validate, and inspect NeuroML models. The APIs are programmatically generated from the machine             validate, and inspect NeuroML models. The APIs are programmatically generated from the machine\n                                 readable XSD schema, thus ensuring that the class for deﬁning a speciﬁc NeuroML element in a given         readable XSD schema, thus ensuring that the class for deﬁning a speciﬁc NeuroML element in a given         readable XSD schema, thus ensuring that the class for deﬁning a speciﬁc NeuroML element in a given         readable XSD schema, thus ensuring that the class for deﬁning a speciﬁc NeuroML element in a given         readable XSD schema, thus ensuring that the class for deﬁning a speciﬁc NeuroML element in a given\n                                 language (e.g. Java) has the correct set of ﬁelds with the appropriate type (e.g. ﬂoat or string) corre-   language (e.g. Java) has the correct set of ﬁelds with the appropriate type (e.g. ﬂoat or string) corre-   language (e.g. Java) has the correct set of ﬁelds with the appropriate type (e.g. ﬂoat or string) corre-   language (e.g. Java) has the correct set of ﬁelds with the appropriate type (e.g. ﬂoat or string) corre-   language (e.g. Java) has the correct set of ﬁelds with the appropriate type (e.g. ﬂoat or string) corre-\n                                 sponding to the allowed parameters in the corresponding NeuroML element. NeuroMLv2 currently               sponding to the allowed parameters in the corresponding NeuroML element. NeuroMLv2 currently               sponding to the allowed parameters in the corresponding NeuroML element. NeuroMLv2 currently               sponding to the allowed parameters in the corresponding NeuroML element. NeuroMLv2 currently               sponding to the allowed parameters in the corresponding NeuroML element. NeuroMLv2 currently\n                                 provides APIs in numerous languages—Python (libNeuroML which is generated via generateDS                   provides APIs in numerous languages—Python (libNeuroML which is generated via generateDS                   provides APIs in numerous languages—Python (libNeuroML which is generated via generateDS                   provides APIs in numerous languages—Python (libNeuroML which is generated via generateDS                   provides APIs in numerous languages—Python (libNeuroML which is generated via generateDS\n                                 (http://www.davekuhlman.org/generateDS.html)), Java ( org.neuroml.                                         (http://www.davekuhlman.org/generateDS.html)), Java ( org.neuroml.                                         (http://www.davekuhlman.org/generateDS.html)), Java ( org.neuroml.                                         (http://www.davekuhlman.org/generateDS.html)), Java ( org.neuroml.                                         (http://www.davekuhlman.org/generateDS.html)), Java ( org.neuroml.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           model via JAXB XJC (https://\n                                 javaee.github.io/jaxb-v2/)), C++ (NeuroML_CPP via XSD (https://www.codesynthesis.com/products/             javaee.github.io/jaxb-v2/)), C++ (NeuroML_CPP via XSD (https://www.codesynthesis.com/products/             javaee.github.io/jaxb-v2/)), C++ (NeuroML_CPP via XSD (https://www.codesynthesis.com/products/             javaee.github.io/jaxb-v2/)), C++ (NeuroML_CPP via XSD (https://www.codesynthesis.com/products/             javaee.github.io/jaxb-v2/)), C++ (NeuroML_CPP via XSD (https://www.codesynthesis.com/products/\n                                 xsd/)) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for                   xsd/)) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for                   xsd/)) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for                   xsd/)) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for                   xsd/)) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for\n                                 other languages can also be easily generated as required. LEMS is also supported by a similar set of       other languages can also be easily generated as required. LEMS is also supported by a similar set of       other languages can also be easily generated as required. LEMS is also supported by a similar set of       other languages can also be easily generated as required. LEMS is also supported by a similar set of       other languages can also be easily generated as required. LEMS is also supported by a similar set of\n                                 APIs—PyLEMS in Python, and jLEMS in Java—and since a NeuroMLv2 model description is a set of               APIs—PyLEMS in Python, and jLEMS in Java—and since a NeuroMLv2 model description is a set of               APIs—PyLEMS in Python, and jLEMS in Java—and since a NeuroMLv2 model description is a set of               APIs—PyLEMS in Python, and jLEMS in Java—and since a NeuroMLv2 model description is a set of               APIs—PyLEMS in Python, and jLEMS in Java—and since a NeuroMLv2 model description is a set of\n                                 LEMS Components, the LEMS APIs also support them (e.g. the hindmarshRose1984 Cell example                  LEMS Components, the LEMS APIs also support them (e.g. the hindmarshRose1984 Cell example                  LEMS Components, the LEMS APIs also support them (e.g. the hindmarshRose1984 Cell example                  LEMS Components, the LEMS APIs also support them (e.g. the hindmarshRose1984 Cell example                  LEMS Components, the LEMS APIs also support them (e.g. the hindmarshRose1984 Cell example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             in Figure 11 could be loaded by jLEMS and treated as a LEMS Component).\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Figure 14 shows the use of the NeuroML Python API to describe a model with one HindmarshRose\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             cell. In Python, the instances of ComponentTypes , their Components , are represented as Python\n                                 objects. The hr0 Python variable stores the created HindmarshRose1984                                      objects. The hr0 Python variable stores the created HindmarshRose1984                                      objects. The hr0 Python variable stores the created HindmarshRose1984                                      objects. The hr0 Python variable stores the created HindmarshRose1984                                      objects. The hr0 Python variable stores the created HindmarshRose1984 Cell component/object.\n                                 This is added to a Population pop0 in the Network net. The network also includes a PulseGen                This is added to a Population pop0 in the Network net. The network also includes a PulseGen                This is added to a Population pop0 in the Network net. The network also includes a PulseGen                This is added to a Population pop0 in the Network net. The network also includes a PulseGen                This is added to a Population pop0 in the Network net. The network also includes a PulseGen\nn                                 erator with amplitude 5 nA as an ExplicitInput                                                             erator with amplitude 5 nA as an ExplicitInput                                                             erator with amplitude 5 nA as an ExplicitInput                                                             erator with amplitude 5 nA as an ExplicitInput                                                             erator with amplitude 5 nA as an ExplicitInput\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            that is targeted at the cell in the population. The\n                                 model description is serialized to XML (Figure 11) and validated. Note that as the standard conven-        model description is serialized to XML (Figure 11) and validated. Note that as the standard conven-        model description is serialized to XML (Figure 11) and validated. Note that as the standard conven-        model description is serialized to XML (Figure 11) and validated. Note that as the standard conven-        model description is serialized to XML (Figure 11) and validated. Note that as the standard conven-\n                                 tion for classes in Python is to use capitalized names, HindmarshRose1984Cell                              tion for classes in Python is to use capitalized names, HindmarshRose1984Cell                              tion for classes in Python is to use capitalized names, HindmarshRose1984Cell                              tion for classes in Python is to use capitalized names, HindmarshRose1984Cell                              tion for classes in Python is to use capitalized names, HindmarshRose1984Cell  is used in Python\n                                 but is serialized as <hindmarshRose1984Cell>in the XML. Users can either share the Python script           but is serialized as <hindmarshRose1984Cell>in the XML. Users can either share the Python script           but is serialized as <hindmarshRose1984Cell>in the XML. Users can either share the Python script           but is serialized as <hindmarshRose1984Cell>in the XML. Users can either share the Python script           but is serialized as <hindmarshRose1984Cell>in the XML. Users can either share the Python script\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                                                                                                                                                                                         33 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nv, y, z are Time Derivatives, with the ‘value’ representing the rate of change of each variable:\n\ndv/dt = iMemb/C (5)\n\ndy/dt = chi/MSEC (6)\n\ndz/dt = (r × rho)/MSEC (7)\n\nThe final few blocks set the initial state of the component (OnStart),\n\nv = x0 × v_scaling (8)\n\ny = y0 (9)\n\nz = z0 (10)\n\nand define conditional expressions to set the spiking state of the cell:\n\nspiking = { 1 if (v > 0) ∧ (spiking < 0.5) 0 if (v < 0) } (11)\n\nBoth the XSD schema and the LEMS ComponentType definitions enable model validation. However, despite some overlap, they support different types of validation. Whereas the XSD schema allows for the validation of model descriptions (e.g. the XML files), the LEMS ComponentType definitions enable validation of model instances, i.e., the ‘runnable’ instances of models that are constructed once components have been created by instantiating ComponentTypes with the necessary parameters, and various attachments created between source and target components. A model description may be used to create many different model instances for simulation. Indeed, it is common practice to run models that include stochasticity with different seeds for random number generators to verify the robustness of simulation results. Thus, the validation of dimensions and units that LEMS carries out is done only after a runnable instance of a model has been created.\n\nThe LEMS ComponentType definitions for NeuroMLv2 are also maintained as versioned files that are updated along with the XSD schema. These can also be seen in the NeuroMLv2 GitHub repository (https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes). An index of the ComponentTypes included in version 2.3 of the NeuroML standard, with links to online documentation, is also provided in Tables 1 and 2.\n\n# NeuroML APIs\n\nThe NeuroMLv2 software stack relies on the NeuroML APIs that provide functionality to read, write, validate, and inspect NeuroML models. The APIs are programmatically generated from the machine readable XSD schema, thus ensuring that the class for defining a specific NeuroML element in a given language (e.g. Java) has the correct set of fields with the appropriate type (e.g. float or string) corresponding to the allowed parameters in the corresponding NeuroML element. NeuroMLv2 currently provides APIs in numerous languages—Python (libNeuroML which is generated via generateDS), Java (org.neuroml model via JAXB XJC https://javaee.github.io/jaxb-v2/), C++ (NeuroML_CPP via XSD https://www.codesynthesis.com/products/xsd/) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for other languages can also be easily generated as required. LEMS is also supported by a similar set of APIs—PyLEMS in Python, and jLEMS in Java—and since a NeuroMLv2 model description is a set of LEMS Components, the LEMS APIs also support them (e.g. the hindmarshRose1984 Cell example in Figure 11 could be loaded by jLEMS and treated as a LEMS Component).\n\nFigure 14 shows the use of the NeuroML Python API to describe a model with one HindmarshRose cell. In Python, the instances of ComponentTypes, their Components, are represented as Python objects. The hr0 Python variable stores the created HindmarshRose1984 Cell component/object. This is added to a Population pop0 in the Network net. The network also includes a PulseGenerator with amplitude 5 nA as an ExplicitInput that is targeted at the cell in the population. The model description is serialized to XML (Figure 11) and validated. Note that as the standard convention for classes in Python is to use capitalized names, HindmarshRose1984Cell is used in Python but is serialized as #  in the XML. Users can either share the Python script.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"v, y, z are Time Derivatives, with the ‘value’ representing the rate of change of each variable:\n\ndv/dt = iMemb/C (5)\n\ndy/dt = chi/MSEC (6)\n\ndz/dt = (r × rho)/MSEC (7)\n\nThe final few blocks set the initial state of the component (OnStart),\n\nv = x0 × v_scaling (8)\n\ny = y0 (9)\n\nz = z0 (10)\n\nand define conditional expressions to set the spiking state of the cell:\n\nspiking = { 1 if (v > 0) ∧ (spiking < 0.5) 0 if (v < 0) } (11)\n\nBoth the XSD schema and the LEMS ComponentType definitions enable model validation. However, despite some overlap, they support different types of validation. Whereas the XSD schema allows for the validation of model descriptions (e.g. the XML files), the LEMS ComponentType definitions enable validation of model instances, i.e., the ‘runnable’ instances of models that are constructed once components have been created by instantiating ComponentTypes with the necessary parameters, and various attachments created between source and target components. A model description may be used to create many different model instances for simulation. Indeed, it is common practice to run models that include stochasticity with different seeds for random number generators to verify the robustness of simulation results. Thus, the validation of dimensions and units that LEMS carries out is done only after a runnable instance of a model has been created.\n\nThe LEMS ComponentType definitions for NeuroMLv2 are also maintained as versioned files that are updated along with the XSD schema. These can also be seen in the NeuroMLv2 GitHub repository (https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes). An index of the ComponentTypes included in version 2.3 of the NeuroML standard, with links to online documentation, is also provided in Tables 1 and 2.","md":"v, y, z are Time Derivatives, with the ‘value’ representing the rate of change of each variable:\n\ndv/dt = iMemb/C (5)\n\ndy/dt = chi/MSEC (6)\n\ndz/dt = (r × rho)/MSEC (7)\n\nThe final few blocks set the initial state of the component (OnStart),\n\nv = x0 × v_scaling (8)\n\ny = y0 (9)\n\nz = z0 (10)\n\nand define conditional expressions to set the spiking state of the cell:\n\nspiking = { 1 if (v > 0) ∧ (spiking < 0.5) 0 if (v < 0) } (11)\n\nBoth the XSD schema and the LEMS ComponentType definitions enable model validation. However, despite some overlap, they support different types of validation. Whereas the XSD schema allows for the validation of model descriptions (e.g. the XML files), the LEMS ComponentType definitions enable validation of model instances, i.e., the ‘runnable’ instances of models that are constructed once components have been created by instantiating ComponentTypes with the necessary parameters, and various attachments created between source and target components. A model description may be used to create many different model instances for simulation. Indeed, it is common practice to run models that include stochasticity with different seeds for random number generators to verify the robustness of simulation results. Thus, the validation of dimensions and units that LEMS carries out is done only after a runnable instance of a model has been created.\n\nThe LEMS ComponentType definitions for NeuroMLv2 are also maintained as versioned files that are updated along with the XSD schema. These can also be seen in the NeuroMLv2 GitHub repository (https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes). An index of the ComponentTypes included in version 2.3 of the NeuroML standard, with links to online documentation, is also provided in Tables 1 and 2.","bBox":{"x":168.53,"y":51.81,"w":416.42,"h":365.61}},{"type":"heading","lvl":1,"value":"NeuroML APIs","md":"# NeuroML APIs","bBox":{"x":168.53,"y":454.31,"w":82,"h":12}},{"type":"text","value":"The NeuroMLv2 software stack relies on the NeuroML APIs that provide functionality to read, write, validate, and inspect NeuroML models. The APIs are programmatically generated from the machine readable XSD schema, thus ensuring that the class for defining a specific NeuroML element in a given language (e.g. Java) has the correct set of fields with the appropriate type (e.g. float or string) corresponding to the allowed parameters in the corresponding NeuroML element. NeuroMLv2 currently provides APIs in numerous languages—Python (libNeuroML which is generated via generateDS), Java (org.neuroml model via JAXB XJC https://javaee.github.io/jaxb-v2/), C++ (NeuroML_CPP via XSD https://www.codesynthesis.com/products/xsd/) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for other languages can also be easily generated as required. LEMS is also supported by a similar set of APIs—PyLEMS in Python, and jLEMS in Java—and since a NeuroMLv2 model description is a set of LEMS Components, the LEMS APIs also support them (e.g. the hindmarshRose1984 Cell example in Figure 11 could be loaded by jLEMS and treated as a LEMS Component).\n\nFigure 14 shows the use of the NeuroML Python API to describe a model with one HindmarshRose cell. In Python, the instances of ComponentTypes, their Components, are represented as Python objects. The hr0 Python variable stores the created HindmarshRose1984 Cell component/object. This is added to a Population pop0 in the Network net. The network also includes a PulseGenerator with amplitude 5 nA as an ExplicitInput that is targeted at the cell in the population. The model description is serialized to XML (Figure 11) and validated. Note that as the standard convention for classes in Python is to use capitalized names, HindmarshRose1984Cell is used in Python but is serialized as #  in the XML. Users can either share the Python script.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"The NeuroMLv2 software stack relies on the NeuroML APIs that provide functionality to read, write, validate, and inspect NeuroML models. The APIs are programmatically generated from the machine readable XSD schema, thus ensuring that the class for defining a specific NeuroML element in a given language (e.g. Java) has the correct set of fields with the appropriate type (e.g. float or string) corresponding to the allowed parameters in the corresponding NeuroML element. NeuroMLv2 currently provides APIs in numerous languages—Python (libNeuroML which is generated via generateDS), Java (org.neuroml model via JAXB XJC https://javaee.github.io/jaxb-v2/), C++ (NeuroML_CPP via XSD https://www.codesynthesis.com/products/xsd/) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for other languages can also be easily generated as required. LEMS is also supported by a similar set of APIs—PyLEMS in Python, and jLEMS in Java—and since a NeuroMLv2 model description is a set of LEMS Components, the LEMS APIs also support them (e.g. the hindmarshRose1984 Cell example in Figure 11 could be loaded by jLEMS and treated as a LEMS Component).\n\nFigure 14 shows the use of the NeuroML Python API to describe a model with one HindmarshRose cell. In Python, the instances of ComponentTypes, their Components, are represented as Python objects. The hr0 Python variable stores the created HindmarshRose1984 Cell component/object. This is added to a Population pop0 in the Network net. The network also includes a PulseGenerator with amplitude 5 nA as an ExplicitInput that is targeted at the cell in the population. The model description is serialized to XML (Figure 11) and validated. Note that as the standard convention for classes in Python is to use capitalized names, HindmarshRose1984Cell is used in Python but is serialized as #  in the XML. Users can either share the Python script.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":454.31,"w":411.6,"h":252.94}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes","text":""},{"url":"http://www.davekuhlman.org/generateDS.html","text":""},{"url":"https://javaee.github.io/jaxb-v2/","text":" "},{"url":"https://javaee.github.io/jaxb-v2/","text":"javaee.github.io/jaxb-v2/)), C++ (NeuroML_CPP via XSD (https://www.codesynthesis.com/products/"},{"url":"https://www.codesynthesis.com/products/xsd/","text":" "},{"url":"https://www.codesynthesis.com/products/xsd/","text":"xsd/)) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for "}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.26},{"page":34,"text":"           Tools  and  resources                                                                                                                                                                                                                                Neuroscience\n                                                                                                                                                                                                                                                               Create a new HindmarshRose cell component with parameters for regular spiking\n                                                                                                                                                                                                                                                               nml_doc = component_ƒactory(\"NeuroMLDocument\", id=\"ΗindmarshRoseNeuron\")\n                                                                                                                                                                                                                                                               hr0 = nml_doc.add(\"ΗindmarshRose1984Cell\", id=\"hr_regular\", a=\"1.0\", b=\"3.0\", c=\"-3.0\", d=\"5.0\",\n                                                                                                                                                                                                                                                                s=\"4.0\", x1=\"-1.3\", r=\"0.002\", x0=\"-1.1\", y0=\"-9\", z0=\"1.0\", C=\"28.57142857pF\",\n                                                                                                                                                                                                                                                                v_scaling=\"35.0mV\")\n                                                                                                                                                                                                                                                               net = nml_doc.add(\"Network\", id=\"ΗRNet\", validate=False)\n                                                                                                                                                                                                                                                               Create a population of cells (1 cell)\n                                                                                                                                                                                                                                                               pop0 = net.add(\"Population\", id=\"ΗRPop0\", component=hr0.id, size=1)\n                                                                                                                                                                                                                                                               Add external stimuli to the population\n                                                                                                                                                                                                                                                               pg = nml_doc.add(\"PulseGenerator\", id=\"pulseGen_%i\" % 0, delay=\"0s\", duration=\"1000s\",\n                                                                                                                                                                                                                                                                amplitude=\"5nΑ\")\n                                                                                                                                                                                                                                                               exp_input = net.add(\"ΕxplicitΙnput\", target=\"%s[%i]\" % (pop0.id, 0), input=pg.id,\n                                                                                                                                                                                                                                                                destination=\"synapses\")\n                                                                                                                                                                                                                                                               Save (serialize) the model to a ﬁle\n                                                                                                                                                                                                                                                               nml_ƒile =  hindmarshrose1984_single_cell_network.nml\n                                                                                                                                                                                                                                                               writers.NeuroMLWriter.write(nml_doc, nml_ƒile)\n                                                                                                                                                                                                                                                               Validate the model\n                                                                                                                                                                                                                                                               validate_neuroml2(nml_ƒile)\n                                Figure 14. Example model description of a HindmarshRose1984Cell NeuroML component in Python using              Figure 14. Example model description of a HindmarshRose1984Cell NeuroML component in Python using              Figure 14. Example model description of a HindmarshRose1984Cell NeuroML component in Python using\n                                parameters for regular bursting. This script generates the XML in Figure 11. The code used in this example is  parameters for regular bursting. This script generates the XML in Figure 11. The code used in this example is  parameters for regular bursting. This script generates the XML in Figure 11. The code used in this example is\n                                available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.            available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.            available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n                                itself or share the XML serialization. Any valid XML serialization can be also loaded into a Python            itself or share the XML serialization. Any valid XML serialization can be also loaded into a Python            itself or share the XML serialization. Any valid XML serialization can be also loaded into a Python\n                                object model and modiﬁed.                                                                                      object model and modiﬁed.                                                                                      object model and modiﬁed.\n                                                                                                                                                                                                                                                                XML is the default serialization of NeuroML and all existing APIs can read and write the format (and\n                                it should be seen as a minimal requirement for new APIs to support XML). There is, however, an alter           it should be seen as a minimal requirement for new APIs to support XML). There is, however, an alter           it should be seen as a minimal requirement for new APIs to support XML). There is, however, an alter\n                                                                                                                                                                                                                                                                -\n                                native HDF5 (https://www.hdfgroup.org/solutions/hdf5) based serialization of NeuroML ﬁles which is             native HDF5 (https://www.hdfgroup.org/solutions/hdf5) based serialization of NeuroML ﬁles which is             native HDF5 (https://www.hdfgroup.org/solutions/hdf5) based serialization of NeuroML ﬁles which is\n                                supported by both libNeuroML and the Java API,                                                                 supported by both libNeuroML and the Java API,                                                                 supported by both libNeuroML and the Java API,\n                                                                                                                                                                                                                                                                org.\n                                                                                                                                                                                                                                                                neuroml.\n                                                                                                                                                                                                                                                                model (https://docs.neuroml.org/User-\n                                docs/HDF5.html). This format is based on an efﬁcient representation of cell positions and connectivity         docs/HDF5.html). This format is based on an efﬁcient representation of cell positions and connectivity         docs/HDF5.html). This format is based on an efﬁcient representation of cell positions and connectivity\n                                data as HDF5 data sets which can be serialized in compact binary format and loaded into memory                 data as HDF5 data sets which can be serialized in compact binary format and loaded into memory                 data as HDF5 data sets which can be serialized in compact binary format and loaded into memory\n                                for optimized access (e.g. as numpy arrays in libNeuroML). This reduces the size of the saved ﬁles for         for optimized access (e.g. as numpy arrays in libNeuroML). This reduces the size of the saved ﬁles for         for optimized access (e.g. as numpy arrays in libNeuroML). This reduces the size of the saved ﬁles for\n                                large-                                                                                                         large-                                                                                                         large-\n                                                                                                                                                                                                                                                                scale networks and speeds up loading/writing models eliminating the need to parse/generate\n                                large text ﬁles containing XML. Models serialized in this format can be loaded and transformed to              large text ﬁles containing XML. Models serialized in this format can be loaded and transformed to              large text ﬁles containing XML. Models serialized in this format can be loaded and transformed to\n                                simulator code in the same way as XML-based models by the Java and Python APIs.                                simulator code in the same way as XML-based models by the Java and Python APIs.                                simulator code in the same way as XML-based models by the Java and Python APIs.\n                                Simulating NeuroML models                                                                                      Simulating NeuroML models                                                                                      Simulating NeuroML models\n                                The model description shown in Figure 11 contains no information about how it is to be simulated,              The model description shown in Figure 11 contains no information about how it is to be simulated,              The model description shown in Figure 11 contains no information about how it is to be simulated,\n                                or on the dynamics of each model component. Providing this simulation information and linking in               or on the dynamics of each model component. Providing this simulation information and linking in               or on the dynamics of each model component. Providing this simulation information and linking in\n                                the ComponentType deﬁnition requires creating a LEMS ﬁle to fully specify the simulation. Figure 15            the ComponentType deﬁnition requires creating a LEMS ﬁle to fully specify the simulation. Figure 15            the ComponentType deﬁnition requires creating a LEMS ﬁle to fully specify the simulation. Figure 15\n                                shows the use of utilities included in the Python pyNeuroML package to describe a LEMS simulation              shows the use of utilities included in the Python pyNeuroML package to describe a LEMS simulation              shows the use of utilities included in the Python pyNeuroML package to describe a LEMS simulation\n                                of the HindmarshRose model deﬁned in Figure 11. The LEMSSimulation                                             of the HindmarshRose model deﬁned in Figure 11. The LEMSSimulation                                             of the HindmarshRose model deﬁned in Figure 11. The LEMSSimulation\n                                                                                                                                                                                                                                                                 object includes simulation\n                                speciﬁc information such as the duration of the simulation, the integration time step, and the seed            speciﬁc information such as the duration of the simulation, the integration time step, and the seed            speciﬁc information such as the duration of the simulation, the integration time step, and the seed\n                                value. It also allows the speciﬁcation of ﬁles for the storage of data recorded from the simulation. In        value. It also allows the speciﬁcation of ﬁles for the storage of data recorded from the simulation. In        value. It also allows the speciﬁcation of ﬁles for the storage of data recorded from the simulation. In\n                                this example, we record the membrane potential, v, of our cell in its population, HRPop0[0]. Similar           this example, we record the membrane potential, v, of our cell in its population, HRPop0[0]. Similar           this example, we record the membrane potential, v, of our cell in its population, HRPop0[0]. Similar\n                                to the NeuroMLv2 model description, the simulation object can also be serialized to XML for storage            to the NeuroMLv2 model description, the simulation object can also be serialized to XML for storage            to the NeuroMLv2 model description, the simulation object can also be serialized to XML for storage\n                                and sharing (Figure 15, bottom).                                                                               and sharing (Figure 15, bottom).                                                                               and sharing (Figure 15, bottom).\n                                                                                                                                                                                                                                                                As noted previously, NeuroML/LEMS model and simulation descriptions are machine readable and\n                                simulator independent and can be simulated by simulation engines using a multitude of strategies               simulator independent and can be simulated by simulation engines using a multitude of strategies               simulator independent and can be simulated by simulation engines using a multitude of strategies\n                                (Figure 5).                                                                                                    (Figure 5).                                                                                                    (Figure 5).\n                                                                                                                                                                                                                                                                The ﬁrst category of tools consists of the reference NeuroML and LEMS simulation engines. These\n                                work directly with NeuroML and LEMS as their base descriptions of modeling entities and do not                 work directly with NeuroML and LEMS as their base descriptions of modeling entities and do not                 work directly with NeuroML and LEMS as their base descriptions of modeling entities and do not\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                           34 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nCreate a new HindmarshRose cell component with parameters for regular spiking\n\nnml_doc = component_factory(\"NeuroMLDocument\", id=\"HindmarshRoseNeuron\")\nhr0 = nml_doc.add(\"HindmarshRose1984Cell\", id=\"hr_regular\", a=\"1.0\", b=\"3.0\", c=\"-3.0\", d=\"5.0\",\ns=\"4.0\", x1=\"-1.3\", r=\"0.002\", x0=\"-1.1\", y0=\"-9\", z0=\"1.0\", C=\"28.57142857pF\",\nv_scaling=\"35.0mV\")\nnet = nml_doc.add(\"Network\", id=\"HRNet\", validate=False)\n\nCreate a population of cells (1 cell)\n\npop0 = net.add(\"Population\", id=\"HRPop0\", component=hr0.id, size=1)\n\nAdd external stimuli to the population\n\npg = nml_doc.add(\"PulseGenerator\", id=\"pulseGen_%i\" % 0, delay=\"0s\", duration=\"1000s\",\namplitude=\"5nA\")\nexp_input = net.add(\"ExplicitInput\", target=\"%s[%i]\" % (pop0.id, 0), input=pg.id,\ndestination=\"synapses\")\n\nSave (serialize) the model to a file\n\nnml_file = hindmarshrose1984_single_cell_network.nml\nwriters.NeuroMLWriter.write(nml_doc, nml_file)\n\nValidate the model\n\nvalidate_neuroml2(nml_file)\n\n# Figure 14\n\nExample model description of a HindmarshRose1984Cell NeuroML component in Python using parameters for regular bursting. This script generates the XML in Figure 11. The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n\nItself or share the XML serialization. Any valid XML serialization can be also loaded into a Python object model and modified.\n\nXML is the default serialization of NeuroML and all existing APIs can read and write the format (and it should be seen as a minimal requirement for new APIs to support XML). There is, however, an alternate native HDF5 (https://www.hdfgroup.org/solutions/hdf5) based serialization of NeuroML files which is supported by both libNeuroML and the Java API, org.neuroml.model (https://docs.neuroml.org/User-docs/HDF5.html). This format is based on an efficient representation of cell positions and connectivity data as HDF5 data sets which can be serialized in compact binary format and loaded into memory for optimized access (e.g. as numpy arrays in libNeuroML). This reduces the size of the saved files for large-scale networks and speeds up loading/writing models eliminating the need to parse/generate large text files containing XML. Models serialized in this format can be loaded and transformed to simulator code in the same way as XML-based models by the Java and Python APIs.\n\n# Simulating NeuroML models\n\nThe model description shown in Figure 11 contains no information about how it is to be simulated, or on the dynamics of each model component. Providing this simulation information and linking in the ComponentType definition requires creating a LEMS file to fully specify the simulation. Figure 15 shows the use of utilities included in the Python pyNeuroML package to describe a LEMS simulation of the HindmarshRose model defined in Figure 11. The LEMSSimulation object includes simulation specific information such as the duration of the simulation, the integration time step, and the seed value. It also allows the specification of files for the storage of data recorded from the simulation. In this example, we record the membrane potential, v, of our cell in its population, HRPop0[0]. Similar to the NeuroMLv2 model description, the simulation object can also be serialized to XML for storage and sharing (Figure 15, bottom).\n\nAs noted previously, NeuroML/LEMS model and simulation descriptions are machine readable and simulator independent and can be simulated by simulation engines using a multitude of strategies (Figure 5).\n\nThe first category of tools consists of the reference NeuroML and LEMS simulation engines. These work directly with NeuroML and LEMS as their base descriptions of modeling entities and do not.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"Create a new HindmarshRose cell component with parameters for regular spiking\n\nnml_doc = component_factory(\"NeuroMLDocument\", id=\"HindmarshRoseNeuron\")\nhr0 = nml_doc.add(\"HindmarshRose1984Cell\", id=\"hr_regular\", a=\"1.0\", b=\"3.0\", c=\"-3.0\", d=\"5.0\",\ns=\"4.0\", x1=\"-1.3\", r=\"0.002\", x0=\"-1.1\", y0=\"-9\", z0=\"1.0\", C=\"28.57142857pF\",\nv_scaling=\"35.0mV\")\nnet = nml_doc.add(\"Network\", id=\"HRNet\", validate=False)\n\nCreate a population of cells (1 cell)\n\npop0 = net.add(\"Population\", id=\"HRPop0\", component=hr0.id, size=1)\n\nAdd external stimuli to the population\n\npg = nml_doc.add(\"PulseGenerator\", id=\"pulseGen_%i\" % 0, delay=\"0s\", duration=\"1000s\",\namplitude=\"5nA\")\nexp_input = net.add(\"ExplicitInput\", target=\"%s[%i]\" % (pop0.id, 0), input=pg.id,\ndestination=\"synapses\")\n\nSave (serialize) the model to a file\n\nnml_file = hindmarshrose1984_single_cell_network.nml\nwriters.NeuroMLWriter.write(nml_doc, nml_file)\n\nValidate the model\n\nvalidate_neuroml2(nml_file)","md":"Create a new HindmarshRose cell component with parameters for regular spiking\n\nnml_doc = component_factory(\"NeuroMLDocument\", id=\"HindmarshRoseNeuron\")\nhr0 = nml_doc.add(\"HindmarshRose1984Cell\", id=\"hr_regular\", a=\"1.0\", b=\"3.0\", c=\"-3.0\", d=\"5.0\",\ns=\"4.0\", x1=\"-1.3\", r=\"0.002\", x0=\"-1.1\", y0=\"-9\", z0=\"1.0\", C=\"28.57142857pF\",\nv_scaling=\"35.0mV\")\nnet = nml_doc.add(\"Network\", id=\"HRNet\", validate=False)\n\nCreate a population of cells (1 cell)\n\npop0 = net.add(\"Population\", id=\"HRPop0\", component=hr0.id, size=1)\n\nAdd external stimuli to the population\n\npg = nml_doc.add(\"PulseGenerator\", id=\"pulseGen_%i\" % 0, delay=\"0s\", duration=\"1000s\",\namplitude=\"5nA\")\nexp_input = net.add(\"ExplicitInput\", target=\"%s[%i]\" % (pop0.id, 0), input=pg.id,\ndestination=\"synapses\")\n\nSave (serialize) the model to a file\n\nnml_file = hindmarshrose1984_single_cell_network.nml\nwriters.NeuroMLWriter.write(nml_doc, nml_file)\n\nValidate the model\n\nvalidate_neuroml2(nml_file)","bBox":{"x":174.65,"y":58.88,"w":400.35,"h":359.6}},{"type":"heading","lvl":1,"value":"Figure 14","md":"# Figure 14","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"text","value":"Example model description of a HindmarshRose1984Cell NeuroML component in Python using parameters for regular bursting. This script generates the XML in Figure 11. The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n\nItself or share the XML serialization. Any valid XML serialization can be also loaded into a Python object model and modified.\n\nXML is the default serialization of NeuroML and all existing APIs can read and write the format (and it should be seen as a minimal requirement for new APIs to support XML). There is, however, an alternate native HDF5 (https://www.hdfgroup.org/solutions/hdf5) based serialization of NeuroML files which is supported by both libNeuroML and the Java API, org.neuroml.model (https://docs.neuroml.org/User-docs/HDF5.html). This format is based on an efficient representation of cell positions and connectivity data as HDF5 data sets which can be serialized in compact binary format and loaded into memory for optimized access (e.g. as numpy arrays in libNeuroML). This reduces the size of the saved files for large-scale networks and speeds up loading/writing models eliminating the need to parse/generate large text files containing XML. Models serialized in this format can be loaded and transformed to simulator code in the same way as XML-based models by the Java and Python APIs.","md":"Example model description of a HindmarshRose1984Cell NeuroML component in Python using parameters for regular bursting. This script generates the XML in Figure 11. The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n\nItself or share the XML serialization. Any valid XML serialization can be also loaded into a Python object model and modified.\n\nXML is the default serialization of NeuroML and all existing APIs can read and write the format (and it should be seen as a minimal requirement for new APIs to support XML). There is, however, an alternate native HDF5 (https://www.hdfgroup.org/solutions/hdf5) based serialization of NeuroML files which is supported by both libNeuroML and the Java API, org.neuroml.model (https://docs.neuroml.org/User-docs/HDF5.html). This format is based on an efficient representation of cell positions and connectivity data as HDF5 data sets which can be serialized in compact binary format and loaded into memory for optimized access (e.g. as numpy arrays in libNeuroML). This reduces the size of the saved files for large-scale networks and speeds up loading/writing models eliminating the need to parse/generate large text files containing XML. Models serialized in this format can be loaded and transformed to simulator code in the same way as XML-based models by the Java and Python APIs.","bBox":{"x":168.53,"y":338.32,"w":415,"h":176.14}},{"type":"heading","lvl":1,"value":"Simulating NeuroML models","md":"# Simulating NeuroML models","bBox":{"x":168.53,"y":526.49,"w":161,"h":12}},{"type":"text","value":"The model description shown in Figure 11 contains no information about how it is to be simulated, or on the dynamics of each model component. Providing this simulation information and linking in the ComponentType definition requires creating a LEMS file to fully specify the simulation. Figure 15 shows the use of utilities included in the Python pyNeuroML package to describe a LEMS simulation of the HindmarshRose model defined in Figure 11. The LEMSSimulation object includes simulation specific information such as the duration of the simulation, the integration time step, and the seed value. It also allows the specification of files for the storage of data recorded from the simulation. In this example, we record the membrane potential, v, of our cell in its population, HRPop0[0]. Similar to the NeuroMLv2 model description, the simulation object can also be serialized to XML for storage and sharing (Figure 15, bottom).\n\nAs noted previously, NeuroML/LEMS model and simulation descriptions are machine readable and simulator independent and can be simulated by simulation engines using a multitude of strategies (Figure 5).\n\nThe first category of tools consists of the reference NeuroML and LEMS simulation engines. These work directly with NeuroML and LEMS as their base descriptions of modeling entities and do not.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"The model description shown in Figure 11 contains no information about how it is to be simulated, or on the dynamics of each model component. Providing this simulation information and linking in the ComponentType definition requires creating a LEMS file to fully specify the simulation. Figure 15 shows the use of utilities included in the Python pyNeuroML package to describe a LEMS simulation of the HindmarshRose model defined in Figure 11. The LEMSSimulation object includes simulation specific information such as the duration of the simulation, the integration time step, and the seed value. It also allows the specification of files for the storage of data recorded from the simulation. In this example, we record the membrane potential, v, of our cell in its population, HRPop0[0]. Similar to the NeuroMLv2 model description, the simulation object can also be serialized to XML for storage and sharing (Figure 15, bottom).\n\nAs noted previously, NeuroML/LEMS model and simulation descriptions are machine readable and simulator independent and can be simulated by simulation engines using a multitude of strategies (Figure 5).\n\nThe first category of tools consists of the reference NeuroML and LEMS simulation engines. These work directly with NeuroML and LEMS as their base descriptions of modeling entities and do not.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":554.49,"w":411,"h":164.98}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://www.hdfgroup.org/solutions/hdf5","text":""},{"url":"https://docs.neuroml.org/Userdocs/HDF5.html","text":""},{"url":"https://docs.neuroml.org/Userdocs/HDF5.html","text":"docs/HDF5.html). This format is based on an efﬁcient representation of cell positions and connectivity "},{"url":"https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.441},{"page":35,"text":"           Tools  and  resources                                                                                                                                                                                                                                                                                                                               Neuroscience\n                                                                                                                                                                                                                                                            Create a simulation of the model                                                                  Create a simulation of the model\n                                                                                                                                                                                                                                                            simulation_id = \"example-single-hindmarshrose1984cell-sim\"                                        simulation_id = \"example-single-hindmarshrose1984cell-sim\"\n                                                                                                                                                                                                                                                            simulation = LΕMSSimulation(sim_id=simulation_id, duration=1.4e3, dt=0.0025, simulation_seed=123) simulation = LΕMSSimulation(sim_id=simulation_id, duration=1.4e3, dt=0.0025, simulation_seed=123)\n                                                                                                                                                                                                                                                                                                                                                              simulation.assign_simulation_target(net.id)\n                                                                                                                                                                                                                                                                                                                                                              simulation.include_neuroml2_ƒile(nml_ƒile)\n                                                                                                                                                                                                                                                            Record membrane potential to an output ﬁle                                                        Record membrane potential to an output ﬁle\n                                                                                                                                                                                                                                                            simulation.create_output_ƒile(\"output0\", \"%s.v.dat\" % simulation_id)                              simulation.create_output_ƒile(\"output0\", \"%s.v.dat\" % simulation_id)\n                                                                                                                                                                                                                                                            simulation.add_column_to_output_ƒile(\"output0\",                                                   simulation.add_column_to_output_ƒile(\"output0\", ΗRPop0[0] , ΗRPop0[0]/v )\n                                                                                                                                                                                                                                                            Save the simulation to ﬁle and run it in jNeuroML/jLEMS                                           Save the simulation to ﬁle and run it in jNeuroML/jLEMS\n                                                                                                                                                                                                                                                            lems_simulation_ƒile = simulation.save_to_ƒile()                                                  lems_simulation_ƒile = simulation.save_to_ƒile()\n                                                                                                                                                                                                                                                                                                                                                              pynml.run_lems_with_jneuroml(lems_simulation_ƒile, max_memory=\"2G\", nogui=True, plot=False)\n                                                                                                                                                                                                                                                            LEMS simulation description serialization                                                         LEMS simulation description serialization\n                                                                                                                                                                                                                                                            <Lems>                                                                                            <Lems>\n                                                                                                                                                                                                                                                                                                                                                               <!-- Speciƒy which component to run -->\n                                                                                                                                                                                                                                                                                                                                                               <Target component=\"example-single-hindmarshrose1984cell-sim\"/>\n                                                                                                                                                                                                                                                                                                                                                               <!-- Include core NeuroML2 ComponentType deƒinitions -->\n                                                                                                                                                                                                                                                                                                                                                               <Ιnclude ƒile=\"Cells.xml\"/>\n                                                                                                                                                                                                                                                                                                                                                               <Ιnclude ƒile=\"Networks.xml\"/>\n                                                                                                                                                                                                                                                                                                                                                               <Ιnclude ƒile=\"Simulation.xml\"/>\n                                                                                                                                                                                                                                                                                                                                                               <Ιnclude ƒile=\"hindmarshrose1984_single_cell_network.nml\"/>\n                                                                                                                                                                                                                                                                                                                                                               <Simulation id=\"example-single-hindmarshrose1984cell-sim\" length=\"1400.0ms\" step=\"0.0025ms\"\n                                                                                                                                                                                                                                                                                                                                                               target=\"ΗRNet\" seed=\"123\">  <!-- Note seed: ensures same random numbers used every run\n                                                                                                                                                                                                                                                                                                                                                               -->\n                                                                                                                                                                                                                                                                                                                                                               <OutputFile id=\"output0\" ƒileName=\"example-single-hindmarshrose1984cell-sim.v.dat\">\n                                                                                                                                                                                                                                                                                                                                                               <OutputColumn id=\"ΗRPop0[0]\" quantity=\"ΗRPop0[0]/v\"/>\n                                                                                                                                                                                                                                                                                                                                                               </OutputFile>\n                                                                                                                                                                                                                                                                                                                                                               </Simulation>\n                                                                                                                                                                                                                                                                                                                                                              </Lems>\n                                 Figure 15. An example simulation of the HindmarshRose model description shown in Figure 14 with the          Figure 15. An example simulation of the HindmarshRose model description shown in Figure 14 with the          Figure 15. An example simulation of the HindmarshRose model description shown in Figure 14 with the\n                                 LEMS serialization shown at the bottom. The code used in this example is available here: https://github.com/ LEMS serialization shown at the bottom. The code used in this example is available here: https://github.com/ LEMS serialization shown at the bottom. The code used in this example is available here: https://github.com/\n                                 OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.                                             OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.                                             OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n                                 have their own speciﬁc formats. They are maintained by the NeuroML Editorial Board—jLEMS, jNeu-              have their own speciﬁc formats. They are maintained by the NeuroML Editorial Board—jLEMS, jNeu-              have their own speciﬁc formats. They are maintained by the NeuroML Editorial Board—jLEMS, jNeu-\n                                 roML, and PyLEMS (Figure 4). jLEMS serves as the reference implementation for the LEMS language              roML, and PyLEMS (Figure 4). jLEMS serves as the reference implementation for the LEMS language              roML, and PyLEMS (Figure 4). jLEMS serves as the reference implementation for the LEMS language\n                                 and as such it can simulate any model described in LEMS (not necessarily from neuroscience). When            and as such it can simulate any model described in LEMS (not necessarily from neuroscience). When            and as such it can simulate any model described in LEMS (not necessarily from neuroscience). When\n                                 coupled with the LEMS deﬁnitions of NeuroML standard entity structure/dynamics, it can simulate              coupled with the LEMS deﬁnitions of NeuroML standard entity structure/dynamics, it can simulate              coupled with the LEMS deﬁnitions of NeuroML standard entity structure/dynamics, it can simulate\n                                 most NeuroML models, though it does not currently support multi-                                             most NeuroML models, though it does not currently support multi-                                             most NeuroML models, though it does not currently support multi-                                    compartmental neurons. jNeu-\n                                 roML bundles the NeuroML standard LEMS deﬁnitions, jLEMS, and other functionality into a single              roML bundles the NeuroML standard LEMS deﬁnitions, jLEMS, and other functionality into a single              roML bundles the NeuroML standard LEMS deﬁnitions, jLEMS, and other functionality into a single\n                                 package for ease of installation/usage. There is also a pure Python implementation of a LEMS inter           package for ease of installation/usage. There is also a pure Python implementation of a LEMS inter           package for ease of installation/usage. There is also a pure Python implementation of a LEMS inter  -\n                                 preter, PyLEMS, which can be used in a similar way to jLEMS. The pyNeuroML package encapsulates              preter, PyLEMS, which can be used in a similar way to jLEMS. The pyNeuroML package encapsulates              preter, PyLEMS, which can be used in a similar way to jLEMS. The pyNeuroML package encapsulates\n                                 all of these tools to give easy access (at both command line and in Python) to all of their functionality    all of these tools to give easy access (at both command line and in Python) to all of their functionality    all of these tools to give easy access (at both command line and in Python) to all of their functionality\n                                 (Figure 6).                                                                                                  (Figure 6).                                                                                                  (Figure 6).\n                                                                                                                                                                                                                                                                                                                                                               The second category consists of other simulators which support NeuroML natively. The EDEN\n                                 simulator is an independently developed tool that was designed from its inception to read NeuroML            simulator is an independently developed tool that was designed from its inception to read NeuroML            simulator is an independently developed tool that was designed from its inception to read NeuroML\n                                 and LEMS models for efﬁcient, parallel simulation (Panagiotou et al., 2022).                                 and LEMS models for efﬁcient, parallel simulation (Panagiotou et al., 2022).                                 and LEMS models for efﬁcient, parallel simulation (Panagiotou et al., 2022).\n                                                                                                                                                                                                                                                                                                                                                               The third category involves simulators which have their own internal formats and include methods\n                                 to translate NeuroMLv2/LEMS models to their own formats. Examples include NetPyNE (Dura‐ Bernal              to translate NeuroMLv2/LEMS models to their own formats. Examples include NetPyNE (Dura‐ Bernal              to translate NeuroMLv2/LEMS models to their own formats. Examples include NetPyNE (Dura‐ Bernal\n                                 et al., 2019), MOOSE (Ray and Bhalla, 2008), and N2A (Rothganger et al., 2014).                              et al., 2019), MOOSE (Ray and Bhalla, 2008), and N2A (Rothganger et al., 2014).                              et al., 2019), MOOSE (Ray and Bhalla, 2008), and N2A (Rothganger et al., 2014).\n                                                                                                                                                                                                                                                                                                                                                               The fourth category comprises tools for which the NeuroML tools generate simulator speciﬁc scripts.\n                                 The simulation engines then execute these scripts, similar to how they would execute handwritten             The simulation engines then execute these scripts, similar to how they would execute handwritten             The simulation engines then execute these scripts, similar to how they would execute handwritten\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                          35 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Create a simulation of the model\n\nsimulation_id = \"example-single-hindmarshrose1984cell-sim\"\nsimulation = LΕMSSimulation(sim_id=simulation_id, duration=1.4e3, dt=0.0025, simulation_seed=123)\nsimulation.assign_simulation_target(net.id)\nsimulation.include_neuroml2_ƒile(nml_ƒile)\n\n# Record membrane potential to an output file\n\nsimulation.create_output_ƒile(\"output0\", \"%s.v.dat\" % simulation_id)\nsimulation.add_column_to_output_ƒile(\"output0\", ΗRPop0[0], ΗRPop0[0]/v)\n\n# Save the simulation to file and run it in jNeuroML/jLEMS\n\nlems_simulation_ƒile = simulation.save_to_ƒile()\npynml.run_lems_with_jneuroml(lems_simulation_ƒile, max_memory=\"2G\", nogui=True, plot=False)\n\n# LEMS simulation description serialization\n\n<Lems>\n<Target component=\"example-single-hindmarshrose1984cell-sim\"/>\n<Ιnclude ƒile=\"Cells.xml\"/>\n<Ιnclude ƒile=\"Networks.xml\"/>\n<Ιnclude ƒile=\"Simulation.xml\"/>\n<Ιnclude ƒile=\"hindmarshrose1984_single_cell_network.nml\"/>\n<Simulation id=\"example-single-hindmarshrose1984cell-sim\" length=\"1400.0ms\" step=\"0.0025ms\" target=\"ΗRNet\" seed=\"123\">\n<OutputFile id=\"output0\" ƒileName=\"example-single-hindmarshrose1984cell-sim.v.dat\">\n<OutputColumn id=\"ΗRPop0[0]\" quantity=\"ΗRPop0[0]/v\"/>\n</OutputFile>\n</Simulation>\n</Lems>\n\nFigure 15. An example simulation of the HindmarshRose model description shown in Figure 14 with the LEMS serialization shown at the bottom. The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n\nhave their own specific formats. They are maintained by the NeuroML Editorial Board—jLEMS, jNeuML, and PyLEMS (Figure 4). jLEMS serves as the reference implementation for the LEMS language and as such it can simulate any model described in LEMS (not necessarily from neuroscience). When coupled with the LEMS definitions of NeuroML standard entity structure/dynamics, it can simulate most NeuroML models, though it does not currently support multi-compartmental neurons. jNeuML bundles the NeuroML standard LEMS definitions, jLEMS, and other functionality into a single package for ease of installation/usage. There is also a pure Python implementation of a LEMS interpreter, PyLEMS, which can be used in a similar way to jLEMS. The pyNeuroML package encapsulates all of these tools to give easy access (at both command line and in Python) to all of their functionality (Figure 6).\n\nThe second category consists of other simulators which support NeuroML natively. The EDEN simulator is an independently developed tool that was designed from its inception to read NeuroML and LEMS models for efficient, parallel simulation (Panagiotou et al., 2022).\n\nThe third category involves simulators which have their own internal formats and include methods to translate NeuroMLv2/LEMS models to their own formats. Examples include NetPyNE (Dura‐ Bernal et al., 2019), MOOSE (Ray and Bhalla, 2008), and N2A (Rothganger et al., 2014).\n\nThe fourth category comprises tools for which the NeuroML tools generate simulator specific scripts. The simulation engines then execute these scripts, similar to how they would execute handwritten scripts.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Create a simulation of the model","md":"# Create a simulation of the model","bBox":{"x":174.65,"y":58.89,"w":131,"h":9}},{"type":"text","value":"simulation_id = \"example-single-hindmarshrose1984cell-sim\"\nsimulation = LΕMSSimulation(sim_id=simulation_id, duration=1.4e3, dt=0.0025, simulation_seed=123)\nsimulation.assign_simulation_target(net.id)\nsimulation.include_neuroml2_ƒile(nml_ƒile)","md":"simulation_id = \"example-single-hindmarshrose1984cell-sim\"\nsimulation = LΕMSSimulation(sim_id=simulation_id, duration=1.4e3, dt=0.0025, simulation_seed=123)\nsimulation.assign_simulation_target(net.id)\nsimulation.include_neuroml2_ƒile(nml_ƒile)","bBox":{"x":174.64,"y":75.91,"w":400.36,"h":511.56}},{"type":"heading","lvl":1,"value":"Record membrane potential to an output file","md":"# Record membrane potential to an output file","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"text","value":"simulation.create_output_ƒile(\"output0\", \"%s.v.dat\" % simulation_id)\nsimulation.add_column_to_output_ƒile(\"output0\", ΗRPop0[0], ΗRPop0[0]/v)","md":"simulation.create_output_ƒile(\"output0\", \"%s.v.dat\" % simulation_id)\nsimulation.add_column_to_output_ƒile(\"output0\", ΗRPop0[0], ΗRPop0[0]/v)","bBox":{"x":174.65,"y":140.33,"w":304.82,"h":18.32}},{"type":"heading","lvl":1,"value":"Save the simulation to file and run it in jNeuroML/jLEMS","md":"# Save the simulation to file and run it in jNeuroML/jLEMS","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"text","value":"lems_simulation_ƒile = simulation.save_to_ƒile()\npynml.run_lems_with_jneuroml(lems_simulation_ƒile, max_memory=\"2G\", nogui=True, plot=False)","md":"lems_simulation_ƒile = simulation.save_to_ƒile()\npynml.run_lems_with_jneuroml(lems_simulation_ƒile, max_memory=\"2G\", nogui=True, plot=False)","bBox":{"x":174.65,"y":184.1,"w":369.11,"h":18.32}},{"type":"heading","lvl":1,"value":"LEMS simulation description serialization","md":"# LEMS simulation description serialization","bBox":{"x":174.65,"y":217.62,"w":164,"h":9}},{"type":"text","value":"<Lems>\n<Target component=\"example-single-hindmarshrose1984cell-sim\"/>\n<Ιnclude ƒile=\"Cells.xml\"/>\n<Ιnclude ƒile=\"Networks.xml\"/>\n<Ιnclude ƒile=\"Simulation.xml\"/>\n<Ιnclude ƒile=\"hindmarshrose1984_single_cell_network.nml\"/>\n<Simulation id=\"example-single-hindmarshrose1984cell-sim\" length=\"1400.0ms\" step=\"0.0025ms\" target=\"ΗRNet\" seed=\"123\">\n<OutputFile id=\"output0\" ƒileName=\"example-single-hindmarshrose1984cell-sim.v.dat\">\n<OutputColumn id=\"ΗRPop0[0]\" quantity=\"ΗRPop0[0]/v\"/>\n</OutputFile>\n</Simulation>\n</Lems>\n\nFigure 15. An example simulation of the HindmarshRose model description shown in Figure 14 with the LEMS serialization shown at the bottom. The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n\nhave their own specific formats. They are maintained by the NeuroML Editorial Board—jLEMS, jNeuML, and PyLEMS (Figure 4). jLEMS serves as the reference implementation for the LEMS language and as such it can simulate any model described in LEMS (not necessarily from neuroscience). When coupled with the LEMS definitions of NeuroML standard entity structure/dynamics, it can simulate most NeuroML models, though it does not currently support multi-compartmental neurons. jNeuML bundles the NeuroML standard LEMS definitions, jLEMS, and other functionality into a single package for ease of installation/usage. There is also a pure Python implementation of a LEMS interpreter, PyLEMS, which can be used in a similar way to jLEMS. The pyNeuroML package encapsulates all of these tools to give easy access (at both command line and in Python) to all of their functionality (Figure 6).\n\nThe second category consists of other simulators which support NeuroML natively. The EDEN simulator is an independently developed tool that was designed from its inception to read NeuroML and LEMS models for efficient, parallel simulation (Panagiotou et al., 2022).\n\nThe third category involves simulators which have their own internal formats and include methods to translate NeuroMLv2/LEMS models to their own formats. Examples include NetPyNE (Dura‐ Bernal et al., 2019), MOOSE (Ray and Bhalla, 2008), and N2A (Rothganger et al., 2014).\n\nThe fourth category comprises tools for which the NeuroML tools generate simulator specific scripts. The simulation engines then execute these scripts, similar to how they would execute handwritten scripts.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"<Lems>\n<Target component=\"example-single-hindmarshrose1984cell-sim\"/>\n<Ιnclude ƒile=\"Cells.xml\"/>\n<Ιnclude ƒile=\"Networks.xml\"/>\n<Ιnclude ƒile=\"Simulation.xml\"/>\n<Ιnclude ƒile=\"hindmarshrose1984_single_cell_network.nml\"/>\n<Simulation id=\"example-single-hindmarshrose1984cell-sim\" length=\"1400.0ms\" step=\"0.0025ms\" target=\"ΗRNet\" seed=\"123\">\n<OutputFile id=\"output0\" ƒileName=\"example-single-hindmarshrose1984cell-sim.v.dat\">\n<OutputColumn id=\"ΗRPop0[0]\" quantity=\"ΗRPop0[0]/v\"/>\n</OutputFile>\n</Simulation>\n</Lems>\n\nFigure 15. An example simulation of the HindmarshRose model description shown in Figure 14 with the LEMS serialization shown at the bottom. The code used in this example is available here: https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples.\n\nhave their own specific formats. They are maintained by the NeuroML Editorial Board—jLEMS, jNeuML, and PyLEMS (Figure 4). jLEMS serves as the reference implementation for the LEMS language and as such it can simulate any model described in LEMS (not necessarily from neuroscience). When coupled with the LEMS definitions of NeuroML standard entity structure/dynamics, it can simulate most NeuroML models, though it does not currently support multi-compartmental neurons. jNeuML bundles the NeuroML standard LEMS definitions, jLEMS, and other functionality into a single package for ease of installation/usage. There is also a pure Python implementation of a LEMS interpreter, PyLEMS, which can be used in a similar way to jLEMS. The pyNeuroML package encapsulates all of these tools to give easy access (at both command line and in Python) to all of their functionality (Figure 6).\n\nThe second category consists of other simulators which support NeuroML natively. The EDEN simulator is an independently developed tool that was designed from its inception to read NeuroML and LEMS models for efficient, parallel simulation (Panagiotou et al., 2022).\n\nThe third category involves simulators which have their own internal formats and include methods to translate NeuroMLv2/LEMS models to their own formats. Examples include NetPyNE (Dura‐ Bernal et al., 2019), MOOSE (Ray and Bhalla, 2008), and N2A (Rothganger et al., 2014).\n\nThe fourth category comprises tools for which the NeuroML tools generate simulator specific scripts. The simulation engines then execute these scripts, similar to how they would execute handwritten scripts.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":34.63,"w":414.68,"h":684.8}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples","text":""},{"url":"https://github.com/OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples","text":"OpenSourceBrain/HindmarshRose1984/tree/master/NeuroML2/examples."}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.423},{"page":36,"text":"          Tools  and  resourceseuroscience\n                                user scripts. These include NEURON (Hines and Carnevale, 1997) for which the NeuroML tools              user scripts. These include NEURON (Hines and Carnevale, 1997) for which the NeuroML tools              user scripts. These include NEURON (Hines and Carnevale, 1997) for which the NeuroML tools              user scripts. These include NEURON (Hines and Carnevale, 1997) for which the NeuroML tools              user scripts. These include NEURON (Hines and Carnevale, 1997) for which the NeuroML tools              user scripts. These include NEURON (Hines and Carnevale, 1997) for which the NeuroML tools\n                                generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (Stim‐     generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (Stim‐     generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (Stim‐     generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (Stim‐     generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (Stim‐     generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (Stim‐\n                                berg et al., 2019) which uses Python scripts.                                                           berg et al., 2019) which uses Python scripts.                                                           berg et al., 2019) which uses Python scripts.                                                           berg et al., 2019) which uses Python scripts.                                                           berg et al., 2019) which uses Python scripts.                                                           berg et al., 2019) which uses Python scripts.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         The ﬁnal category consists of export options to standardized formats in neuroscience and the wider  The ﬁnal category consists of export options to standardized formats in neuroscience and the wider\n                                computational biology ﬁeld, which enable interaction with simulators and applications supporting        computational biology ﬁeld, which enable interaction with simulators and applications supporting        computational biology ﬁeld, which enable interaction with simulators and applications supporting        computational biology ﬁeld, which enable interaction with simulators and applications supporting        computational biology ﬁeld, which enable interaction with simulators and applications supporting        computational biology ﬁeld, which enable interaction with simulators and applications supporting\n                                those formats. These include the PyNN package (Davison et al., 2008), which can be run in either        those formats. These include the PyNN package (Davison et al., 2008), which can be run in either        those formats. These include the PyNN package (Davison et al., 2008), which can be run in either        those formats. These include the PyNN package (Davison et al., 2008), which can be run in either        those formats. These include the PyNN package (Davison et al., 2008), which can be run in either        those formats. These include the PyNN package (Davison et al., 2008), which can be run in either\n                                NEURON, NEST (Gewaltig and Diesmann, 2007) or Brian, the SONATA data format (Dai et al., 2020)          NEURON, NEST (Gewaltig and Diesmann, 2007) or Brian, the SONATA data format (Dai et al., 2020)          NEURON, NEST (Gewaltig and Diesmann, 2007) or Brian, the SONATA data format (Dai et al., 2020)          NEURON, NEST (Gewaltig and Diesmann, 2007) or Brian, the SONATA data format (Dai et al., 2020)          NEURON, NEST (Gewaltig and Diesmann, 2007) or Brian, the SONATA data format (Dai et al., 2020)          NEURON, NEST (Gewaltig and Diesmann, 2007) or Brian, the SONATA data format (Dai et al., 2020)\n                                and the SBML standard (Hucka et al., 2003) (see Reusing NeuroML models for more details).               and the SBML standard (Hucka et al., 2003) (see Reusing NeuroML models for more details).               and the SBML standard (Hucka et al., 2003) (see Reusing NeuroML models for more details).               and the SBML standard (Hucka et al., 2003) (see Reusing NeuroML models for more details).               and the SBML standard (Hucka et al., 2003) (see Reusing NeuroML models for more details).               and the SBML standard (Hucka et al., 2003) (see Reusing NeuroML models for more details).\naving multiple strategies in place for supporting NeuroML gives more freedom to simulator devel-   Having multiple strategies in place for supporting NeuroML gives more freedom to simulator devel-\n                                opers to choose how much they wish to be involved with implementing and supporting NeuroML              opers to choose how much they wish to be involved with implementing and supporting NeuroML              opers to choose how much they wish to be involved with implementing and supporting NeuroML              opers to choose how much they wish to be involved with implementing and supporting NeuroML              opers to choose how much they wish to be involved with implementing and supporting NeuroML              opers to choose how much they wish to be involved with implementing and supporting NeuroML\n                                functionality in their applications, while maximizing the options available for end users.              functionality in their applications, while maximizing the options available for end users.              functionality in their applications, while maximizing the options available for end users.              functionality in their applications, while maximizing the options available for end users.              functionality in their applications, while maximizing the options available for end users.              functionality in their applications, while maximizing the options available for end users.\nhe primary tool for simulating NeuroML/LEMS models via different engines is jNeuroML, which        The primary tool for simulating NeuroML/LEMS models via different engines is jNeuroML, which\n                                is included in pyNeuroML. jNeuroML supports all simulator engine categories (Figure 5). It includes     is included in pyNeuroML. jNeuroML supports all simulator engine categories (Figure 5). It includes     is included in pyNeuroML. jNeuroML supports all simulator engine categories (Figure 5). It includes     is included in pyNeuroML. jNeuroML supports all simulator engine categories (Figure 5). It includes     is included in pyNeuroML. jNeuroML supports all simulator engine categories (Figure 5). It includes     is included in pyNeuroML. jNeuroML supports all simulator engine categories (Figure 5). It includes\n                                jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simula-          jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simula-          jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simula-          jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simula-          jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simula-          jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simula-\n                                tions to the EDEN simulator (Panagiotou et al., 2022) for direct simulation. Using the   org.           tions to the EDEN simulator (Panagiotou et al., 2022) for direct simulation. Using the   org.           tions to the EDEN simulator (Panagiotou et al., 2022) for direct simulation. Using the   org.           tions to the EDEN simulator (Panagiotou et al., 2022) for direct simulation. Using the   org.           tions to the EDEN simulator (Panagiotou et al., 2022) for direct simulation. Using the   org.           tions to the EDEN simulator (Panagiotou et al., 2022) for direct simulation. Using the   org.\nneuroml.\n                                export library (https://github.com/NeuroML/org.neuroml.export), jNeuroML can also generate import       export library (https://github.com/NeuroML/org.neuroml.export), jNeuroML can also generate import       export library (https://github.com/NeuroML/org.neuroml.export), jNeuroML can also generate import       export library (https://github.com/NeuroML/org.neuroml.export), jNeuroML can also generate import       export library (https://github.com/NeuroML/org.neuroml.export), jNeuroML can also generate import       export library (https://github.com/NeuroML/org.neuroml.export), jNeuroML can also generate import\n                                scripts for simulators (e.g. NetPyNE Dura‐                                                              scripts for simulators (e.g. NetPyNE Dura‐                                                              scripts for simulators (e.g. NetPyNE Dura‐                                                              scripts for simulators (e.g. NetPyNE Dura‐                                                              scripts for simulators (e.g. NetPyNE Dura‐                                                              scripts for simulators (e.g. NetPyNE Dura‐\nernal et al., 2019) or convert NeuroML/LEMS models to\nsimulator speciﬁc formats (e.g. NEURON Hines and Carnevale, 1997). Supporting a new simulation\n                                engine that requires translation of NeuroML/LEMS into another format can be done by adding a            engine that requires translation of NeuroML/LEMS into another format can be done by adding a            engine that requires translation of NeuroML/LEMS into another format can be done by adding a            engine that requires translation of NeuroML/LEMS into another format can be done by adding a            engine that requires translation of NeuroML/LEMS into another format can be done by adding a            engine that requires translation of NeuroML/LEMS into another format can be done by adding a\n                                new ‘writer’ to the org.                                                                                new ‘writer’ to the org.                                                                                new ‘writer’ to the org.                                                                                new ‘writer’ to the org.                                                                                new ‘writer’ to the org.                                                                                new ‘writer’ to the org.\nneuroml.\nexport library. Finally, jNeuroML also includes the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             org.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             neuroml.\nimport\n                                (https://github.com/NeuroML/jNeuroML) library that converts from other formats (e.g. SBML Hucka         (https://github.com/NeuroML/jNeuroML) library that converts from other formats (e.g. SBML Hucka         (https://github.com/NeuroML/jNeuroML) library that converts from other formats (e.g. SBML Hucka         (https://github.com/NeuroML/jNeuroML) library that converts from other formats (e.g. SBML Hucka         (https://github.com/NeuroML/jNeuroML) library that converts from other formats (e.g. SBML Hucka         (https://github.com/NeuroML/jNeuroML) library that converts from other formats (e.g. SBML Hucka\n                                et al., 2003) to LEMS for combination with NeuroML models.                                              et al., 2003) to LEMS for combination with NeuroML models.                                              et al., 2003) to LEMS for combination with NeuroML models.                                              et al., 2003) to LEMS for combination with NeuroML models.                                              et al., 2003) to LEMS for combination with NeuroML models.                                              et al., 2003) to LEMS for combination with NeuroML models.\nt is important to note though that not all NeuroML models can be exported to/are supported by      It is important to note though that not all NeuroML models can be exported to/are supported by\n                                each of these target simulators (Table 7). This depends on the capabilities of the simulator in ques-   each of these target simulators (Table 7). This depends on the capabilities of the simulator in ques-   each of these target simulators (Table 7). This depends on the capabilities of the simulator in ques-   each of these target simulators (Table 7). This depends on the capabilities of the simulator in ques-   each of these target simulators (Table 7). This depends on the capabilities of the simulator in ques-   each of these target simulators (Table 7). This depends on the capabilities of the simulator in ques-\n                                tion (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will      tion (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will      tion (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will      tion (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will      tion (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will      tion (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will\n                                provide feedback if a feature of the model is not supported in a chosen environment.                    provide feedback if a feature of the model is not supported in a chosen environment.                    provide feedback if a feature of the model is not supported in a chosen environment.                    provide feedback if a feature of the model is not supported in a chosen environment.                    provide feedback if a feature of the model is not supported in a chosen environment.                    provide feedback if a feature of the model is not supported in a chosen environment.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         All NeuroML and LEMS software packages are made available under FOSS licenses. The source           All NeuroML and LEMS software packages are made available under FOSS licenses. The source\n                                code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub orga-            code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub orga-            code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub orga-            code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub orga-            code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub orga-            code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub orga-\n                                nization (https://github.com/NeuroML). The NeuroML Python API (https://github.com/NeuralEn-             nization (https://github.com/NeuroML). The NeuroML Python API (https://github.com/NeuralEn-             nization (https://github.com/NeuroML). The NeuroML Python API (https://github.com/NeuralEn-             nization (https://github.com/NeuroML). The NeuroML Python API (https://github.com/NeuralEn-             nization (https://github.com/NeuroML). The NeuroML Python API (https://github.com/NeuralEn-             nization (https://github.com/NeuroML). The NeuroML Python API (https://github.com/NeuralEn-\n                                semble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://          semble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://          semble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://          semble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://          semble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://          semble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://\n                                github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as           github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as           github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as           github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as           github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as           github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as\n                                PyNN (Davison et al., 2008), Neo (Garcia et al., 2014) and Elephant (Denker, 2018). LEMS packages       PyNN (Davison et al., 2008), Neo (Garcia et al., 2014) and Elephant (Denker, 2018). LEMS packages       PyNN (Davison et al., 2008), Neo (Garcia et al., 2014) and Elephant (Denker, 2018). LEMS packages       PyNN (Davison et al., 2008), Neo (Garcia et al., 2014) and Elephant (Denker, 2018). LEMS packages       PyNN (Davison et al., 2008), Neo (Garcia et al., 2014) and Elephant (Denker, 2018). LEMS packages       PyNN (Davison et al., 2008), Neo (Garcia et al., 2014) and Elephant (Denker, 2018). LEMS packages\n                                are available from the LEMS GitHub organization (https://github.com/LEMS).                              are available from the LEMS GitHub organization (https://github.com/LEMS).                              are available from the LEMS GitHub organization (https://github.com/LEMS).                              are available from the LEMS GitHub organization (https://github.com/LEMS).                              are available from the LEMS GitHub organization (https://github.com/LEMS).                              are available from the LEMS GitHub organization (https://github.com/LEMS).\no ensure replication and reproduction of studies, it is important to note the exact versions of    To ensure replication and reproduction of studies, it is important to note the exact versions of\n                                software used in studies. For NeuroML and LEMS packages, archives of each release along with cita-      software used in studies. For NeuroML and LEMS packages, archives of each release along with cita-      software used in studies. For NeuroML and LEMS packages, archives of each release along with cita-      software used in studies. For NeuroML and LEMS packages, archives of each release along with cita-      software used in studies. For NeuroML and LEMS packages, archives of each release along with cita-      software used in studies. For NeuroML and LEMS packages, archives of each release along with cita-\n                                tions are published on Zenodo (https://zenodo.org) to enable researchers to cite them in their work     tions are published on Zenodo (https://zenodo.org) to enable researchers to cite them in their work     tions are published on Zenodo (https://zenodo.org) to enable researchers to cite them in their work     tions are published on Zenodo (https://zenodo.org) to enable researchers to cite them in their work     tions are published on Zenodo (https://zenodo.org) to enable researchers to cite them in their work     tions are published on Zenodo (https://zenodo.org) to enable researchers to cite them in their work\n                                (Gleeson, 2021; Gleeson, 2024a; Gleeson et al., 2019b; Gleeson, 2024b; Sinha, 2024).                    (Gleeson, 2021; Gleeson, 2024a; Gleeson et al., 2019b; Gleeson, 2024b; Sinha, 2024).                    (Gleeson, 2021; Gleeson, 2024a; Gleeson et al., 2019b; Gleeson, 2024b; Sinha, 2024).                    (Gleeson, 2021; Gleeson, 2024a; Gleeson et al., 2019b; Gleeson, 2024b; Sinha, 2024).                    (Gleeson, 2021; Gleeson, 2024a; Gleeson et al., 2019b; Gleeson, 2024b; Sinha, 2024).                    (Gleeson, 2021; Gleeson, 2024a; Gleeson et al., 2019b; Gleeson, 2024b; Sinha, 2024).\n                                Documentation                                                                                           Documentation                                                                                           Documentation                                                                                           Documentation                                                                                           Documentation                                                                                           Documentation\n                                A standard and its accompanying software ecosystem must be supported by comprehensive docu-             A standard and its accompanying software ecosystem must be supported by comprehensive docu-             A standard and its accompanying software ecosystem must be supported by comprehensive docu-             A standard and its accompanying software ecosystem must be supported by comprehensive docu-             A standard and its accompanying software ecosystem must be supported by comprehensive docu-             A standard and its accompanying software ecosystem must be supported by comprehensive docu-\n                                mentation if it is to be of use to the research community. The primary NeuroML documentation for        mentation if it is to be of use to the research community. The primary NeuroML documentation for        mentation if it is to be of use to the research community. The primary NeuroML documentation for        mentation if it is to be of use to the research community. The primary NeuroML documentation for        mentation if it is to be of use to the research community. The primary NeuroML documentation for        mentation if it is to be of use to the research community. The primary NeuroML documentation for\n                                users that accompanies this paper has been consolidated into a JupyterBook (Executable Books            users that accompanies this paper has been consolidated into a JupyterBook (Executable Books            users that accompanies this paper has been consolidated into a JupyterBook (Executable Books            users that accompanies this paper has been consolidated into a JupyterBook (Executable Books            users that accompanies this paper has been consolidated into a JupyterBook (Executable Books            users that accompanies this paper has been consolidated into a JupyterBook (Executable Books\n                                Community, 2020) at https://docs.neuroml.org. This includes explanations of NeuroML and compu-          Community, 2020) at https://docs.neuroml.org. This includes explanations of NeuroML and compu-          Community, 2020) at https://docs.neuroml.org. This includes explanations of NeuroML and compu-          Community, 2020) at https://docs.neuroml.org. This includes explanations of NeuroML and compu-          Community, 2020) at https://docs.neuroml.org. This includes explanations of NeuroML and compu-          Community, 2020) at https://docs.neuroml.org. This includes explanations of NeuroML and compu-\n                                tational modeling concepts, interactive tutorials with varying levels of complexity, information about  tational modeling concepts, interactive tutorials with varying levels of complexity, information about  tational modeling concepts, interactive tutorials with varying levels of complexity, information about  tational modeling concepts, interactive tutorials with varying levels of complexity, information about  tational modeling concepts, interactive tutorials with varying levels of complexity, information about  tational modeling concepts, interactive tutorials with varying levels of complexity, information about\n                                tools and what functions they provide to support different stages of the model life cycle. The Jupy-    tools and what functions they provide to support different stages of the model life cycle. The Jupy-    tools and what functions they provide to support different stages of the model life cycle. The Jupy-    tools and what functions they provide to support different stages of the model life cycle. The Jupy-    tools and what functions they provide to support different stages of the model life cycle. The Jupy-    tools and what functions they provide to support different stages of the model life cycle. The Jupy-\n                                terBook framework supports ‘executable’ documentation through the inclusion of interactive Jupyter      terBook framework supports ‘executable’ documentation through the inclusion of interactive Jupyter      terBook framework supports ‘executable’ documentation through the inclusion of interactive Jupyter      terBook framework supports ‘executable’ documentation through the inclusion of interactive Jupyter      terBook framework supports ‘executable’ documentation through the inclusion of interactive Jupyter      terBook framework supports ‘executable’ documentation through the inclusion of interactive Jupyter\n                                notebooks which may be run in the users’ web browser on free services such as OSBv2,                    notebooks which may be run in the users’ web browser on free services such as OSBv2,                    notebooks which may be run in the users’ web browser on free services such as OSBv2,                    notebooks which may be run in the users’ web browser on free services such as OSBv2,                    notebooks which may be run in the users’ web browser on free services such as OSBv2,                    notebooks which may be run in the users’ web browser on free services such as OSBv2,\ninder.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               org\n                                (https://mybinder.org/) and Google Colab (https://colab.research.google.com/). Finally, the machine     (https://mybinder.org/) and Google Colab (https://colab.research.google.com/). Finally, the machine     (https://mybinder.org/) and Google Colab (https://colab.research.google.com/). Finally, the machine     (https://mybinder.org/) and Google Colab (https://colab.research.google.com/). Finally, the machine     (https://mybinder.org/) and Google Colab (https://colab.research.google.com/). Finally, the machine     (https://mybinder.org/) and Google Colab (https://colab.research.google.com/). Finally, the machine\n                                readable nature of the schema and LEMS also enables the automated generation of human readable          readable nature of the schema and LEMS also enables the automated generation of human readable          readable nature of the schema and LEMS also enables the automated generation of human readable          readable nature of the schema and LEMS also enables the automated generation of human readable          readable nature of the schema and LEMS also enables the automated generation of human readable          readable nature of the schema and LEMS also enables the automated generation of human readable\n                                documentation for the standard and low level APIs (Figure  16) along with their examples (https://      documentation for the standard and low level APIs (Figure  16) along with their examples (https://      documentation for the standard and low level APIs (Figure  16) along with their examples (https://      documentation for the standard and low level APIs (Figure  16) along with their examples (https://      documentation for the standard and low level APIs (Figure  16) along with their examples (https://      documentation for the standard and low level APIs (Figure  16) along with their examples (https://\n                                docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual        docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual        docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual        docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual        docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual        docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual\n                                NeuroML software packages each have their own individual documentation (e.g. pyNeuroML (https://        NeuroML software packages each have their own individual documentation (e.g. pyNeuroML (https://        NeuroML software packages each have their own individual documentation (e.g. pyNeuroML (https://        NeuroML software packages each have their own individual documentation (e.g. pyNeuroML (https://        NeuroML software packages each have their own individual documentation (e.g. pyNeuroML (https://        NeuroML software packages each have their own individual documentation (e.g. pyNeuroML (https://\n                                pyneuroml.readthedocs.io/en/stable/,) libNeuroML (https://libneuroml.readthedocs.io/en/stable/)).       pyneuroml.readthedocs.io/en/stable/,) libNeuroML (https://libneuroml.readthedocs.io/en/stable/)).       pyneuroml.readthedocs.io/en/stable/,) libNeuroML (https://libneuroml.readthedocs.io/en/stable/)).       pyneuroml.readthedocs.io/en/stable/,) libNeuroML (https://libneuroml.readthedocs.io/en/stable/)).       pyneuroml.readthedocs.io/en/stable/,) libNeuroML (https://libneuroml.readthedocs.io/en/stable/)).       pyneuroml.readthedocs.io/en/stable/,) libNeuroML (https://libneuroml.readthedocs.io/en/stable/)).\ns with the rest of the NeuroML ecosystem, the documentation is hosted on GitHub (https://\n                                github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions           github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions           github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions           github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions           github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions           github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLifeof 44","md":"# Tools and resources\n\n# Neuroscience\n\nuser scripts. These include NEURON (Hines and Carnevale, 1997) for which the NeuroML tools generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (Stim‐berg et al., 2019) which uses Python scripts.\n\nThe ﬁnal category consists of export options to standardized formats in neuroscience and the wider computational biology ﬁeld, which enable interaction with simulators and applications supporting those formats. These include the PyNN package (Davison et al., 2008), which can be run in either NEURON, NEST (Gewaltig and Diesmann, 2007) or Brian, the SONATA data format (Dai et al., 2020) and the SBML standard (Hucka et al., 2003) (see Reusing NeuroML models for more details).\n\nHaving multiple strategies in place for supporting NeuroML gives more freedom to simulator developers to choose how much they wish to be involved with implementing and supporting NeuroML functionality in their applications, while maximizing the options available for end users.\n\nThe primary tool for simulating NeuroML/LEMS models via different engines is jNeuroML, which is included in pyNeuroML. jNeuroML supports all simulator engine categories (Figure 5). It includes jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simulations to the EDEN simulator (Panagiotou et al., 2022) for direct simulation. Using the export library (https://github.com/NeuroML/org.neuroml.export), jNeuroML can also generate import scripts for simulators (e.g. NetPyNE Dura‐Bernal et al., 2019) or convert NeuroML/LEMS models to simulator specific formats (e.g. NEURON Hines and Carnevale, 1997).\n\nSupporting a new simulation engine that requires translation of NeuroML/LEMS into another format can be done by adding a new ‘writer’ to the org. neuroml. export library. Finally, jNeuroML also includes the org. neuroml. import library that converts from other formats (e.g. SBML Hucka et al., 2003) to LEMS for combination with NeuroML models.\n\nIt is important to note though that not all NeuroML models can be exported to/are supported by each of these target simulators (Table 7). This depends on the capabilities of the simulator in question (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will provide feedback if a feature of the model is not supported in a chosen environment.\n\nAll NeuroML and LEMS software packages are made available under FOSS licenses. The source code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub organization (https://github.com/NeuroML). The NeuroML Python API (https://github.com/NeuralEnsemble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as PyNN (Davison et al., 2008), Neo (Garcia et al., 2014) and Elephant (Denker, 2018). LEMS packages are available from the LEMS GitHub organization (https://github.com/LEMS).\n\nTo ensure replication and reproduction of studies, it is important to note the exact versions of software used in studies. For NeuroML and LEMS packages, archives of each release along with citations are published on Zenodo (https://zenodo.org) to enable researchers to cite them in their work (Gleeson, 2021; Gleeson, 2024a; Gleeson et al., 2019b; Gleeson, 2024b; Sinha, 2024).\n\n# Documentation\n\nA standard and its accompanying software ecosystem must be supported by comprehensive documentation if it is to be of use to the research community. The primary NeuroML documentation for users that accompanies this paper has been consolidated into a JupyterBook (Executable Books Community, 2020) at https://docs.neuroml.org. This includes explanations of NeuroML and computational modeling concepts, interactive tutorials with varying levels of complexity, information about tools and what functions they provide to support different stages of the model life cycle. The JupyterBook framework supports ‘executable’ documentation through the inclusion of interactive Jupyter notebooks which may be run in the users’ web browser on free services such as OSBv2, https://mybinder.org/ and Google Colab (https://colab.research.google.com/).\n\nFinally, the machine readable nature of the schema and LEMS also enables the automated generation of human readable documentation for the standard and low level APIs (Figure 16) along with their examples (https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual NeuroML software packages each have their own individual documentation (e.g. pyNeuroML (https://pyneuroml.readthedocs.io/en/stable/), libNeuroML (https://libneuroml.readthedocs.io/en/stable/)).\n\nAs with the rest of the NeuroML ecosystem, the documentation is hosted on GitHub (https://github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions are welcome.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"user scripts. These include NEURON (Hines and Carnevale, 1997) for which the NeuroML tools generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (Stim‐berg et al., 2019) which uses Python scripts.\n\nThe ﬁnal category consists of export options to standardized formats in neuroscience and the wider computational biology ﬁeld, which enable interaction with simulators and applications supporting those formats. These include the PyNN package (Davison et al., 2008), which can be run in either NEURON, NEST (Gewaltig and Diesmann, 2007) or Brian, the SONATA data format (Dai et al., 2020) and the SBML standard (Hucka et al., 2003) (see Reusing NeuroML models for more details).\n\nHaving multiple strategies in place for supporting NeuroML gives more freedom to simulator developers to choose how much they wish to be involved with implementing and supporting NeuroML functionality in their applications, while maximizing the options available for end users.\n\nThe primary tool for simulating NeuroML/LEMS models via different engines is jNeuroML, which is included in pyNeuroML. jNeuroML supports all simulator engine categories (Figure 5). It includes jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simulations to the EDEN simulator (Panagiotou et al., 2022) for direct simulation. Using the export library (https://github.com/NeuroML/org.neuroml.export), jNeuroML can also generate import scripts for simulators (e.g. NetPyNE Dura‐Bernal et al., 2019) or convert NeuroML/LEMS models to simulator specific formats (e.g. NEURON Hines and Carnevale, 1997).\n\nSupporting a new simulation engine that requires translation of NeuroML/LEMS into another format can be done by adding a new ‘writer’ to the org. neuroml. export library. Finally, jNeuroML also includes the org. neuroml. import library that converts from other formats (e.g. SBML Hucka et al., 2003) to LEMS for combination with NeuroML models.\n\nIt is important to note though that not all NeuroML models can be exported to/are supported by each of these target simulators (Table 7). This depends on the capabilities of the simulator in question (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will provide feedback if a feature of the model is not supported in a chosen environment.\n\nAll NeuroML and LEMS software packages are made available under FOSS licenses. The source code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub organization (https://github.com/NeuroML). The NeuroML Python API (https://github.com/NeuralEnsemble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as PyNN (Davison et al., 2008), Neo (Garcia et al., 2014) and Elephant (Denker, 2018). LEMS packages are available from the LEMS GitHub organization (https://github.com/LEMS).\n\nTo ensure replication and reproduction of studies, it is important to note the exact versions of software used in studies. For NeuroML and LEMS packages, archives of each release along with citations are published on Zenodo (https://zenodo.org) to enable researchers to cite them in their work (Gleeson, 2021; Gleeson, 2024a; Gleeson et al., 2019b; Gleeson, 2024b; Sinha, 2024).","md":"user scripts. These include NEURON (Hines and Carnevale, 1997) for which the NeuroML tools generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (Stim‐berg et al., 2019) which uses Python scripts.\n\nThe ﬁnal category consists of export options to standardized formats in neuroscience and the wider computational biology ﬁeld, which enable interaction with simulators and applications supporting those formats. These include the PyNN package (Davison et al., 2008), which can be run in either NEURON, NEST (Gewaltig and Diesmann, 2007) or Brian, the SONATA data format (Dai et al., 2020) and the SBML standard (Hucka et al., 2003) (see Reusing NeuroML models for more details).\n\nHaving multiple strategies in place for supporting NeuroML gives more freedom to simulator developers to choose how much they wish to be involved with implementing and supporting NeuroML functionality in their applications, while maximizing the options available for end users.\n\nThe primary tool for simulating NeuroML/LEMS models via different engines is jNeuroML, which is included in pyNeuroML. jNeuroML supports all simulator engine categories (Figure 5). It includes jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simulations to the EDEN simulator (Panagiotou et al., 2022) for direct simulation. Using the export library (https://github.com/NeuroML/org.neuroml.export), jNeuroML can also generate import scripts for simulators (e.g. NetPyNE Dura‐Bernal et al., 2019) or convert NeuroML/LEMS models to simulator specific formats (e.g. NEURON Hines and Carnevale, 1997).\n\nSupporting a new simulation engine that requires translation of NeuroML/LEMS into another format can be done by adding a new ‘writer’ to the org. neuroml. export library. Finally, jNeuroML also includes the org. neuroml. import library that converts from other formats (e.g. SBML Hucka et al., 2003) to LEMS for combination with NeuroML models.\n\nIt is important to note though that not all NeuroML models can be exported to/are supported by each of these target simulators (Table 7). This depends on the capabilities of the simulator in question (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will provide feedback if a feature of the model is not supported in a chosen environment.\n\nAll NeuroML and LEMS software packages are made available under FOSS licenses. The source code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub organization (https://github.com/NeuroML). The NeuroML Python API (https://github.com/NeuralEnsemble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as PyNN (Davison et al., 2008), Neo (Garcia et al., 2014) and Elephant (Denker, 2018). LEMS packages are available from the LEMS GitHub organization (https://github.com/LEMS).\n\nTo ensure replication and reproduction of studies, it is important to note the exact versions of software used in studies. For NeuroML and LEMS packages, archives of each release along with citations are published on Zenodo (https://zenodo.org) to enable researchers to cite them in their work (Gleeson, 2021; Gleeson, 2024a; Gleeson et al., 2019b; Gleeson, 2024b; Sinha, 2024).","bBox":{"x":168.53,"y":34.63,"w":416,"h":588.23}},{"type":"heading","lvl":1,"value":"Documentation","md":"# Documentation","bBox":{"x":168.53,"y":513.31,"w":87,"h":12}},{"type":"text","value":"A standard and its accompanying software ecosystem must be supported by comprehensive documentation if it is to be of use to the research community. The primary NeuroML documentation for users that accompanies this paper has been consolidated into a JupyterBook (Executable Books Community, 2020) at https://docs.neuroml.org. This includes explanations of NeuroML and computational modeling concepts, interactive tutorials with varying levels of complexity, information about tools and what functions they provide to support different stages of the model life cycle. The JupyterBook framework supports ‘executable’ documentation through the inclusion of interactive Jupyter notebooks which may be run in the users’ web browser on free services such as OSBv2, https://mybinder.org/ and Google Colab (https://colab.research.google.com/).\n\nFinally, the machine readable nature of the schema and LEMS also enables the automated generation of human readable documentation for the standard and low level APIs (Figure 16) along with their examples (https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual NeuroML software packages each have their own individual documentation (e.g. pyNeuroML (https://pyneuroml.readthedocs.io/en/stable/), libNeuroML (https://libneuroml.readthedocs.io/en/stable/)).\n\nAs with the rest of the NeuroML ecosystem, the documentation is hosted on GitHub (https://github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions are welcome.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"A standard and its accompanying software ecosystem must be supported by comprehensive documentation if it is to be of use to the research community. The primary NeuroML documentation for users that accompanies this paper has been consolidated into a JupyterBook (Executable Books Community, 2020) at https://docs.neuroml.org. This includes explanations of NeuroML and computational modeling concepts, interactive tutorials with varying levels of complexity, information about tools and what functions they provide to support different stages of the model life cycle. The JupyterBook framework supports ‘executable’ documentation through the inclusion of interactive Jupyter notebooks which may be run in the users’ web browser on free services such as OSBv2, https://mybinder.org/ and Google Colab (https://colab.research.google.com/).\n\nFinally, the machine readable nature of the schema and LEMS also enables the automated generation of human readable documentation for the standard and low level APIs (Figure 16) along with their examples (https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual NeuroML software packages each have their own individual documentation (e.g. pyNeuroML (https://pyneuroml.readthedocs.io/en/stable/), libNeuroML (https://libneuroml.readthedocs.io/en/stable/)).\n\nAs with the rest of the NeuroML ecosystem, the documentation is hosted on GitHub (https://github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions are welcome.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":220.77,"w":412.84,"h":498.65}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/NeuroML/org.neuroml.export","text":""},{"url":"https://github.com/NeuroML/jNeuroML","text":""},{"url":"https://github.com/NeuroML","text":""},{"url":"https://github.com/NeuralEnsemble/libNeuroML","text":""},{"url":"https://github.com/NeuralEnsemble/libNeuroML","text":"semble/libNeuroML) was developed in collaboration with the NeuralEnsemble initiative (https://"},{"url":"https://github.com/NeuralEnsemble/","text":" "},{"url":"https://github.com/NeuralEnsemble/","text":"github.com/NeuralEnsemble/), which also maintains other commonly used Python packages such as "},{"url":"https://github.com/LEMS","text":""},{"url":"https://zenodo.org/","text":""},{"url":"https://docs.neuroml.org/","text":""},{"url":"https://mybinder.org/","text":""},{"url":"https://colab.research.google.com/","text":""},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell","text":" "},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell","text":"docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). In addition, the individual "},{"url":"https://pyneuroml.readthedocs.io/en/stable/","text":""},{"url":"https://pyneuroml.readthedocs.io/en/stable/","text":"pyneuroml.readthedocs.io/en/stable/,) libNeuroML (https://libneuroml.readthedocs.io/en/stable/))."},{"url":"https://libneuroml.readthedocs.io/en/stable/","text":""},{"url":"https://github.com/NeuroML/Documentation","text":" "},{"url":"https://github.com/NeuroML/Documentation","text":"github.com/NeuroML/Documentation), licensed under a FOSS license, and community contributions "}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.193},{"page":37,"text":"                Tools  and  resources                                                                                                                                                         Neuroscience\n                                                                                                                                       0 & {: @ Q                           proximalDetails\n                                                                                                                                                                            distalDetails\n                                                         hindmarshRose1984Cell                                                                                              morphology\n                                                                                                                                                                            specificCapacitance\n                                                         extendsbaseCellMembPotCap                                                                                          initMembPotential\n                                                                                                                                                                            spike Thresh\n                                                         The Hindmarsh Rose model is a simplified   cell model which captures complex firing patterns of single             membraneProperties\n                                                                                               point\n                                                         neurons, such as periodic and chaotic bursting: It has a fast spiking subsystem, which is a generalization of the  membraneProperties2CaPools\n                                                         FitzHugh-Nagumo system, coupled to a slower subsystem which allows the model tofirebursts. The dynamical           biophysicalProperties\n                                                         variables x, Y, 2 correspond to the membrane potential,a recovery variable, and a slower adaptation current;       biophysicalProperties2CaPools\n                                                         respectively. See Hindmarsh J. L, and Rose R. M: ( 1984 ) A model of neuronal bursting using three coupled         intracellularProperties\n                                                         first order differential equations. Proc R_Soc. London, Ser: B 221.87-102.                                         intracellularProperties2CaPools\n                                                                                                                                                                            resistivity\n                                                            Parameters       Constants    Exposures       Event Ports      Attachments      Dynamics                        concentrationModel\n                                                           Schema       Usage: Python                                                                                       decayingPoolConcentrationModel\n                                                                                                                                                                            fixedFactorConcentrationModel\n                                                         State Variables                                                                                                    fixedFactorConcentrationModelTraub\n                                                             v: voltage (exposed as v)                                                                                      species\n                                                                                                                                                                            cell\n                                                             y: Dimensionless  (exposed as y)                                                                               cell2caPools\n                                                             z: Dimensionless  (exposed as 2)                                                                               baseCellMembPotCap\n                                                                                                                                                                            baselaf\n                                                             spiking: Dimensionless (exposed as spiking)                                                                    iafTauCell\n                                                                                                                                                                            iafTauRefCell\n                                                         On Start                                                                                                           baselafcapCell\n                                                             V =XO  v_scaling                                                                                               iafCell\n                                                             y=yO                                                                                                           iafRefCell\n                                                                                                                                                                            izhikevichCell\n                                                             2 = Z0                                                                                                         izhikevich2oo7Cell\n                                                         On Conditions                                                                                                      adExlaFCell\n                                                             IF v > 0 AND spiking < 0.5 THEN                                                                                fitzHughNagumoCell\n                                                                                                                                                                            pinskyRinzelCA3Cell\n                                                                   spiking = 1                                                                                              hindmarshRose1984Cell\n                                                                   EVENT OUT on port: spike\n                                                             IFv < 0 THEN\n                                                                   spiking = 0\n                                                         Derived Variables\n                                                            iSyn = synapses[*]->i(reduce method: add) (exposed as iSyn)\n                                                             x=V /v_scaling  (exposed as x)\n                                                             phi = Y - a x^3 + b *x^2 (exposed as phi)\n                                                             chi = € -d*x2-y    (exposed as chi)\n                                                             rho = $ * (X-Xl ) - 2 (exposed as rho)\n                                                             iMemb = (C   (v_scaling (phi 2) / MSEC)) + iSyn (exposed as iMemb)\n                                                         Time Derivatives\n                                                             d v Idt = iMembIC\n                                                             dy Idt = chi MSEC\n                                                             d 2 Idt =r rho MSEC\n                                                         Previous                                                                                                     Next\n                                                         NeuroMLCoreCompTypes                                                                                     Channels\n                                                    Figure 16. Documentation for the HindmarshRose1984Cell NeuroMLv2 ComponentType                                                     generated from the\n                                                   XSD schema and LEMS definitions on the NeuroML documentation website showing its dynamics (https://docs.\n                                                   neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). More information about the ComponentType\n                                                   can be obtained from the tabs provided.\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                 37 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nThe Hindmarsh Rose model is a simplified cell model which captures complex firing patterns of single point neurons, such as periodic and chaotic bursting: It has a fast spiking subsystem, which is a generalization of the FitzHugh-Nagumo system, coupled to a slower subsystem which allows the model to fire bursts. The dynamical variables x, y, z correspond to the membrane potential, a recovery variable, and a slower adaptation current; respectively. See Hindmarsh J. L, and Rose R. M: (1984) A model of neuronal bursting using three coupled first order differential equations. Proc R_Soc. London, Ser: B 221.87-102.\n\n| Parameters | Constants     | Exposures | Event Ports | Attachments | Dynamics |\n| ---------- | ------------- | --------- | ----------- | ----------- | -------- |\n| Schema     | Usage: Python |           |             |             |          |\n\n# State Variables\n\n- v: voltage (exposed as v)\n- y: Dimensionless (exposed as y)\n- z: Dimensionless (exposed as 2)\n- spiking: Dimensionless (exposed as spiking)\n\n# On Start\n\n- V = XO v_scaling\n- y = yO\n- 2 = Z0\n\n# On Conditions\n\n- IF v > 0 AND spiking < 0.5 THEN\n- - spiking = 1\n- EVENT OUT on port: spike\n\nIF v < 0 THEN\n\n# Derived Variables\n\n- iSyn = synapses[*]->i(reduce method: add) (exposed as iSyn)\n- x = V / v_scaling (exposed as x)\n- phi = Y - a x^3 + b * x^2 (exposed as phi)\n- chi = € - d * x^2 - y (exposed as chi)\n- rho = $ * (X - Xl) - 2 (exposed as rho)\n- iMemb = (C (v_scaling (phi^2) / MSEC)) + iSyn (exposed as iMemb)\n\n# Time Derivatives\n\n- d v / dt = iMemb IC\n- dy / dt = chi MSEC\n- d 2 / dt = r rho MSEC\n\n# Previous\n\n# Next\n\nNeuroMLCoreCompTypes\n\nFigure 16. Documentation for the HindmarshRose1984Cell NeuroMLv2 ComponentType generated from the XSD schema and LEMS definitions on the NeuroML documentation website showing its dynamics (https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). More information about the ComponentType can be obtained from the tabs provided.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[{"name":"img_p36_1.png","height":2168,"width":1498,"x":174.651123,"y":60.125,"original_width":1498,"original_height":2168,"ocr":[{"x":1171,"y":0,"w":141,"h":24,"confidence":0.9998660075319689,"text":"proximalDetails"},{"x":874,"y":8,"w":252,"h":50,"confidence":0.15263046990905002,"text":"0 & {: @ Q"},{"x":1172,"y":36,"w":112,"h":24,"confidence":0.9994011302888772,"text":"distalDetails"},{"x":1170,"y":67,"w":113,"h":36,"confidence":0.9834912423178462,"text":"morphology"},{"x":30,"y":90,"w":488,"h":48,"confidence":0.9797964754920467,"text":"hindmarshRose1984Cell"},{"x":1172,"y":110,"w":180,"h":26,"confidence":0.7910052215332196,"text":"specificCapacitance"},{"x":1172,"y":148,"w":162,"h":24,"confidence":0.7747652582967063,"text":"initMembPotential"},{"x":32,"y":168,"w":82,"h":24,"confidence":0.9999977020984561,"text":"extends"},{"x":112,"y":161,"w":227,"h":36,"confidence":0.9422431529247645,"text":"baseCellMembPotCap"},{"x":1172,"y":186,"w":114,"h":28,"confidence":0.9784281857733589,"text":"spike Thresh"},{"x":34,"y":224,"w":412,"h":31,"confidence":0.6638661708678975,"text":"The Hindmarsh Rose model is a simplified"},{"x":498,"y":224,"w":568,"h":31,"confidence":0.6582325066924231,"text":"cell model which captures complex firing patterns of single"},{"x":1172,"y":226,"w":190,"h":24,"confidence":0.9959724238540144,"text":"membraneProperties"},{"x":32,"y":260,"w":1072,"h":33,"confidence":0.546627771333961,"text":"neurons, such as periodic and chaotic bursting: It has a fast spiking subsystem, which is a generalization of the"},{"x":1171,"y":261,"w":274,"h":26,"confidence":0.6881987901711887,"text":"membraneProperties2CaPools"},{"x":32,"y":296,"w":820,"h":32,"confidence":0.8514691504646549,"text":"FitzHugh-Nagumo system, coupled to a slower subsystem which allows the model to"},{"x":888,"y":296,"w":222,"h":30,"confidence":0.9147848466942975,"text":"bursts. The dynamical"},{"x":1171,"y":299,"w":192,"h":26,"confidence":0.9053202171535665,"text":"biophysicalProperties"},{"x":32,"y":334,"w":532,"h":30,"confidence":0.5626381886741368,"text":"variables x, Y, 2 correspond to the membrane potential,"},{"x":568,"y":332,"w":508,"h":31,"confidence":0.7700074391125106,"text":"a recovery variable, and a slower adaptation current;"},{"x":1171,"y":337,"w":278,"h":26,"confidence":0.7295980380565005,"text":"biophysicalProperties2CaPools"},{"x":30,"y":370,"w":302,"h":27,"confidence":0.6948820206059546,"text":"respectively. See Hindmarsh J."},{"x":338,"y":367,"w":749,"h":33,"confidence":0.741372375345659,"text":"L, and Rose R. M: ( 1984 ) A model of neuronal bursting using three coupled"},{"x":1172,"y":376,"w":196,"h":26,"confidence":0.9999550076772605,"text":"intracellularProperties"},{"x":30,"y":404,"w":364,"h":29,"confidence":0.9300887014676652,"text":"first order differential equations. Proc"},{"x":401,"y":407,"w":20,"h":22,"confidence":0.7422064350659934,"text":"R_"},{"x":428,"y":404,"w":322,"h":28,"confidence":0.6208107826349532,"text":"Soc. London, Ser: B 221.87-102."},{"x":1172,"y":412,"w":282,"h":26,"confidence":0.9001953811581531,"text":"intracellularProperties2CaPools"},{"x":1171,"y":449,"w":89,"h":27,"confidence":0.7648675644820999,"text":"resistivity"},{"x":60,"y":480,"w":124,"h":26,"confidence":0.9999894070296571,"text":"Parameters"},{"x":231,"y":479,"w":113,"h":28,"confidence":0.999982952998944,"text":"Constants"},{"x":391,"y":479,"w":119,"h":32,"confidence":0.9999874829854282,"text":"Exposures"},{"x":558,"y":480,"w":126,"h":26,"confidence":0.9999586709291998,"text":"Event Ports"},{"x":734,"y":480,"w":136,"h":26,"confidence":0.9999624551653863,"text":"Attachments"},{"x":920,"y":480,"w":108,"h":28,"confidence":0.9999829726131545,"text":"Dynamics"},{"x":1171,"y":488,"w":178,"h":24,"confidence":0.999901867950956,"text":"concentrationModel"},{"x":1172,"y":526,"w":300,"h":28,"confidence":0.9587082692772461,"text":"decayingPoolConcentrationModel"},{"x":57,"y":542,"w":91,"h":29,"confidence":0.9999900232561383,"text":"Schema"},{"x":196,"y":543,"w":158,"h":31,"confidence":0.9701499053310173,"text":"Usage: Python"},{"x":1170,"y":564,"w":282,"h":24,"confidence":0.9937623117932315,"text":"fixedFactorConcentrationModel"},{"x":32,"y":608,"w":160,"h":26,"confidence":0.9999758992180583,"text":"State Variables"},{"x":1170,"y":600,"w":328,"h":26,"confidence":0.9888372385710493,"text":"fixedFactorConcentrationModelTraub"},{"x":72,"y":650,"w":100,"h":28,"confidence":0.9563052459308362,"text":"v: voltage"},{"x":194,"y":650,"w":150,"h":26,"confidence":0.876517553192421,"text":"(exposed as v)"},{"x":1171,"y":638,"w":75,"h":28,"confidence":0.9999772912510915,"text":"species"},{"x":1172,"y":678,"w":36,"h":24,"confidence":0.9994680360107827,"text":"cell"},{"x":72,"y":710,"w":172,"h":28,"confidence":0.9993521661646626,"text":"y: Dimensionless"},{"x":264,"y":710,"w":152,"h":28,"confidence":0.7939182629735925,"text":"(exposed as y)"},{"x":1172,"y":716,"w":122,"h":24,"confidence":0.851251603942549,"text":"cell2caPools"},{"x":1171,"y":750,"w":203,"h":28,"confidence":0.7717595910488084,"text":"baseCellMembPotCap"},{"x":72,"y":770,"w":172,"h":26,"confidence":0.661524230913944,"text":"z: Dimensionless"},{"x":264,"y":772,"w":148,"h":26,"confidence":0.9705709005017158,"text":"(exposed as 2)"},{"x":1172,"y":790,"w":74,"h":24,"confidence":0.9999885555322746,"text":"baselaf"},{"x":72,"y":832,"w":236,"h":28,"confidence":0.8890843748233861,"text":"spiking: Dimensionless"},{"x":328,"y":832,"w":216,"h":28,"confidence":0.525032976993642,"text":"(exposed as spiking)"},{"x":1170,"y":828,"w":94,"h":24,"confidence":0.9953977128092159,"text":"iafTauCell"},{"x":1170,"y":866,"w":126,"h":24,"confidence":0.9974928772640124,"text":"iafTauRefCell"},{"x":32,"y":894,"w":94,"h":24,"confidence":0.999924893147639,"text":"On Start"},{"x":1171,"y":900,"w":143,"h":29,"confidence":0.9819811603464322,"text":"baselafcapCell"},{"x":74,"y":934,"w":66,"h":24,"confidence":0.5675729730142814,"text":"V =XO"},{"x":152,"y":934,"w":98,"h":28,"confidence":0.7666711841314873,"text":"v_scaling"},{"x":1170,"y":940,"w":64,"h":24,"confidence":0.9733491116270213,"text":"iafCell"},{"x":1171,"y":981,"w":92,"h":20,"confidence":0.9801818648420577,"text":"iafRefCell"},{"x":72,"y":994,"w":68,"h":28,"confidence":0.3616531491279602,"text":"y=yO"},{"x":1172,"y":1016,"w":126,"h":26,"confidence":0.9459445018892602,"text":"izhikevichCell"},{"x":74,"y":1056,"w":64,"h":24,"confidence":0.6984230869780543,"text":"2 = Z0"},{"x":1171,"y":1053,"w":168,"h":24,"confidence":0.7617026508624117,"text":"izhikevich2oo7Cell"},{"x":1171,"y":1091,"w":114,"h":24,"confidence":0.9998371337479807,"text":"adExlaFCell"},{"x":32,"y":1113,"w":155,"h":27,"confidence":0.6094772505443143,"text":"On Conditions"},{"x":1170,"y":1130,"w":188,"h":26,"confidence":0.8378398120273781,"text":"fitzHughNagumoCell"},{"x":72,"y":1154,"w":326,"h":30,"confidence":0.571836055438767,"text":"IF v > 0 AND spiking < 0.5 THEN"},{"x":1172,"y":1168,"w":188,"h":26,"confidence":0.5436731257414442,"text":"pinskyRinzelCA3Cell"},{"x":1172,"y":1204,"w":222,"h":24,"confidence":0.8160035277742874,"text":"hindmarshRose1984Cell"},{"x":136,"y":1218,"w":120,"h":28,"confidence":0.926010858473166,"text":"spiking = 1"},{"x":138,"y":1276,"w":272,"h":28,"confidence":0.6862429097753915,"text":"EVENT OUT on port: spike"},{"x":72,"y":1336,"w":144,"h":26,"confidence":0.8312557349329858,"text":"IFv < 0 THEN"},{"x":136,"y":1400,"w":120,"h":28,"confidence":0.9850051569372665,"text":"spiking = 0"},{"x":32,"y":1460,"w":188,"h":26,"confidence":0.8028841253471877,"text":"Derived Variables"},{"x":70,"y":1500,"w":424,"h":28,"confidence":0.9718587392505903,"text":"iSyn = synapses[*]->i(reduce method: add)"},{"x":510,"y":1500,"w":184,"h":28,"confidence":0.7288174584444791,"text":"(exposed as iSyn)"},{"x":71,"y":1558,"w":165,"h":32,"confidence":0.77944156648936,"text":"x=V /v_scaling"},{"x":250,"y":1562,"w":150,"h":26,"confidence":0.7922757195916881,"text":"(exposed as x)"},{"x":72,"y":1622,"w":108,"h":28,"confidence":0.6241646884359348,"text":"phi = Y - a"},{"x":190,"y":1622,"w":132,"h":26,"confidence":0.2375403678930539,"text":"x^3 + b *x^2"},{"x":336,"y":1622,"w":174,"h":30,"confidence":0.9249077403483793,"text":"(exposed as phi)"},{"x":72,"y":1679,"w":190,"h":33,"confidence":0.75060270039813,"text":"chi = € -d*x2-y"},{"x":276,"y":1684,"w":170,"h":26,"confidence":0.942722569686481,"text":"(exposed as chi)"},{"x":72,"y":1744,"w":207,"h":26,"confidence":0.1729960700829302,"text":"rho = $ * (X-Xl ) - 2"},{"x":294,"y":1740,"w":175,"h":30,"confidence":0.9469974356002826,"text":"(exposed as rho)"},{"x":72,"y":1804,"w":124,"h":26,"confidence":0.7032120254969714,"text":"iMemb = (C"},{"x":208,"y":1806,"w":106,"h":28,"confidence":0.9320924865048609,"text":"(v_scaling"},{"x":328,"y":1804,"w":44,"h":28,"confidence":0.9999786615371704,"text":"(phi"},{"x":382,"y":1804,"w":188,"h":30,"confidence":0.67305867040508,"text":"2) / MSEC)) + iSyn"},{"x":584,"y":1804,"w":208,"h":28,"confidence":0.9583932698299674,"text":"(exposed as iMemb)"},{"x":32,"y":1864,"w":177,"h":26,"confidence":0.9493423591247425,"text":"Time Derivatives"},{"x":72,"y":1904,"w":178,"h":26,"confidence":0.417000132585209,"text":"d v Idt = iMembIC"},{"x":72,"y":1966,"w":120,"h":28,"confidence":0.9622164866525095,"text":"dy Idt = chi"},{"x":204,"y":1964,"w":68,"h":26,"confidence":0.7059096192628833,"text":"MSEC"},{"x":74,"y":2028,"w":98,"h":24,"confidence":0.667782539575723,"text":"d 2 Idt =r"},{"x":182,"y":2028,"w":40,"h":24,"confidence":0.9977401812813839,"text":"rho"},{"x":234,"y":2026,"w":68,"h":26,"confidence":0.9999139308929443,"text":"MSEC"},{"x":30,"y":2112,"w":92,"h":24,"confidence":0.7038148451200312,"text":"Previous"},{"x":1064,"y":2112,"w":50,"h":24,"confidence":0.9999956284136424,"text":"Next"},{"x":30,"y":2135,"w":301,"h":33,"confidence":0.8922967154452093,"text":"NeuroMLCoreCompTypes"},{"x":1000,"y":2140,"w":112,"h":26,"confidence":0.9999670830869065,"text":"Channels"},{"x":442.4789396203098,"y":227.4141973545267,"w":58.042120759380396,"h":22.171605290946616,"confidence":0.999988537909022,"text":"point"},{"x":853.2307692307693,"y":297.15384615384613,"w":32.53846153846143,"h":27.692307692307736,"confidence":0.912386726312174,"text":"fire"}]}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"The Hindmarsh Rose model is a simplified cell model which captures complex firing patterns of single point neurons, such as periodic and chaotic bursting: It has a fast spiking subsystem, which is a generalization of the FitzHugh-Nagumo system, coupled to a slower subsystem which allows the model to fire bursts. The dynamical variables x, y, z correspond to the membrane potential, a recovery variable, and a slower adaptation current; respectively. See Hindmarsh J. L, and Rose R. M: (1984) A model of neuronal bursting using three coupled first order differential equations. Proc R_Soc. London, Ser: B 221.87-102.","md":"The Hindmarsh Rose model is a simplified cell model which captures complex firing patterns of single point neurons, such as periodic and chaotic bursting: It has a fast spiking subsystem, which is a generalization of the FitzHugh-Nagumo system, coupled to a slower subsystem which allows the model to fire bursts. The dynamical variables x, y, z correspond to the membrane potential, a recovery variable, and a slower adaptation current; respectively. See Hindmarsh J. L, and Rose R. M: (1984) A model of neuronal bursting using three coupled first order differential equations. Proc R_Soc. London, Ser: B 221.87-102.","bBox":{"x":182,"y":114,"w":283,"h":115}},{"type":"table","rows":[["Parameters","Constants","Exposures","Event Ports","Attachments","Dynamics"],["Schema","Usage: Python","","","",""]],"md":"| Parameters | Constants     | Exposures | Event Ports | Attachments | Dynamics |\n| ---------- | ------------- | --------- | ----------- | ----------- | -------- |\n| Schema     | Usage: Python |           |             |             |          |","isPerfectTable":true,"csv":"\"Parameters\",\"Constants\",\"Exposures\",\"Event Ports\",\"Attachments\",\"Dynamics\"\n\"Schema\",\"Usage: Python\",\"\",\"\",\"\",\"\"","bBox":{"x":37.01,"y":34.63,"w":539.68,"h":720.13}},{"type":"heading","lvl":1,"value":"State Variables","md":"# State Variables","bBox":{"x":182,"y":206,"w":38,"h":6}},{"type":"text","value":"- v: voltage (exposed as v)\n- y: Dimensionless (exposed as y)\n- z: Dimensionless (exposed as 2)\n- spiking: Dimensionless (exposed as spiking)","md":"- v: voltage (exposed as v)\n- y: Dimensionless (exposed as y)\n- z: Dimensionless (exposed as 2)\n- spiking: Dimensionless (exposed as spiking)","bBox":{"x":192,"y":216,"w":113,"h":51}},{"type":"heading","lvl":1,"value":"On Start","md":"# On Start","bBox":{"x":182,"y":275,"w":23,"h":6}},{"type":"text","value":"- V = XO v_scaling\n- y = yO\n- 2 = Z0","md":"- V = XO v_scaling\n- y = yO\n- 2 = Z0","bBox":{"x":192,"y":284,"w":43,"h":35}},{"type":"heading","lvl":1,"value":"On Conditions","md":"# On Conditions","bBox":{"x":182,"y":327,"w":37,"h":6}},{"type":"text","value":"- IF v > 0 AND spiking < 0.5 THEN\n- - spiking = 1\n- EVENT OUT on port: spike\n\nIF v < 0 THEN","md":"- IF v > 0 AND spiking < 0.5 THEN\n- - spiking = 1\n- EVENT OUT on port: spike\n\nIF v < 0 THEN","bBox":{"x":192,"y":337,"w":81,"h":50}},{"type":"heading","lvl":1,"value":"Derived Variables","md":"# Derived Variables","bBox":{"x":182,"y":410,"w":45,"h":6}},{"type":"text","value":"- iSyn = synapses[*]->i(reduce method: add) (exposed as iSyn)\n- x = V / v_scaling (exposed as x)\n- phi = Y - a x^3 + b * x^2 (exposed as phi)\n- chi = € - d * x^2 - y (exposed as chi)\n- rho = $ * (X - Xl) - 2 (exposed as rho)\n- iMemb = (C (v_scaling (phi^2) / MSEC)) + iSyn (exposed as iMemb)","md":"- iSyn = synapses[*]->i(reduce method: add) (exposed as iSyn)\n- x = V / v_scaling (exposed as x)\n- phi = Y - a x^3 + b * x^2 (exposed as phi)\n- chi = € - d * x^2 - y (exposed as chi)\n- rho = $ * (X - Xl) - 2 (exposed as rho)\n- iMemb = (C (v_scaling (phi^2) / MSEC)) + iSyn (exposed as iMemb)","bBox":{"x":191,"y":284,"w":174,"h":216}},{"type":"heading","lvl":1,"value":"Time Derivatives","md":"# Time Derivatives","bBox":{"x":182,"y":507,"w":42,"h":6}},{"type":"text","value":"- d v / dt = iMemb IC\n- dy / dt = chi MSEC\n- d 2 / dt = r rho MSEC","md":"- d v / dt = iMemb IC\n- dy / dt = chi MSEC\n- d 2 / dt = r rho MSEC","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"heading","lvl":1,"value":"Previous","md":"# Previous","bBox":{"x":182,"y":567,"w":22,"h":6}},{"type":"heading","lvl":1,"value":"Next","md":"# Next","bBox":{"x":430,"y":567,"w":12,"h":6}},{"type":"text","value":"NeuroMLCoreCompTypes\n\nFigure 16. Documentation for the HindmarshRose1984Cell NeuroMLv2 ComponentType generated from the XSD schema and LEMS definitions on the NeuroML documentation website showing its dynamics (https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). More information about the ComponentType can be obtained from the tabs provided.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"NeuroMLCoreCompTypes\n\nFigure 16. Documentation for the HindmarshRose1984Cell NeuroMLv2 ComponentType generated from the XSD schema and LEMS definitions on the NeuroML documentation website showing its dynamics (https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). More information about the ComponentType can be obtained from the tabs provided.\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":82,"w":408.16,"h":551.35}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell","text":""},{"url":"https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell","text":"neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell). More information about the ComponentType "}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.733},{"page":38,"text":"          Tools  and  resources\n                                to it are welcomed. A PDF version of the documentation can also be downloaded for ofﬂine use\n                                (https://docs.neuroml.org/_static/ﬁles/neuroml-documentation.pdf).\n                                Maintenance of the Schema and core software\n                                The NeuroML Scientiﬁc Committee (https://docs.neuroml.org/NeuroMLOrg/ScientiﬁcCommittee.\n                                html) and the elected NeuroML Editorial Board (https://docs.neuroml.org/NeuroMLOrg/Board.html)\n                                oversee the standard, the core tools, and the initiative. The Scientiﬁc Committee sets the scientiﬁc\n                                focus of the NeuroML initiative. It ensures that the standard represents the state of the art—that it\n                                can encapsulate the latest knowledge in neuronal anatomy and physiology in their corresponding\n                                model components. The Scientiﬁc Committee also deﬁnes the governance structure of the initiative\n                                and works with the wider scientiﬁc community to gather feedback on NeuroML and promote its use.\n                                The Editorial Board manages the day- to-\n\n                                schema, the core software tools, and critical resources such as the documentation. The Editorial Board\n                                works with simulator developers in the extended ecosystem to help make tools NeuroML compliant\n                                by testing reference implementations and answering technical queries about NeuroML and the core\n                                software tools.\n                                Acknowledgements\n                                We thank all the members of the NeuroML Community who have contributed to the development\n                                of the standard over the years, have added support for the language to their applications, or who\n                                have converted published models to NeuroML. We would particularly like to thank the following for\n                                contributions to the NeuroML Scientiﬁc Committee: Upi Bhalla, Avrama Blackwell, Hugo Cornells,\n                                Robert McDougal, Lyle Graham, Cengiz Gunay, and Michael Hines. The following have also contrib-\n                                uted to developments related to the named tools/simulators/resources: EDEN - Mario Negrello and\n                                Christos Strydis, SONATA - Anton Arkhipov and Kael Dai, MOOSE - Subhasis Ray, NeuroML-\n                                Justas Birgiolas, NeuroMorpho.Org - Giorgio Ascoli, N2A - Fred Rothganger, pyLEMS - Gautham\n                                Ganapathy, MDF - Manifest Chakalov, libNeuroML and NeuroTune - Mike Vella, Open Source Brain\n                                - Matt Earnshaw, Adrian Quintana and Eugenio Piasini, SciUnit/NeuronUnit - Richard C Gerkin, Brian -\n                                Marcel Stimberg and Dominik Krzemiński, Arbor - Nora Abi Akar, Thorsten Hater and Brent Huisman,\n                                BluePyOpt - Jaquier Aurélien Tristan and Werner van Geit, C++/MATLAB APIs - Jonathan Cooper.\n                                We thank Rokas Stanislavos, András Ecker, Jessica Dafﬂon, Ronaldo Nunes, Anuja Negi, and Shayan\n                                Shafquat for their work converting models to NeuroML format as part of the Google Summer of Code\n                                program. We also thank Diccon Coyle for feedback on the manuscript.\n                                Additional information\n                                Competing interests\n                                Matteo Cantarelli: MetaCell Ltd. was contracted by UCL to develop some of the NeuroML support\n                                on the Open Source Brain platform; MC has a ﬁnancial interest in MetaCell Ltd. Robert C Cannon:\n                                Employee of Opus2 International Ltd. The other authors declare that no competing interests exist.\n                                Funding\n                                Funder\n                                Wellcome Trust\n\n                                Wellcome Trust\n\n                                Wellcome Trust\n                                Wellcome Trust\n                                Kavli Foundation\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135\n\nto it are welcomed. A PDF version of the documentation can also be downloaded for ofﬂine use\n(https://docs.neuroml.org/_static/ﬁles/neuroml-documentation.pdf).\nMaintenance of the Schema and core software\nThe NeuroML Scientiﬁc Committee (https://docs.neuroml.org/NeuroMLOrg/ScientiﬁcCommittee.\nhtml) and the elected NeuroML Editorial Board (https://docs.neuroml.org/NeuroMLOrg/Board.html)\noversee the standard, the core tools, and the initiative. The Scientiﬁc Committee sets the scientiﬁc\nfocus of the NeuroML initiative. It ensures that the standard represents the state of the art—that it\ncan encapsulate the latest knowledge in neuronal anatomy and physiology in their corresponding\nmodel components. The Scientiﬁc Committee also deﬁnes the governance structure of the initiative\nand works with the wider scientiﬁc community to gather feedback on NeuroML and promote its use.\nThe Editorial Board manages the day- to-\n\nschema, the core software tools, and critical resources such as the documentation. The Editorial Board\nworks with simulator developers in the extended ecosystem to help make tools NeuroML compliant\nby testing reference implementations and answering technical queries about NeuroML and the core\nsoftware tools.\nAcknowledgements\nWe thank all the members of the NeuroML Community who have contributed to the development\nof the standard over the years, have added support for the language to their applications, or who\nhave converted published models to NeuroML. We would particularly like to thank the following for\ncontributions to the NeuroML Scientiﬁc Committee: Upi Bhalla, Avrama Blackwell, Hugo Cornells,\nRobert McDougal, Lyle Graham, Cengiz Gunay, and Michael Hines. The following have also contrib-\nuted to developments related to the named tools/simulators/resources: EDEN - Mario Negrello and\nChristos Strydis, SONATA - Anton Arkhipov and Kael Dai, MOOSE - Subhasis Ray, NeuroML-\nJustas Birgiolas, NeuroMorpho.Org - Giorgio Ascoli, N2A - Fred Rothganger, pyLEMS - Gautham\nGanapathy, MDF - Manifest Chakalov, libNeuroML and NeuroTune - Mike Vella, Open Source Brain\n- Matt Earnshaw, Adrian Quintana and Eugenio Piasini, SciUnit/NeuronUnit - Richard C Gerkin, Brian -\nMarcel Stimberg and Dominik Krzemiński, Arbor - Nora Abi Akar, Thorsten Hater and Brent Huisman,\nBluePyOpt - Jaquier Aurélien Tristan and Werner van Geit, C++/MATLAB APIs - Jonathan Cooper.\nWe thank Rokas Stanislavos, András Ecker, Jessica Dafﬂon, Ronaldo Nunes, Anuja Negi, and Shayan\nShafquat for their work converting models to NeuroML format as part of the Google Summer of Code\nprogram. We also thank Diccon Coyle for feedback on the manuscript.\nAdditional information\nCompeting interests\nMatteo Cantarelli: MetaCell Ltd. was contracted by UCL to develop some of the NeuroML support\non the Open Source Brain platform; MC has a ﬁnancial interest in MetaCell Ltd. Robert C Cannon:\nEmployee of Opus2 International Ltd. The other authors declare that no competing interests exist.\nFunding\nFunder\nWellcome Trust\n\nWellcome Trust\n\nWellcome Trust\nWellcome Trust\nKavli Foundation","md":"# Tools and resources\n\nto it are welcomed. A PDF version of the documentation can also be downloaded for offline use\n(https://docs.neuroml.org/_static/files/neuroml-documentation.pdf).\n\n# Maintenance of the Schema and core software\n\nThe NeuroML Scientific Committee (https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html)\nand the elected NeuroML Editorial Board (https://docs.neuroml.org/NeuroMLOrg/Board.html)\noversee the standard, the core tools, and the initiative. The Scientific Committee sets the scientific\nfocus of the NeuroML initiative. It ensures that the standard represents the state of the art—that it\ncan encapsulate the latest knowledge in neuronal anatomy and physiology in their corresponding\nmodel components. The Scientific Committee also defines the governance structure of the initiative\nand works with the wider scientific community to gather feedback on NeuroML and promote its use.\nThe Editorial Board manages the day-to-schema, the core software tools, and critical resources such\nas the documentation. The Editorial Board works with simulator developers in the extended ecosystem\nto help make tools NeuroML compliant by testing reference implementations and answering technical\nqueries about NeuroML and the core software tools.\n\n# Acknowledgements\n\nWe thank all the members of the NeuroML Community who have contributed to the development\nof the standard over the years, have added support for the language to their applications, or who\nhave converted published models to NeuroML. We would particularly like to thank the following for\ncontributions to the NeuroML Scientific Committee: Upi Bhalla, Avrama Blackwell, Hugo Cornells,\nRobert McDougal, Lyle Graham, Cengiz Gunay, and Michael Hines. The following have also contributed\nto developments related to the named tools/simulators/resources: EDEN - Mario Negrello and\nChristos Strydis, SONATA - Anton Arkhipov and Kael Dai, MOOSE - Subhasis Ray, NeuroML -\nJustas Birgiolas, NeuroMorpho.Org - Giorgio Ascoli, N2A - Fred Rothganger, pyLEMS - Gautham\nGanapathy, MDF - Manifest Chakalov, libNeuroML and NeuroTune - Mike Vella, Open Source Brain\n- Matt Earnshaw, Adrian Quintana and Eugenio Piasini, SciUnit/NeuronUnit - Richard C Gerkin,\nBrian - Marcel Stimberg and Dominik Krzemiński, Arbor - Nora Abi Akar, Thorsten Hater and Brent\nHuisman, BluePyOpt - Jaquier Aurélien Tristan and Werner van Geit, C++/MATLAB APIs - Jonathan Cooper.\nWe thank Rokas Stanislavos, András Ecker, Jessica Dafllon, Ronaldo Nunes, Anuja Negi, and Shayan\nShafquat for their work converting models to NeuroML format as part of the Google Summer of Code\nprogram. We also thank Diccon Coyle for feedback on the manuscript.\n\n# Additional information\n\n# Competing interests\n\nMatteo Cantarelli: MetaCell Ltd. was contracted by UCL to develop some of the NeuroML support\non the Open Source Brain platform; MC has a financial interest in MetaCell Ltd. Robert C Cannon:\nEmployee of Opus2 International Ltd. The other authors declare that no competing interests exist.\n\n# Funding\n\n| Funder           | Wellcome Trust |\n| ---------------- | -------------- |\n| Wellcome Trust   |                |\n| Wellcome Trust   |                |\n| Wellcome Trust   |                |\n| Kavli Foundation |                |\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"text","value":"to it are welcomed. A PDF version of the documentation can also be downloaded for offline use\n(https://docs.neuroml.org/_static/files/neuroml-documentation.pdf).","md":"to it are welcomed. A PDF version of the documentation can also be downloaded for offline use\n(https://docs.neuroml.org/_static/files/neuroml-documentation.pdf).","bBox":{"x":0,"y":0,"w":612,"h":792}},{"type":"heading","lvl":1,"value":"Maintenance of the Schema and core software","md":"# Maintenance of the Schema and core software","bBox":{"x":168.53,"y":91.16,"w":263,"h":12}},{"type":"text","value":"The NeuroML Scientific Committee (https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html)\nand the elected NeuroML Editorial Board (https://docs.neuroml.org/NeuroMLOrg/Board.html)\noversee the standard, the core tools, and the initiative. The Scientific Committee sets the scientific\nfocus of the NeuroML initiative. It ensures that the standard represents the state of the art—that it\ncan encapsulate the latest knowledge in neuronal anatomy and physiology in their corresponding\nmodel components. The Scientific Committee also defines the governance structure of the initiative\nand works with the wider scientific community to gather feedback on NeuroML and promote its use.\nThe Editorial Board manages the day-to-schema, the core software tools, and critical resources such\nas the documentation. The Editorial Board works with simulator developers in the extended ecosystem\nto help make tools NeuroML compliant by testing reference implementations and answering technical\nqueries about NeuroML and the core software tools.","md":"The NeuroML Scientific Committee (https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html)\nand the elected NeuroML Editorial Board (https://docs.neuroml.org/NeuroMLOrg/Board.html)\noversee the standard, the core tools, and the initiative. The Scientific Committee sets the scientific\nfocus of the NeuroML initiative. It ensures that the standard represents the state of the art—that it\ncan encapsulate the latest knowledge in neuronal anatomy and physiology in their corresponding\nmodel components. The Scientific Committee also defines the governance structure of the initiative\nand works with the wider scientific community to gather feedback on NeuroML and promote its use.\nThe Editorial Board manages the day-to-schema, the core software tools, and critical resources such\nas the documentation. The Editorial Board works with simulator developers in the extended ecosystem\nto help make tools NeuroML compliant by testing reference implementations and answering technical\nqueries about NeuroML and the core software tools.","bBox":{"x":168.53,"y":144.63,"w":399,"h":107.93}},{"type":"heading","lvl":1,"value":"Acknowledgements","md":"# Acknowledgements","bBox":{"x":168.53,"y":267.47,"w":131,"h":14}},{"type":"text","value":"We thank all the members of the NeuroML Community who have contributed to the development\nof the standard over the years, have added support for the language to their applications, or who\nhave converted published models to NeuroML. We would particularly like to thank the following for\ncontributions to the NeuroML Scientific Committee: Upi Bhalla, Avrama Blackwell, Hugo Cornells,\nRobert McDougal, Lyle Graham, Cengiz Gunay, and Michael Hines. The following have also contributed\nto developments related to the named tools/simulators/resources: EDEN - Mario Negrello and\nChristos Strydis, SONATA - Anton Arkhipov and Kael Dai, MOOSE - Subhasis Ray, NeuroML -\nJustas Birgiolas, NeuroMorpho.Org - Giorgio Ascoli, N2A - Fred Rothganger, pyLEMS - Gautham\nGanapathy, MDF - Manifest Chakalov, libNeuroML and NeuroTune - Mike Vella, Open Source Brain\n- Matt Earnshaw, Adrian Quintana and Eugenio Piasini, SciUnit/NeuronUnit - Richard C Gerkin,\nBrian - Marcel Stimberg and Dominik Krzemiński, Arbor - Nora Abi Akar, Thorsten Hater and Brent\nHuisman, BluePyOpt - Jaquier Aurélien Tristan and Werner van Geit, C++/MATLAB APIs - Jonathan Cooper.\nWe thank Rokas Stanislavos, András Ecker, Jessica Dafllon, Ronaldo Nunes, Anuja Negi, and Shayan\nShafquat for their work converting models to NeuroML format as part of the Google Summer of Code\nprogram. We also thank Diccon Coyle for feedback on the manuscript.","md":"We thank all the members of the NeuroML Community who have contributed to the development\nof the standard over the years, have added support for the language to their applications, or who\nhave converted published models to NeuroML. We would particularly like to thank the following for\ncontributions to the NeuroML Scientific Committee: Upi Bhalla, Avrama Blackwell, Hugo Cornells,\nRobert McDougal, Lyle Graham, Cengiz Gunay, and Michael Hines. The following have also contributed\nto developments related to the named tools/simulators/resources: EDEN - Mario Negrello and\nChristos Strydis, SONATA - Anton Arkhipov and Kael Dai, MOOSE - Subhasis Ray, NeuroML -\nJustas Birgiolas, NeuroMorpho.Org - Giorgio Ascoli, N2A - Fred Rothganger, pyLEMS - Gautham\nGanapathy, MDF - Manifest Chakalov, libNeuroML and NeuroTune - Mike Vella, Open Source Brain\n- Matt Earnshaw, Adrian Quintana and Eugenio Piasini, SciUnit/NeuronUnit - Richard C Gerkin,\nBrian - Marcel Stimberg and Dominik Krzemiński, Arbor - Nora Abi Akar, Thorsten Hater and Brent\nHuisman, BluePyOpt - Jaquier Aurélien Tristan and Werner van Geit, C++/MATLAB APIs - Jonathan Cooper.\nWe thank Rokas Stanislavos, András Ecker, Jessica Dafllon, Ronaldo Nunes, Anuja Negi, and Shayan\nShafquat for their work converting models to NeuroML format as part of the Google Summer of Code\nprogram. We also thank Diccon Coyle for feedback on the manuscript.","bBox":{"x":168.53,"y":286.84,"w":414,"h":182.12}},{"type":"heading","lvl":1,"value":"Additional information","md":"# Additional information","bBox":{"x":168.53,"y":498.39,"w":150,"h":14}},{"type":"heading","lvl":1,"value":"Competing interests","md":"# Competing interests","bBox":{"x":168.53,"y":532.26,"w":86,"h":9}},{"type":"text","value":"Matteo Cantarelli: MetaCell Ltd. was contracted by UCL to develop some of the NeuroML support\non the Open Source Brain platform; MC has a financial interest in MetaCell Ltd. Robert C Cannon:\nEmployee of Opus2 International Ltd. The other authors declare that no competing interests exist.","md":"Matteo Cantarelli: MetaCell Ltd. was contracted by UCL to develop some of the NeuroML support\non the Open Source Brain platform; MC has a financial interest in MetaCell Ltd. Robert C Cannon:\nEmployee of Opus2 International Ltd. The other authors declare that no competing interests exist.","bBox":{"x":168.53,"y":532.26,"w":400,"h":84.65}},{"type":"heading","lvl":1,"value":"Funding","md":"# Funding","bBox":{"x":168.53,"y":593.73,"w":34,"h":9}},{"type":"table","rows":[["Funder","Wellcome Trust"],["Wellcome Trust",""],["Wellcome Trust",""],["Wellcome Trust",""],["Kavli Foundation",""]],"md":"| Funder           | Wellcome Trust |\n| ---------------- | -------------- |\n| Wellcome Trust   |                |\n| Wellcome Trust   |                |\n| Wellcome Trust   |                |\n| Kavli Foundation |                |","isPerfectTable":true,"csv":"\"Funder\",\"Wellcome Trust\"\n\"Wellcome Trust\",\"\"\n\"Wellcome Trust\",\"\"\n\"Wellcome Trust\",\"\"\n\"Kavli Foundation\",\"\"","bBox":{"x":37.01,"y":34.63,"w":546.52,"h":720.13}},{"type":"text","value":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":0,"y":0,"w":612,"h":792}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://docs.neuroml.org/_static/files/neuroml-documentation.pdf","text":""},{"url":"https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html","text":" "},{"url":"https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html","text":"html) and the elected NeuroML Editorial Board (https://docs.neuroml.org/NeuroMLOrg/Board.html) "},{"url":"https://docs.neuroml.org/NeuroMLOrg/Board.html","text":""},{"url":"https://doi.org/10.35802/101445","text":"10.35802/101445"},{"url":"https://doi.org/10.35802/212941","text":"10.35802/212941"},{"url":"https://doi.org/10.35802/203048","text":"10.35802/203048"},{"url":"https://doi.org/10.35802/224499","text":"10.35802/224499"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.503},{"page":39,"text":"           Tools  and  resources                                                                                                                                                            Neuroscience\n                                 Funder                                                                                                  Funder                     Grant reference number  Author\n                                 Engineering and Physical                                                                                Engineering and Physical   EP/X011151/1            Padraig Gleeson\n                                 Sciences Research Council                                                                               Sciences Research Council\n                                 National Institutes of                                                                                  National Institutes of     MH081905                Sharon Crook\n                                 Health                                                                                                  Health\n                                 National Institutes of                                                                                  National Institutes of     EB014640                Sharon Crook\n                                 Health                                                                                                  Health\n                                 National Institutes of                                                                                  National Institutes of     MH106674                Sharon Crook\n                                 Health                                                                                                  Health\n                                 National Institutes of                                                                                  National Institutes of     U24EB028998             Salvador Dura-Bernal\n                                 Health                                                                                                  Health\n                                 New York State                                                                                          New York State             DOH01-C38328GG          Salvador Dura-Bernal\n                                 Department of Health -                                                                                  Department of Health -\n                                 Wadsworth Center                                                                                        Wadsworth Center\n                                 HORIZON EUROPE                                                                                          HORIZON EUROPE             SEPTON (Gr. Agr. No.    Sotirios Panagiotou\n                                 Framework Programme                                                                                     Framework Programme        101094901)\n                                 The funders had no role in study design, data collection and interpretation, or the                     The funders had no role in study design, data collection and interpretation, or the\n                                 decision to submit the work for publication. For the purpose of Open Access, the                        decision to submit the work for publication. For the purpose of Open Access, the\n                                 authors have applied a CC BY public copyright license to any Author Accepted                            authors have applied a CC BY public copyright license to any Author Accepted\n                                 Manuscript version arising from this submission.                                                        Manuscript version arising from this submission.\n                                 Author contributions                                                                                    Author contributions\n                                 Ankur Sinha, Conceptualization, Resources, Data curation, Software, Formal analysis, Validation,        Ankur Sinha, Conceptualization, Resources, Data curation, Software, Formal analysis, Validation,\n                                 Investigation, Visualization, Methodology, Writing – original draft, Project administration, Writing –  Investigation, Visualization, Methodology, Writing – original draft, Project administration, Writing –\n                                 review and editing; Padraig Gleeson, Conceptualization, Resources, Data curation, Software, Formal      review and editing; Padraig Gleeson, Conceptualization, Resources, Data curation, Software, Formal\n                                 analysis, Supervision, Funding acquisition, Validation, Investigation, Visualization, Methodology,      analysis, Supervision, Funding acquisition, Validation, Investigation, Visualization, Methodology,\n                                 Writing – original draft, Project administration, Writing – review and editing; Bóris Marin, Conceptu-  Writing – original draft, Project administration, Writing – review and editing; Bóris Marin, Conceptu-\n                                 alization, Resources, Software, Validation, Investigation, Methodology, Writing – review and editing;   alization, Resources, Software, Validation, Investigation, Methodology, Writing – review and editing;\n                                 Salvador Dura- Bernal, Conceptualization, Resources, Software, Funding acquisition, Investigation,      Salvador Dura- Bernal, Conceptualization, Resources, Software, Funding acquisition, Investigation,\n                                 Visualization, Methodology, Writing – review and editing; Sotirios Panagiotou, Resources, Software,     Visualization, Methodology, Writing – review and editing; Sotirios Panagiotou, Resources, Software,\n                                 Validation, Investigation, Methodology, Writing – review and editing; Sharon Crook, Conceptualiza-      Validation, Investigation, Methodology, Writing – review and editing; Sharon Crook, Conceptualiza-\n                                 tion, Resources, Software, Supervision, Funding acquisition, Validation, Investigation, Methodology,    tion, Resources, Software, Supervision, Funding acquisition, Validation, Investigation, Methodology,\n                                 Writing – review and editing; Matteo Cantarelli, Conceptualization, Resources, Software, Validation,    Writing – review and editing; Matteo Cantarelli, Conceptualization, Resources, Software, Validation,\n                                 Investigation, Visualization, Methodology, Writing – review and editing; Robert C Cannon, Conceptu-     Investigation, Visualization, Methodology, Writing – review and editing; Robert C Cannon, Conceptu-\n                                 alization, Resources, Software, Investigation, Methodology; Andrew P Davison, Software, Investiga-      alization, Resources, Software, Investigation, Methodology; Andrew P Davison, Software, Investiga-\n                                 tion, Methodology, Writing – review and editing; Harsha Gurnani, Data curation, Software, Validation,   tion, Methodology, Writing – review and editing; Harsha Gurnani, Data curation, Software, Validation,\n                                 Investigation, Methodology; Robin Angus Silver, Conceptualization, Formal analysis, Supervision,        Investigation, Methodology; Robin Angus Silver, Conceptualization, Formal analysis, Supervision,\n                                 Funding acquisition, Investigation, Methodology, Writing – original draft, Project administration,      Funding acquisition, Investigation, Methodology, Writing – original draft, Project administration,\n                                 Writing – review and editing                                                                            Writing – review and editing\n                                 Author ORCIDs                                                                                           Author ORCIDs\n                                 Ankur Sinha                                                                                             Ankur Sinha   http://orcid.org/0000-0001-7568-7167\n                                                                                                                                         Padraig Gleeson   https://orcid.org/0000-0001-5963-8576\n                                                                                                                                         Matteo Cantarelli   https://orcid.org/0000-0002-0054-226X\n                                 Andrew P Davison                                                                                        Andrew P Davison     https://orcid.org/0000-0002-4793-7541\n                                                                                                                                         Robin Angus Silver    https://orcid.org/0000-0002-5480-6638\n                                 Peer review material                                                                                    Peer review material\n                                 Reviewer #1 (Public review): https://doi.org/10.7554/eLife.95135.3.sa1                                  Reviewer #1 (Public review): https://doi.org/10.7554/eLife.95135.3.sa1\n                                 Reviewer #2 (Public review): https://doi.org/10.7554/eLife.95135.3.sa2                                  Reviewer #2 (Public review): https://doi.org/10.7554/eLife.95135.3.sa2\n                                 Author response https://doi.org/10.7554/eLife.95135.3.sa3                                               Author response https://doi.org/10.7554/eLife.95135.3.sa3\n                                 Additional files                                                                                        Additional files\n                                 Supplementary files                                                                                     Supplementary files\n                                 MDAR checklist                                                                                          MDAR checklist\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                       39 of 44","md":"# Tools and resources\n\n# Neuroscience\n\n| Funder                                                 | Grant reference number          | Author               |\n| ------------------------------------------------------ | ------------------------------- | -------------------- |\n| Engineering and Physical Sciences Research Council     | EP/X011151/1                    | Padraig Gleeson      |\n| National Institutes of Health                          | MH081905                        | Sharon Crook         |\n| National Institutes of Health                          | EB014640                        | Sharon Crook         |\n| National Institutes of Health                          | MH106674                        | Sharon Crook         |\n| National Institutes of Health                          | U24EB028998                     | Salvador Dura-Bernal |\n| New York State Department of Health - Wadsworth Center | DOH01-C38328GG                  | Salvador Dura-Bernal |\n| HORIZON EUROPE Framework Programme                     | SEPTON (Gr. Agr. No. 101094901) | Sotirios Panagiotou  |\n\nThe funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication. For the purpose of Open Access, the authors have applied a CC BY public copyright license to any Author Accepted Manuscript version arising from this submission.\n\n# Author contributions\n\nAnkur Sinha, Conceptualization, Resources, Data curation, Software, Formal analysis, Validation, Investigation, Visualization, Methodology, Writing – original draft, Project administration, Writing – review and editing; Padraig Gleeson, Conceptualization, Resources, Data curation, Software, Formal analysis, Supervision, Funding acquisition, Validation, Investigation, Visualization, Methodology, Writing – original draft, Project administration, Writing – review and editing; Bóris Marin, Conceptualization, Resources, Software, Validation, Investigation, Methodology, Writing – review and editing; Salvador Dura-Bernal, Conceptualization, Resources, Software, Funding acquisition, Investigation, Visualization, Methodology, Writing – review and editing; Sotirios Panagiotou, Resources, Software, Validation, Investigation, Methodology, Writing – review and editing; Sharon Crook, Conceptualization, Resources, Software, Supervision, Funding acquisition, Validation, Investigation, Methodology, Writing – review and editing; Matteo Cantarelli, Conceptualization, Resources, Software, Validation, Investigation, Visualization, Methodology, Writing – review and editing; Robert C Cannon, Conceptualization, Resources, Software, Investigation, Methodology; Andrew P Davison, Software, Investigation, Methodology, Writing – review and editing; Harsha Gurnani, Data curation, Software, Validation, Investigation, Methodology; Robin Angus Silver, Conceptualization, Formal analysis, Supervision, Funding acquisition, Investigation, Methodology, Writing – original draft, Project administration, Writing – review and editing.\n\n# Author ORCIDs\n\nAnkur Sinha: http://orcid.org/0000-0001-7568-7167\n\nPadraig Gleeson: https://orcid.org/0000-0001-5963-8576\n\nMatteo Cantarelli: https://orcid.org/0000-0002-0054-226X\n\nAndrew P Davison: https://orcid.org/0000-0002-4793-7541\n\nRobin Angus Silver: https://orcid.org/0000-0002-5480-6638\n\n# Peer review material\n\nReviewer #1 (Public review): https://doi.org/10.7554/eLife.95135.3.sa1\n\nReviewer #2 (Public review): https://doi.org/10.7554/eLife.95135.3.sa2\n\nAuthor response: https://doi.org/10.7554/eLife.95135.3.sa3\n\n# Additional files\n\nSupplementary files\n\nMDAR checklist\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[{"name":"img_p38_1.png","height":32,"width":33,"x":219.3847351,"y":546.6017762},{"name":"img_p38_1.png","height":32,"width":33,"x":237.8883362,"y":557.731781},{"name":"img_p38_1.png","height":32,"width":33,"x":241.3892517,"y":568.8617554},{"name":"img_p38_1.png","height":32,"width":33,"x":244.9084473,"y":579.9917603},{"name":"img_p38_1.png","height":32,"width":33,"x":247.0502472,"y":591.1217651999999}],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"table","rows":[["Funder","Grant reference number","Author"],["Engineering and Physical Sciences Research Council","EP/X011151/1","Padraig Gleeson"],["National Institutes of Health","MH081905","Sharon Crook"],["National Institutes of Health","EB014640","Sharon Crook"],["National Institutes of Health","MH106674","Sharon Crook"],["National Institutes of Health","U24EB028998","Salvador Dura-Bernal"],["New York State Department of Health - Wadsworth Center","DOH01-C38328GG","Salvador Dura-Bernal"],["HORIZON EUROPE Framework Programme","SEPTON (Gr. Agr. No. 101094901)","Sotirios Panagiotou"]],"md":"| Funder                                                 | Grant reference number          | Author               |\n| ------------------------------------------------------ | ------------------------------- | -------------------- |\n| Engineering and Physical Sciences Research Council     | EP/X011151/1                    | Padraig Gleeson      |\n| National Institutes of Health                          | MH081905                        | Sharon Crook         |\n| National Institutes of Health                          | EB014640                        | Sharon Crook         |\n| National Institutes of Health                          | MH106674                        | Sharon Crook         |\n| National Institutes of Health                          | U24EB028998                     | Salvador Dura-Bernal |\n| New York State Department of Health - Wadsworth Center | DOH01-C38328GG                  | Salvador Dura-Bernal |\n| HORIZON EUROPE Framework Programme                     | SEPTON (Gr. Agr. No. 101094901) | Sotirios Panagiotou  |","isPerfectTable":true,"csv":"\"Funder\",\"Grant reference number\",\"Author\"\n\"Engineering and Physical Sciences Research Council\",\"EP/X011151/1\",\"Padraig Gleeson\"\n\"National Institutes of Health\",\"MH081905\",\"Sharon Crook\"\n\"National Institutes of Health\",\"EB014640\",\"Sharon Crook\"\n\"National Institutes of Health\",\"MH106674\",\"Sharon Crook\"\n\"National Institutes of Health\",\"U24EB028998\",\"Salvador Dura-Bernal\"\n\"New York State Department of Health - Wadsworth Center\",\"DOH01-C38328GG\",\"Salvador Dura-Bernal\"\n\"HORIZON EUROPE Framework Programme\",\"SEPTON (Gr. Agr. No. 101094901)\",\"Sotirios Panagiotou\"","bBox":{"x":168.53,"y":56.17,"w":406,"h":596.15}},{"type":"text","value":"The funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication. For the purpose of Open Access, the authors have applied a CC BY public copyright license to any Author Accepted Manuscript version arising from this submission.","md":"The funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication. For the purpose of Open Access, the authors have applied a CC BY public copyright license to any Author Accepted Manuscript version arising from this submission.","bBox":{"x":168.53,"y":56.17,"w":291,"h":235.38}},{"type":"heading","lvl":1,"value":"Author contributions","md":"# Author contributions","bBox":{"x":168.53,"y":56.17,"w":227,"h":261.64}},{"type":"text","value":"Ankur Sinha, Conceptualization, Resources, Data curation, Software, Formal analysis, Validation, Investigation, Visualization, Methodology, Writing – original draft, Project administration, Writing – review and editing; Padraig Gleeson, Conceptualization, Resources, Data curation, Software, Formal analysis, Supervision, Funding acquisition, Validation, Investigation, Visualization, Methodology, Writing – original draft, Project administration, Writing – review and editing; Bóris Marin, Conceptualization, Resources, Software, Validation, Investigation, Methodology, Writing – review and editing; Salvador Dura-Bernal, Conceptualization, Resources, Software, Funding acquisition, Investigation, Visualization, Methodology, Writing – review and editing; Sotirios Panagiotou, Resources, Software, Validation, Investigation, Methodology, Writing – review and editing; Sharon Crook, Conceptualization, Resources, Software, Supervision, Funding acquisition, Validation, Investigation, Methodology, Writing – review and editing; Matteo Cantarelli, Conceptualization, Resources, Software, Validation, Investigation, Visualization, Methodology, Writing – review and editing; Robert C Cannon, Conceptualization, Resources, Software, Investigation, Methodology; Andrew P Davison, Software, Investigation, Methodology, Writing – review and editing; Harsha Gurnani, Data curation, Software, Validation, Investigation, Methodology; Robin Angus Silver, Conceptualization, Formal analysis, Supervision, Funding acquisition, Investigation, Methodology, Writing – original draft, Project administration, Writing – review and editing.","md":"Ankur Sinha, Conceptualization, Resources, Data curation, Software, Formal analysis, Validation, Investigation, Visualization, Methodology, Writing – original draft, Project administration, Writing – review and editing; Padraig Gleeson, Conceptualization, Resources, Data curation, Software, Formal analysis, Supervision, Funding acquisition, Validation, Investigation, Visualization, Methodology, Writing – original draft, Project administration, Writing – review and editing; Bóris Marin, Conceptualization, Resources, Software, Validation, Investigation, Methodology, Writing – review and editing; Salvador Dura-Bernal, Conceptualization, Resources, Software, Funding acquisition, Investigation, Visualization, Methodology, Writing – review and editing; Sotirios Panagiotou, Resources, Software, Validation, Investigation, Methodology, Writing – review and editing; Sharon Crook, Conceptualization, Resources, Software, Supervision, Funding acquisition, Validation, Investigation, Methodology, Writing – review and editing; Matteo Cantarelli, Conceptualization, Resources, Software, Validation, Investigation, Visualization, Methodology, Writing – review and editing; Robert C Cannon, Conceptualization, Resources, Software, Investigation, Methodology; Andrew P Davison, Software, Investigation, Methodology, Writing – review and editing; Harsha Gurnani, Data curation, Software, Validation, Investigation, Methodology; Robin Angus Silver, Conceptualization, Formal analysis, Supervision, Funding acquisition, Investigation, Methodology, Writing – original draft, Project administration, Writing – review and editing.","bBox":{"x":168.53,"y":72.22,"w":411,"h":525.58}},{"type":"heading","lvl":1,"value":"Author ORCIDs","md":"# Author ORCIDs","bBox":{"x":168.53,"y":56.17,"w":227,"h":486.01}},{"type":"text","value":"Ankur Sinha: http://orcid.org/0000-0001-7568-7167\n\nPadraig Gleeson: https://orcid.org/0000-0001-5963-8576\n\nMatteo Cantarelli: https://orcid.org/0000-0002-0054-226X\n\nAndrew P Davison: https://orcid.org/0000-0002-4793-7541\n\nRobin Angus Silver: https://orcid.org/0000-0002-5480-6638","md":"Ankur Sinha: http://orcid.org/0000-0001-7568-7167\n\nPadraig Gleeson: https://orcid.org/0000-0001-5963-8576\n\nMatteo Cantarelli: https://orcid.org/0000-0002-0054-226X\n\nAndrew P Davison: https://orcid.org/0000-0002-4793-7541\n\nRobin Angus Silver: https://orcid.org/0000-0002-5480-6638","bBox":{"x":168.53,"y":72.22,"w":259,"h":525.58}},{"type":"heading","lvl":1,"value":"Peer review material","md":"# Peer review material","bBox":{"x":168.53,"y":606.93,"w":87,"h":9}},{"type":"text","value":"Reviewer #1 (Public review): https://doi.org/10.7554/eLife.95135.3.sa1\n\nReviewer #2 (Public review): https://doi.org/10.7554/eLife.95135.3.sa2\n\nAuthor response: https://doi.org/10.7554/eLife.95135.3.sa3","md":"Reviewer #1 (Public review): https://doi.org/10.7554/eLife.95135.3.sa1\n\nReviewer #2 (Public review): https://doi.org/10.7554/eLife.95135.3.sa2\n\nAuthor response: https://doi.org/10.7554/eLife.95135.3.sa3","bBox":{"x":168.53,"y":56.17,"w":278.05,"h":584.02}},{"type":"heading","lvl":1,"value":"Additional files","md":"# Additional files","bBox":{"x":168.53,"y":675.05,"w":100,"h":14}},{"type":"text","value":"Supplementary files\n\nMDAR checklist\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Supplementary files\n\nMDAR checklist\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":699.18,"w":83,"h":20.13}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"http://orcid.org/0000-0001-7568-7167","text":"Padraig Gleeson "},{"url":"https://orcid.org/0000-0001-5963-8576","text":""},{"url":"https://orcid.org/0000-0002-0054-226X","text":""},{"url":"https://orcid.org/0000-0002-4793-7541","text":" https://orcid.org/0000-0002-5480-6638"},{"url":"https://orcid.org/0000-0002-5480-6638","text":""},{"url":"https://doi.org/10.7554/eLife.95135.3.sa1","text":"https://doi.org/10.7554/eLife.95135.3.sa1"},{"url":"https://doi.org/10.7554/eLife.95135.3.sa2","text":"https://doi.org/10.7554/eLife.95135.3.sa2"},{"url":"https://doi.org/10.7554/eLife.95135.3.sa3","text":"https://doi.org/10.7554/eLife.95135.3.sa3"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.555},{"page":40,"text":"           Tools  and  resources                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Neuroscience\n                                   Data availability                                                                                                  Data availability                                                                                                  Data availability                                                                                                  Data availability\n                                   No data was generated in this study. All software noted in this manuscript is open source. The                     No data was generated in this study. All software noted in this manuscript is open source. The                     No data was generated in this study. All software noted in this manuscript is open source. The                     No data was generated in this study. All software noted in this manuscript is open source. The\n                                   NeuroML core libraries can be found at https://github.com/neuroml (copy archived at Gleeson and                    NeuroML core libraries can be found at https://github.com/neuroml (copy archived at Gleeson and                    NeuroML core libraries can be found at https://github.com/neuroml (copy archived at Gleeson and                    NeuroML core libraries can be found at https://github.com/neuroml (copy archived at Gleeson and\n                                   Sinha , 2024). Tables 3 and 4 provide links to the software packages and their source code reposito-               Sinha , 2024). Tables 3 and 4 provide links to the software packages and their source code reposito-               Sinha , 2024). Tables 3 and 4 provide links to the software packages and their source code reposito-               Sinha , 2024). Tables 3 and 4 provide links to the software packages and their source code reposito-\n                                   ries include DOI information for each software release.                                                            ries include DOI information for each software release.                                                            ries include DOI information for each software release.                                                            ries include DOI information for each software release.\n                                   References                                                                                                         References                                                                                                         References                                                                                                         References\n                                   Abrams MB, Bjaalie JG, Das S, Egan GF, Ghosh SS, Goscinski WJ, Grethe JS, Kotaleski JH, Ho ETW,                    Abrams MB, Bjaalie JG, Das S, Egan GF, Ghosh SS, Goscinski WJ, Grethe JS, Kotaleski JH, Ho ETW,                    Abrams MB, Bjaalie JG, Das S, Egan GF, Ghosh SS, Goscinski WJ, Grethe JS, Kotaleski JH, Ho ETW,                    Abrams MB, Bjaalie JG, Das S, Egan GF, Ghosh SS, Goscinski WJ, Grethe JS, Kotaleski JH, Ho ETW,\n                                                                                                                                                                                                                                                                                                                                                                                             Kennedy DN, Lanyon LJ, Leergaard TB, Mayberg HS, Milanesi L, Mouček R, Poline JB, Roy PK, Strother SC,              Kennedy DN, Lanyon LJ, Leergaard TB, Mayberg HS, Milanesi L, Mouček R, Poline JB, Roy PK, Strother SC,              Kennedy DN, Lanyon LJ, Leergaard TB, Mayberg HS, Milanesi L, Mouček R, Poline JB, Roy PK, Strother SC,\n                                                                                                                                                                                                                                                                                                                                                                                             Tang TB, Tiesinga P, et al. 2022. A standards organization for open and fair neuroscience: the international        Tang TB, Tiesinga P, et al. 2022. A standards organization for open and fair neuroscience: the international        Tang TB, Tiesinga P, et al. 2022. A standards organization for open and fair neuroscience: the international\n                                                                                                                                                                                                                                                                                                                                                                                             neuroinformatics coordinating facility. Neuroinformatics 20:25–36. DOI: https://doi.org/10.1007/s12021-020-         neuroinformatics coordinating facility. Neuroinformatics 20:25–36. DOI: https://doi.org/10.1007/s12021-020-         neuroinformatics coordinating facility. Neuroinformatics 20:25–36. DOI: https://doi.org/10.1007/s12021-020-\n                                                                                                                                                                                                                                                                                                                                                                                             09509-0, PMID: 33506383                                                                                             09509-0, PMID: 33506383                                                                                             09509-0, PMID: 33506383\n                                   Akar NA, Cumming B, Karakasis V, Kusters A, Klijn W, Peyser A, Yates S. 2019. Arbor — a morphologically-           Akar NA, Cumming B, Karakasis V, Kusters A, Klijn W, Peyser A, Yates S. 2019. Arbor — a morphologically-           Akar NA, Cumming B, Karakasis V, Kusters A, Klijn W, Peyser A, Yates S. 2019. Arbor — a morphologically-           Akar NA, Cumming B, Karakasis V, Kusters A, Klijn W, Peyser A, Yates S. 2019. Arbor — a morphologically-\n                                                                                                                                                                                                                                                                                                                                                                                             detailed neural network simulation library for contemporary high-                                                   detailed neural network simulation library for contemporary high-                                                   detailed neural network simulation library for contemporary high-\nperformance computing architectures. 2019\n                                                                                                                                                                                                                                                                                                                                                                                             27th Euromicro International Conference on Parallel, Distributed and Network-                                       27th Euromicro International Conference on Parallel, Distributed and Network-                                       27th Euromicro International Conference on Parallel, Distributed and Network-\nased Processing (PDP.\n                                                                                                                                                                                                                                                                                                                                                                                             274–282. DOI: https://doi.org/10.1109/EMPDP.2019.8671560                                                            274–282. DOI: https://doi.org/10.1109/EMPDP.2019.8671560                                                            274–282. DOI: https://doi.org/10.1109/EMPDP.2019.8671560\n                                   Ascoli GA, Donohue DE, Halavi M. 2007. NeuroMorpho.Org: a central resource for neuronal morphologies. The          Ascoli GA, Donohue DE, Halavi M. 2007. NeuroMorpho.Org: a central resource for neuronal morphologies. The          Ascoli GA, Donohue DE, Halavi M. 2007. NeuroMorpho.Org: a central resource for neuronal morphologies. The          Ascoli GA, Donohue DE, Halavi M. 2007. NeuroMorpho.Org: a central resource for neuronal morphologies. The\n                                                                                                                                                                                                                                                                                                                                                                                             Journal of Neuroscience 27:9247–9251. DOI: https://doi.org/10.1523/JNEUROSCI.2055-07.2007, PMID:                    Journal of Neuroscience 27:9247–9251. DOI: https://doi.org/10.1523/JNEUROSCI.2055-07.2007, PMID:                    Journal of Neuroscience 27:9247–9251. DOI: https://doi.org/10.1523/JNEUROSCI.2055-07.2007, PMID:\nn                                   Awile O, Kumbhar P, Cornu N, Dura-                                                                                 Awile O, Kumbhar P, Cornu N, Dura-                                                                                 Awile O, Kumbhar P, Cornu N, Dura-                                                                                 Awile O, Kumbhar P, Cornu N, Dura-\nernal S, King JG, Lupton O, Magkanaris I, McDougal RA, Newton AJH,\n                                                                                                                                                                                                                                                                                                                                                                                             Pereira F, Săvulescu A, Carnevale NT, Lytton WW, Hines ML, Schürmann F. 2022. Modernizing the NEURON                Pereira F, Săvulescu A, Carnevale NT, Lytton WW, Hines ML, Schürmann F. 2022. Modernizing the NEURON                Pereira F, Săvulescu A, Carnevale NT, Lytton WW, Hines ML, Schürmann F. 2022. Modernizing the NEURON\n                                                                                                                                                                                                                                                                                                                                                                                             simulator for sustainability, portability, and performance. Frontiers in Neuroinformatics 16:884046. DOI: https://  simulator for sustainability, portability, and performance. Frontiers in Neuroinformatics 16:884046. DOI: https://  simulator for sustainability, portability, and performance. Frontiers in Neuroinformatics 16:884046. DOI: https://\n                                                                                                                                                                                                                                                                                                                                                                                             doi.org/10.3389/fninf.2022.884046, PMID: 35832575                                                                   doi.org/10.3389/fninf.2022.884046, PMID: 35832575                                                                   doi.org/10.3389/fninf.2022.884046, PMID: 35832575\n                                   Bahl A, Stemmler MB, Herz AVM, Roth A. 2012. Automated optimization of a reduced layer 5 pyramidal cell            Bahl A, Stemmler MB, Herz AVM, Roth A. 2012. Automated optimization of a reduced layer 5 pyramidal cell            Bahl A, Stemmler MB, Herz AVM, Roth A. 2012. Automated optimization of a reduced layer 5 pyramidal cell            Bahl A, Stemmler MB, Herz AVM, Roth A. 2012. Automated optimization of a reduced layer 5 pyramidal cell\n                                                                                                                                                                                                                                                                                                                                                                                             model based on experimental data. Journal of Neuroscience Methods 210:22–34. DOI: https://doi.org/10.               model based on experimental data. Journal of Neuroscience Methods 210:22–34. DOI: https://doi.org/10.               model based on experimental data. Journal of Neuroscience Methods 210:22–34. DOI: https://doi.org/10.\n                                                                                                                                                                                                                                                                                                                                                                                             1016/j.jneumeth.2012.04.006, PMID: 22524993                                                                         1016/j.jneumeth.2012.04.006, PMID: 22524993                                                                         1016/j.jneumeth.2012.04.006, PMID: 22524993\n                                   Bergmann FT, Adams R, Moodie S, Cooper J, Glont M, Golebiewski M, Hucka M, Laibe C, Miller AK,                     Bergmann FT, Adams R, Moodie S, Cooper J, Glont M, Golebiewski M, Hucka M, Laibe C, Miller AK,                     Bergmann FT, Adams R, Moodie S, Cooper J, Glont M, Golebiewski M, Hucka M, Laibe C, Miller AK,                     Bergmann FT, Adams R, Moodie S, Cooper J, Glont M, Golebiewski M, Hucka M, Laibe C, Miller AK,\n                                                                                                                                                                                                                                                                                                                                                                                             Nickerson DP, Olivier BG, Rodriguez N, Sauro HM, Scharm M, Soiland-                                                 Nickerson DP, Olivier BG, Rodriguez N, Sauro HM, Scharm M, Soiland-                                                 Nickerson DP, Olivier BG, Rodriguez N, Sauro HM, Scharm M, Soiland-\neyes S, Waltemath D, Yvon F,\n                                                                                                                                                                                                                                                                                                                                                                                             Le Novère N. 2014. COMBINE archive and OMEX format: one ﬁle to share all information to reproduce a                 Le Novère N. 2014. COMBINE archive and OMEX format: one ﬁle to share all information to reproduce a                 Le Novère N. 2014. COMBINE archive and OMEX format: one ﬁle to share all information to reproduce a\n                                                                                                                                                                                                                                                                                                                                                                                             modeling project. BMC Bioinformatics 15:369. DOI: https://doi.org/10.1186/s12859-014-0369-z, PMID:                  modeling project. BMC Bioinformatics 15:369. DOI: https://doi.org/10.1186/s12859-014-0369-z, PMID:                  modeling project. BMC Bioinformatics 15:369. DOI: https://doi.org/10.1186/s12859-014-0369-z, PMID:\nn                                   Bezaire MJ, Raikov I, Burk K, Vyas D, Soltesz I. 2016. Interneuronal mechanisms of hippocampal theta oscillations  Bezaire MJ, Raikov I, Burk K, Vyas D, Soltesz I. 2016. Interneuronal mechanisms of hippocampal theta oscillations  Bezaire MJ, Raikov I, Burk K, Vyas D, Soltesz I. 2016. Interneuronal mechanisms of hippocampal theta oscillations  Bezaire MJ, Raikov I, Burk K, Vyas D, Soltesz I. 2016. Interneuronal mechanisms of hippocampal theta oscillations\n                                                                                                                                                                                                                                                                                                                                                                                             in a full-                                                                                                          in a full-                                                                                                          in a full-\nscale model of the rodent CA1 circuit. eLife 5:e18566. DOI: https://doi.org/10.7554/eLife.18566,\nn                                   Billeh YN, Cai B, Gratiy SL, Dai K, Iyer R, Gouwens NW, Abbasi-                                                    Billeh YN, Cai B, Gratiy SL, Dai K, Iyer R, Gouwens NW, Abbasi-                                                    Billeh YN, Cai B, Gratiy SL, Dai K, Iyer R, Gouwens NW, Abbasi-                                                    Billeh YN, Cai B, Gratiy SL, Dai K, Iyer R, Gouwens NW, Abbasi-\nsl R, Jia X, Siegle JH, Olsen SR, Koch C,\n                                                                                                                                                                                                                                                                                                                                                                                             Mihalas S, Arkhipov A. 2020. Systematic integration of structural and functional data into multi-                   Mihalas S, Arkhipov A. 2020. Systematic integration of structural and functional data into multi-                   Mihalas S, Arkhipov A. 2020. Systematic integration of structural and functional data into multi-\nscale models of\n                                                                                                                                                                                                                                                                                                                                                                                             mouse primary visual cortex. Neuron 106:388–403. DOI: https://doi.org/10.1016/j.neuron.2020.01.040, PMID:           mouse primary visual cortex. Neuron 106:388–403. DOI: https://doi.org/10.1016/j.neuron.2020.01.040, PMID:           mouse primary visual cortex. Neuron 106:388–403. DOI: https://doi.org/10.1016/j.neuron.2020.01.040, PMID:\nn                                   Billings G, Piasini E, Lőrincz A, Nusser Z, Silver RA. 2014. Network structure within the cerebellar input layer   Billings G, Piasini E, Lőrincz A, Nusser Z, Silver RA. 2014. Network structure within the cerebellar input layer   Billings G, Piasini E, Lőrincz A, Nusser Z, Silver RA. 2014. Network structure within the cerebellar input layer   Billings G, Piasini E, Lőrincz A, Nusser Z, Silver RA. 2014. Network structure within the cerebellar input layer\n                                                                                                                                                                                                                                                                                                                                                                                             enables lossless sparse encoding. Neuron 83:960–974. DOI: https://doi.org/10.1016/j.neuron.2014.07.020,             enables lossless sparse encoding. Neuron 83:960–974. DOI: https://doi.org/10.1016/j.neuron.2014.07.020,             enables lossless sparse encoding. Neuron 83:960–974. DOI: https://doi.org/10.1016/j.neuron.2014.07.020,\nn                                   Birgiolas J, Dietrich SW, Crook S, Rajadesingan A, Zhang C, Penchala SV, Addepalli V. 2015. Ontology-              Birgiolas J, Dietrich SW, Crook S, Rajadesingan A, Zhang C, Penchala SV, Addepalli V. 2015. Ontology-              Birgiolas J, Dietrich SW, Crook S, Rajadesingan A, Zhang C, Penchala SV, Addepalli V. 2015. Ontology-              Birgiolas J, Dietrich SW, Crook S, Rajadesingan A, Zhang C, Penchala SV, Addepalli V. 2015. Ontology-\nassisted\n                                                                                                                                                                                                                                                                                                                                                                                             keyword search for NeuroML models. SSDBM 2015. . DOI: https://doi.org/10.1145/2791347.2791360                       keyword search for NeuroML models. SSDBM 2015. . DOI: https://doi.org/10.1145/2791347.2791360                       keyword search for NeuroML models. SSDBM 2015. . DOI: https://doi.org/10.1145/2791347.2791360\n                                   Birgiolas J, Haynes V, Gleeson P, Gerkin RC, Dietrich SW, Crook S. 2023. NeuroML-                                  Birgiolas J, Haynes V, Gleeson P, Gerkin RC, Dietrich SW, Crook S. 2023. NeuroML-                                  Birgiolas J, Haynes V, Gleeson P, Gerkin RC, Dietrich SW, Crook S. 2023. NeuroML-                                  Birgiolas J, Haynes V, Gleeson P, Gerkin RC, Dietrich SW, Crook S. 2023. NeuroML-\nharing and\n                                                                                                                                                                                                                                                                                                                                                                                             characterizing data-                                                                                                characterizing data-                                                                                                characterizing data-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     driven neuroscience models described in NeuroML. PLOS Computational Biology\n                                                                                                                                                                                                                                                                                                                                                                                             19:e1010941. DOI: https://doi.org/10.1371/journal.pcbi.1010941, PMID: 36867658                                      19:e1010941. DOI: https://doi.org/10.1371/journal.pcbi.1010941, PMID: 36867658                                      19:e1010941. DOI: https://doi.org/10.1371/journal.pcbi.1010941, PMID: 36867658\n                                   Blundell I, Brette R, Cleland TA, Close TG, Coca D, Davison AP, Diaz-                                              Blundell I, Brette R, Cleland TA, Close TG, Coca D, Davison AP, Diaz-                                              Blundell I, Brette R, Cleland TA, Close TG, Coca D, Davison AP, Diaz-                                              Blundell I, Brette R, Cleland TA, Close TG, Coca D, Davison AP, Diaz-\nier S, Fernandez Musoles C, Gleeson P,\n                                                                                                                                                                                                                                                                                                                                                                                             Goodman DFM, Hines M, Hopkins MW, Kumbhar P, Lester DR, Marin B, Morrison A, Müller E, Nowotny T,                   Goodman DFM, Hines M, Hopkins MW, Kumbhar P, Lester DR, Marin B, Morrison A, Müller E, Nowotny T,                   Goodman DFM, Hines M, Hopkins MW, Kumbhar P, Lester DR, Marin B, Morrison A, Müller E, Nowotny T,\n                                                                                                                                                                                                                                                                                                                                                                                             Peyser A, Plotnikov D, et al. 2018. Code generation in computational neuroscience: a review of tools and            Peyser A, Plotnikov D, et al. 2018. Code generation in computational neuroscience: a review of tools and            Peyser A, Plotnikov D, et al. 2018. Code generation in computational neuroscience: a review of tools and\n                                                                                                                                                                                                                                                                                                                                                                                             techniques. Frontiers in Neuroinformatics 12:68. DOI: https://doi.org/10.3389/fninf.2018.00068, PMID:               techniques. Frontiers in Neuroinformatics 12:68. DOI: https://doi.org/10.3389/fninf.2018.00068, PMID:               techniques. Frontiers in Neuroinformatics 12:68. DOI: https://doi.org/10.3389/fninf.2018.00068, PMID:\nn                                   Bower JM, Beeman D. 1998. The Book of GENESIS: Exploring Realistic Neural Models with the GEneral NEural           Bower JM, Beeman D. 1998. The Book of GENESIS: Exploring Realistic Neural Models with the GEneral NEural           Bower JM, Beeman D. 1998. The Book of GENESIS: Exploring Realistic Neural Models with the GEneral NEural           Bower JM, Beeman D. 1998. The Book of GENESIS: Exploring Realistic Neural Models with the GEneral NEural\n                                                                                                                                                                                                                                                                                                                                                                                             SImu Lation System. Springer. DOI: https://doi.org/10.1007/978-1-4612-1634-6                                        SImu Lation System. Springer. DOI: https://doi.org/10.1007/978-1-4612-1634-6                                        SImu Lation System. Springer. DOI: https://doi.org/10.1007/978-1-4612-1634-6\n                                   Boyle JH, Cohen N. 2008. Caenorhabditis elegans body wall muscles are simple actuators. Biosystems 94:170–         Boyle JH, Cohen N. 2008. Caenorhabditis elegans body wall muscles are simple actuators. Biosystems 94:170–         Boyle JH, Cohen N. 2008. Caenorhabditis elegans body wall muscles are simple actuators. Biosystems 94:170–         Boyle JH, Cohen N. 2008. Caenorhabditis elegans body wall muscles are simple actuators. Biosystems 94:170–\n                                                                                                                                                                                                                                                                                                                                                                                             181. DOI: https://doi.org/10.1016/j.biosystems.2008.05.025                                                          181. DOI: https://doi.org/10.1016/j.biosystems.2008.05.025                                                          181. DOI: https://doi.org/10.1016/j.biosystems.2008.05.025\n                                   Brunel N. 2000. Brunel N. Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons.    Brunel N. 2000. Brunel N. Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons.    Brunel N. 2000. Brunel N. Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons.    Brunel N. 2000. Brunel N. Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons.\n                                                                                                                                                                                                                                                                                                                                                                                             Journal of Computational Neuroscience 8:183–208. DOI: https://doi.org/10.1023/A:1008925309027                       Journal of Computational Neuroscience 8:183–208. DOI: https://doi.org/10.1023/A:1008925309027                       Journal of Computational Neuroscience 8:183–208. DOI: https://doi.org/10.1023/A:1008925309027\n                                   Campagnola L. 2023. Vispy/vispy. 0.13.0. Zenodo. https://doi.org/10.5281/zenodo.7945364                            Campagnola L. 2023. Vispy/vispy. 0.13.0. Zenodo. https://doi.org/10.5281/zenodo.7945364                            Campagnola L. 2023. Vispy/vispy. 0.13.0. Zenodo. https://doi.org/10.5281/zenodo.7945364                            Campagnola L. 2023. Vispy/vispy. 0.13.0. Zenodo. https://doi.org/10.5281/zenodo.7945364\n                                   Cannon RC, Gewaltig MO, Gleeson P, Bhalla US, Cornelis H, Hines ML, Howell FW, Muller E, Stiles JR, Wils S,        Cannon RC, Gewaltig MO, Gleeson P, Bhalla US, Cornelis H, Hines ML, Howell FW, Muller E, Stiles JR, Wils S,        Cannon RC, Gewaltig MO, Gleeson P, Bhalla US, Cornelis H, Hines ML, Howell FW, Muller E, Stiles JR, Wils S,        Cannon RC, Gewaltig MO, Gleeson P, Bhalla US, Cornelis H, Hines ML, Howell FW, Muller E, Stiles JR, Wils S,\n                                                                                                                                                                                                                                                                                                                                                                                             De Schutter E. 2007. Interoperability of neuroscience modeling software: current status and future directions.      De Schutter E. 2007. Interoperability of neuroscience modeling software: current status and future directions.      De Schutter E. 2007. Interoperability of neuroscience modeling software: current status and future directions.\n                                                                                                                                                                                                                                                                                                                                                                                             Neuroinformatics 5:127–138. DOI: https://doi.org/10.1007/s12021-007-0004-5, PMID: 17873374                          Neuroinformatics 5:127–138. DOI: https://doi.org/10.1007/s12021-007-0004-5, PMID: 17873374                          Neuroinformatics 5:127–138. DOI: https://doi.org/10.1007/s12021-007-0004-5, PMID: 17873374\n                                   Cannon RC, Gleeson P, Crook S, Ganapathy G, Marin B, Piasini E, Silver RA. 2014. LEMS: a language for              Cannon RC, Gleeson P, Crook S, Ganapathy G, Marin B, Piasini E, Silver RA. 2014. LEMS: a language for              Cannon RC, Gleeson P, Crook S, Ganapathy G, Marin B, Piasini E, Silver RA. 2014. LEMS: a language for              Cannon RC, Gleeson P, Crook S, Ganapathy G, Marin B, Piasini E, Silver RA. 2014. LEMS: a language for\n                                                                                                                                                                                                                                                                                                                                                                                             expressing complex biological models in concise and hierarchical form and its use in underpinning NeuroML 2.        expressing complex biological models in concise and hierarchical form and its use in underpinning NeuroML 2.        expressing complex biological models in concise and hierarchical form and its use in underpinning NeuroML 2.\n                                                                                                                                                                                                                                                                                                                                                                                             Frontiers in Neuroinformatics 8:79. DOI: https://doi.org/10.3389/fninf.2014.00079, PMID: 25309419                   Frontiers in Neuroinformatics 8:79. DOI: https://doi.org/10.3389/fninf.2014.00079, PMID: 25309419                   Frontiers in Neuroinformatics 8:79. DOI: https://doi.org/10.3389/fninf.2014.00079, PMID: 25309419\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLifeof 44","md":"# Tools and resources\n\n# Neuroscience\n\n# Data availability\n\nNo data was generated in this study. All software noted in this manuscript is open source. The NeuroML core libraries can be found at https://github.com/neuroml (copy archived at Gleeson and Sinha, 2024). Tables 3 and 4 provide links to the software packages and their source code repositories include DOI information for each software release.\n\n# References\n\nAbrams MB, Bjaalie JG, Das S, Egan GF, Ghosh SS, Goscinski WJ, Grethe JS, Kotaleski JH, Ho ETW, Kennedy DN, Lanyon LJ, Leergaard TB, Mayberg HS, Milanesi L, Mouček R, Poline JB, Roy PK, Strother SC, Tang TB, Tiesinga P, et al. 2022. A standards organization for open and fair neuroscience: the international neuroinformatics coordinating facility. Neuroinformatics 20:25–36. DOI: https://doi.org/10.1007/s12021-020-09509-0, PMID: 33506383\n\nAkar NA, Cumming B, Karakasis V, Kusters A, Klijn W, Peyser A, Yates S. 2019. Arbor — a morphologically-detailed neural network simulation library for contemporary high-performance computing architectures. 2019 27th Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP). 274–282. DOI: https://doi.org/10.1109/EMPDP.2019.8671560\n\nAscoli GA, Donohue DE, Halavi M. 2007. NeuroMorpho.Org: a central resource for neuronal morphologies. The Journal of Neuroscience 27:9247–9251. DOI: https://doi.org/10.1523/JNEUROSCI.2055-07.2007, PMID: 17728438\n\nAwile O, Kumbhar P, Cornu N, Dura-Bernal S, King JG, Lupton O, Magkanaris I, McDougal RA, Newton AJH, Pereira F, Săvulescu A, Carnevale NT, Lytton WW, Hines ML, Schürmann F. 2022. Modernizing the NEURON simulator for sustainability, portability, and performance. Frontiers in Neuroinformatics 16:884046. DOI: https://doi.org/10.3389/fninf.2022.884046, PMID: 35832575\n\nBahl A, Stemmler MB, Herz AVM, Roth A. 2012. Automated optimization of a reduced layer 5 pyramidal cell model based on experimental data. Journal of Neuroscience Methods 210:22–34. DOI: https://doi.org/10.1016/j.jneumeth.2012.04.006, PMID: 22524993\n\nBergmann FT, Adams R, Moodie S, Cooper J, Glont M, Golebiewski M, Hucka M, Laibe C, Miller AK, Nickerson DP, Olivier BG, Rodriguez N, Sauro HM, Scharm M, Soiland-Reyes S, Waltemath D, Yvon F, Le Novère N. 2014. COMBINE archive and OMEX format: one file to share all information to reproduce a modeling project. BMC Bioinformatics 15:369. DOI: https://doi.org/10.1186/s12859-014-0369-z, PMID: 25494900\n\nBezaire MJ, Raikov I, Burk K, Vyas D, Soltesz I. 2016. Interneuronal mechanisms of hippocampal theta oscillations in a full-scale model of the rodent CA1 circuit. eLife 5:e18566. DOI: https://doi.org/10.7554/eLife.18566, PMID: 28009257\n\nBilleh YN, Cai B, Gratiy SL, Dai K, Iyer R, Gouwens NW, Abbasi-Asl R, Jia X, Siegle JH, Olsen SR, Koch C, Mihalas S, Arkhipov A. 2020. Systematic integration of structural and functional data into multi-scale models of mouse primary visual cortex. Neuron 106:388–403. DOI: https://doi.org/10.1016/j.neuron.2020.01.040, PMID: 32142648\n\nBillings G, Piasini E, Lőrincz A, Nusser Z, Silver RA. 2014. Network structure within the cerebellar input layer enables lossless sparse encoding. Neuron 83:960–974. DOI: https://doi.org/10.1016/j.neuron.2014.07.020, PMID: 25123311\n\nBirgiolas J, Dietrich SW, Crook S, Rajadesingan A, Zhang C, Penchala SV, Addepalli V. 2015. Ontology-assisted keyword search for NeuroML models. SSDBM 2015. DOI: https://doi.org/10.1145/2791347.2791360\n\nBirgiolas J, Haynes V, Gleeson P, Gerkin RC, Dietrich SW, Crook S. 2023. NeuroML-DB: Sharing and characterizing data-driven neuroscience models described in NeuroML. PLOS Computational Biology 19:e1010941. DOI: https://doi.org/10.1371/journal.pcbi.1010941, PMID: 36867658\n\nBlundell I, Brette R, Cleland TA, Close TG, Coca D, Davison AP, Diaz-Pier S, Fernandez Musoles C, Gleeson P, Goodman DFM, Hines M, Hopkins MW, Kumbhar P, Lester DR, Marin B, Morrison A, Müller E, Nowotny T, Peyser A, Plotnikov D, et al. 2018. Code generation in computational neuroscience: a review of tools and techniques. Frontiers in Neuroinformatics 12:68. DOI: https://doi.org/10.3389/fninf.2018.00068, PMID: 30455637\n\nBower JM, Beeman D. 1998. The Book of GENESIS: Exploring Realistic Neural Models with the GEneral NEural SImu Lation System. Springer. DOI: https://doi.org/10.1007/978-1-4612-1634-6\n\nBoyle JH, Cohen N. 2008. Caenorhabditis elegans body wall muscles are simple actuators. Biosystems 94:170–181. DOI: https://doi.org/10.1016/j.biosystems.2008.05.025\n\nBrunel N. 2000. Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8:183–208. DOI: https://doi.org/10.1023/A:1008925309027\n\nCampagnola L. 2023. Vispy/vispy. 0.13.0. Zenodo. https://doi.org/10.5281/zenodo.7945364\n\nCannon RC, Gewaltig MO, Gleeson P, Bhalla US, Cornelis H, Hines ML, Howell FW, Muller E, Stiles JR, Wils S, De Schutter E. 2007. Interoperability of neuroscience modeling software: current status and future directions. Neuroinformatics 5:127–138. DOI: https://doi.org/10.1007/s12021-007-0004-5, PMID: 17873374\n\nCannon RC, Gleeson P, Crook S, Ganapathy G, Marin B, Piasini E, Silver RA. 2014. LEMS: a language for expressing complex biological models in concise and hierarchical form and its use in underpinning NeuroML 2. Frontiers in Neuroinformatics 8:79. DOI: https://doi.org/10.3389/fninf.2014.00079, PMID: 25309419\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"heading","lvl":1,"value":"Data availability","md":"# Data availability","bBox":{"x":168.53,"y":51.8,"w":67,"h":9}},{"type":"text","value":"No data was generated in this study. All software noted in this manuscript is open source. The NeuroML core libraries can be found at https://github.com/neuroml (copy archived at Gleeson and Sinha, 2024). Tables 3 and 4 provide links to the software packages and their source code repositories include DOI information for each software release.","md":"No data was generated in this study. All software noted in this manuscript is open source. The NeuroML core libraries can be found at https://github.com/neuroml (copy archived at Gleeson and Sinha, 2024). Tables 3 and 4 provide links to the software packages and their source code repositories include DOI information for each software release.","bBox":{"x":168.53,"y":63.86,"w":402.54,"h":45.15}},{"type":"heading","lvl":1,"value":"References","md":"# References","bBox":{"x":168.53,"y":130.24,"w":73,"h":14}},{"type":"text","value":"Abrams MB, Bjaalie JG, Das S, Egan GF, Ghosh SS, Goscinski WJ, Grethe JS, Kotaleski JH, Ho ETW, Kennedy DN, Lanyon LJ, Leergaard TB, Mayberg HS, Milanesi L, Mouček R, Poline JB, Roy PK, Strother SC, Tang TB, Tiesinga P, et al. 2022. A standards organization for open and fair neuroscience: the international neuroinformatics coordinating facility. Neuroinformatics 20:25–36. DOI: https://doi.org/10.1007/s12021-020-09509-0, PMID: 33506383\n\nAkar NA, Cumming B, Karakasis V, Kusters A, Klijn W, Peyser A, Yates S. 2019. Arbor — a morphologically-detailed neural network simulation library for contemporary high-performance computing architectures. 2019 27th Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP). 274–282. DOI: https://doi.org/10.1109/EMPDP.2019.8671560\n\nAscoli GA, Donohue DE, Halavi M. 2007. NeuroMorpho.Org: a central resource for neuronal morphologies. The Journal of Neuroscience 27:9247–9251. DOI: https://doi.org/10.1523/JNEUROSCI.2055-07.2007, PMID: 17728438\n\nAwile O, Kumbhar P, Cornu N, Dura-Bernal S, King JG, Lupton O, Magkanaris I, McDougal RA, Newton AJH, Pereira F, Săvulescu A, Carnevale NT, Lytton WW, Hines ML, Schürmann F. 2022. Modernizing the NEURON simulator for sustainability, portability, and performance. Frontiers in Neuroinformatics 16:884046. DOI: https://doi.org/10.3389/fninf.2022.884046, PMID: 35832575\n\nBahl A, Stemmler MB, Herz AVM, Roth A. 2012. Automated optimization of a reduced layer 5 pyramidal cell model based on experimental data. Journal of Neuroscience Methods 210:22–34. DOI: https://doi.org/10.1016/j.jneumeth.2012.04.006, PMID: 22524993\n\nBergmann FT, Adams R, Moodie S, Cooper J, Glont M, Golebiewski M, Hucka M, Laibe C, Miller AK, Nickerson DP, Olivier BG, Rodriguez N, Sauro HM, Scharm M, Soiland-Reyes S, Waltemath D, Yvon F, Le Novère N. 2014. COMBINE archive and OMEX format: one file to share all information to reproduce a modeling project. BMC Bioinformatics 15:369. DOI: https://doi.org/10.1186/s12859-014-0369-z, PMID: 25494900\n\nBezaire MJ, Raikov I, Burk K, Vyas D, Soltesz I. 2016. Interneuronal mechanisms of hippocampal theta oscillations in a full-scale model of the rodent CA1 circuit. eLife 5:e18566. DOI: https://doi.org/10.7554/eLife.18566, PMID: 28009257\n\nBilleh YN, Cai B, Gratiy SL, Dai K, Iyer R, Gouwens NW, Abbasi-Asl R, Jia X, Siegle JH, Olsen SR, Koch C, Mihalas S, Arkhipov A. 2020. Systematic integration of structural and functional data into multi-scale models of mouse primary visual cortex. Neuron 106:388–403. DOI: https://doi.org/10.1016/j.neuron.2020.01.040, PMID: 32142648\n\nBillings G, Piasini E, Lőrincz A, Nusser Z, Silver RA. 2014. Network structure within the cerebellar input layer enables lossless sparse encoding. Neuron 83:960–974. DOI: https://doi.org/10.1016/j.neuron.2014.07.020, PMID: 25123311\n\nBirgiolas J, Dietrich SW, Crook S, Rajadesingan A, Zhang C, Penchala SV, Addepalli V. 2015. Ontology-assisted keyword search for NeuroML models. SSDBM 2015. DOI: https://doi.org/10.1145/2791347.2791360\n\nBirgiolas J, Haynes V, Gleeson P, Gerkin RC, Dietrich SW, Crook S. 2023. NeuroML-DB: Sharing and characterizing data-driven neuroscience models described in NeuroML. PLOS Computational Biology 19:e1010941. DOI: https://doi.org/10.1371/journal.pcbi.1010941, PMID: 36867658\n\nBlundell I, Brette R, Cleland TA, Close TG, Coca D, Davison AP, Diaz-Pier S, Fernandez Musoles C, Gleeson P, Goodman DFM, Hines M, Hopkins MW, Kumbhar P, Lester DR, Marin B, Morrison A, Müller E, Nowotny T, Peyser A, Plotnikov D, et al. 2018. Code generation in computational neuroscience: a review of tools and techniques. Frontiers in Neuroinformatics 12:68. DOI: https://doi.org/10.3389/fninf.2018.00068, PMID: 30455637\n\nBower JM, Beeman D. 1998. The Book of GENESIS: Exploring Realistic Neural Models with the GEneral NEural SImu Lation System. Springer. DOI: https://doi.org/10.1007/978-1-4612-1634-6\n\nBoyle JH, Cohen N. 2008. Caenorhabditis elegans body wall muscles are simple actuators. Biosystems 94:170–181. DOI: https://doi.org/10.1016/j.biosystems.2008.05.025\n\nBrunel N. 2000. Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8:183–208. DOI: https://doi.org/10.1023/A:1008925309027\n\nCampagnola L. 2023. Vispy/vispy. 0.13.0. Zenodo. https://doi.org/10.5281/zenodo.7945364\n\nCannon RC, Gewaltig MO, Gleeson P, Bhalla US, Cornelis H, Hines ML, Howell FW, Muller E, Stiles JR, Wils S, De Schutter E. 2007. Interoperability of neuroscience modeling software: current status and future directions. Neuroinformatics 5:127–138. DOI: https://doi.org/10.1007/s12021-007-0004-5, PMID: 17873374\n\nCannon RC, Gleeson P, Crook S, Ganapathy G, Marin B, Piasini E, Silver RA. 2014. LEMS: a language for expressing complex biological models in concise and hierarchical form and its use in underpinning NeuroML 2. Frontiers in Neuroinformatics 8:79. DOI: https://doi.org/10.3389/fninf.2014.00079, PMID: 25309419\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Abrams MB, Bjaalie JG, Das S, Egan GF, Ghosh SS, Goscinski WJ, Grethe JS, Kotaleski JH, Ho ETW, Kennedy DN, Lanyon LJ, Leergaard TB, Mayberg HS, Milanesi L, Mouček R, Poline JB, Roy PK, Strother SC, Tang TB, Tiesinga P, et al. 2022. A standards organization for open and fair neuroscience: the international neuroinformatics coordinating facility. Neuroinformatics 20:25–36. DOI: https://doi.org/10.1007/s12021-020-09509-0, PMID: 33506383\n\nAkar NA, Cumming B, Karakasis V, Kusters A, Klijn W, Peyser A, Yates S. 2019. Arbor — a morphologically-detailed neural network simulation library for contemporary high-performance computing architectures. 2019 27th Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP). 274–282. DOI: https://doi.org/10.1109/EMPDP.2019.8671560\n\nAscoli GA, Donohue DE, Halavi M. 2007. NeuroMorpho.Org: a central resource for neuronal morphologies. The Journal of Neuroscience 27:9247–9251. DOI: https://doi.org/10.1523/JNEUROSCI.2055-07.2007, PMID: 17728438\n\nAwile O, Kumbhar P, Cornu N, Dura-Bernal S, King JG, Lupton O, Magkanaris I, McDougal RA, Newton AJH, Pereira F, Săvulescu A, Carnevale NT, Lytton WW, Hines ML, Schürmann F. 2022. Modernizing the NEURON simulator for sustainability, portability, and performance. Frontiers in Neuroinformatics 16:884046. DOI: https://doi.org/10.3389/fninf.2022.884046, PMID: 35832575\n\nBahl A, Stemmler MB, Herz AVM, Roth A. 2012. Automated optimization of a reduced layer 5 pyramidal cell model based on experimental data. Journal of Neuroscience Methods 210:22–34. DOI: https://doi.org/10.1016/j.jneumeth.2012.04.006, PMID: 22524993\n\nBergmann FT, Adams R, Moodie S, Cooper J, Glont M, Golebiewski M, Hucka M, Laibe C, Miller AK, Nickerson DP, Olivier BG, Rodriguez N, Sauro HM, Scharm M, Soiland-Reyes S, Waltemath D, Yvon F, Le Novère N. 2014. COMBINE archive and OMEX format: one file to share all information to reproduce a modeling project. BMC Bioinformatics 15:369. DOI: https://doi.org/10.1186/s12859-014-0369-z, PMID: 25494900\n\nBezaire MJ, Raikov I, Burk K, Vyas D, Soltesz I. 2016. Interneuronal mechanisms of hippocampal theta oscillations in a full-scale model of the rodent CA1 circuit. eLife 5:e18566. DOI: https://doi.org/10.7554/eLife.18566, PMID: 28009257\n\nBilleh YN, Cai B, Gratiy SL, Dai K, Iyer R, Gouwens NW, Abbasi-Asl R, Jia X, Siegle JH, Olsen SR, Koch C, Mihalas S, Arkhipov A. 2020. Systematic integration of structural and functional data into multi-scale models of mouse primary visual cortex. Neuron 106:388–403. DOI: https://doi.org/10.1016/j.neuron.2020.01.040, PMID: 32142648\n\nBillings G, Piasini E, Lőrincz A, Nusser Z, Silver RA. 2014. Network structure within the cerebellar input layer enables lossless sparse encoding. Neuron 83:960–974. DOI: https://doi.org/10.1016/j.neuron.2014.07.020, PMID: 25123311\n\nBirgiolas J, Dietrich SW, Crook S, Rajadesingan A, Zhang C, Penchala SV, Addepalli V. 2015. Ontology-assisted keyword search for NeuroML models. SSDBM 2015. DOI: https://doi.org/10.1145/2791347.2791360\n\nBirgiolas J, Haynes V, Gleeson P, Gerkin RC, Dietrich SW, Crook S. 2023. NeuroML-DB: Sharing and characterizing data-driven neuroscience models described in NeuroML. PLOS Computational Biology 19:e1010941. DOI: https://doi.org/10.1371/journal.pcbi.1010941, PMID: 36867658\n\nBlundell I, Brette R, Cleland TA, Close TG, Coca D, Davison AP, Diaz-Pier S, Fernandez Musoles C, Gleeson P, Goodman DFM, Hines M, Hopkins MW, Kumbhar P, Lester DR, Marin B, Morrison A, Müller E, Nowotny T, Peyser A, Plotnikov D, et al. 2018. Code generation in computational neuroscience: a review of tools and techniques. Frontiers in Neuroinformatics 12:68. DOI: https://doi.org/10.3389/fninf.2018.00068, PMID: 30455637\n\nBower JM, Beeman D. 1998. The Book of GENESIS: Exploring Realistic Neural Models with the GEneral NEural SImu Lation System. Springer. DOI: https://doi.org/10.1007/978-1-4612-1634-6\n\nBoyle JH, Cohen N. 2008. Caenorhabditis elegans body wall muscles are simple actuators. Biosystems 94:170–181. DOI: https://doi.org/10.1016/j.biosystems.2008.05.025\n\nBrunel N. 2000. Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. Journal of Computational Neuroscience 8:183–208. DOI: https://doi.org/10.1023/A:1008925309027\n\nCampagnola L. 2023. Vispy/vispy. 0.13.0. Zenodo. https://doi.org/10.5281/zenodo.7945364\n\nCannon RC, Gewaltig MO, Gleeson P, Bhalla US, Cornelis H, Hines ML, Howell FW, Muller E, Stiles JR, Wils S, De Schutter E. 2007. Interoperability of neuroscience modeling software: current status and future directions. Neuroinformatics 5:127–138. DOI: https://doi.org/10.1007/s12021-007-0004-5, PMID: 17873374\n\nCannon RC, Gleeson P, Crook S, Ganapathy G, Marin B, Piasini E, Silver RA. 2014. LEMS: a language for expressing complex biological models in concise and hierarchical form and its use in underpinning NeuroML 2. Frontiers in Neuroinformatics 8:79. DOI: https://doi.org/10.3389/fninf.2014.00079, PMID: 25309419\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":34.63,"w":408.78,"h":684.35}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://github.com/neuroml","text":""},{"url":"https://doi.org/10.1007/s12021-020-09509-0","text":" "},{"url":"https://doi.org/10.1007/s12021-020-09509-0","text":"09509-0, PMID: 33506383 Akar NA"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/33506383","text":", Cumming B, Karakasis V, Kusters A, Klijn W, Peyser A, Yates S. 2019. Arbor — a morphologically-"},{"url":"https://doi.org/10.1109/EMPDP.2019.8671560","text":", Donohue DE, Halavi M. 2007. NeuroMorpho.Org: a central resource for neuronal morphologies. "},{"url":"https://doi.org/10.1523/JNEUROSCI.2055-07.2007","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/17728438","text":"17728438 Awile O"},{"url":"https://doi.org/10.3389/fninf.2022.884046","text":" "},{"url":"https://doi.org/10.3389/fninf.2022.884046","text":"doi.org/10.3389/fninf.2022.884046, PMID: 35832575 Bahl A"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/35832575","text":", Stemmler MB, Herz AVM, Roth A. 2012. Automated optimization of a reduced layer 5 pyramidal cell "},{"url":"https://doi.org/10.1016/j.jneumeth.2012.04.006","text":" "},{"url":"https://doi.org/10.1016/j.jneumeth.2012.04.006","text":"1016/j.jneumeth.2012.04.006, PMID: 22524993 Bergmann FT"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/22524993","text":", Adams R, Moodie S, Cooper J, Glont M, Golebiewski M, Hucka M, Laibe C, Miller AK, "},{"url":"https://doi.org/10.1186/s12859-014-0369-z","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/25494900","text":"25494900 Bezaire MJ"},{"url":"https://doi.org/10.7554/eLife.18566","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/28009257","text":"Billeh YN"},{"url":"https://doi.org/10.1016/j.neuron.2020.01.040","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/32142648","text":"32142648 Billings G"},{"url":"https://doi.org/10.1016/j.neuron.2014.07.020","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/25123311","text":"Birgiolas J"},{"url":"https://doi.org/10.1145/2791347.2791360","text":", Haynes V, Gleeson P, Gerkin RC, Dietrich SW, Crook S. 2023. NeuroML-"},{"url":"https://doi.org/10.1371/journal.pcbi.1010941","text":", Brette R, Cleland TA, Close TG, Coca D, Davison AP, Diaz-"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/36867658","text":"Pier S, Fernandez Musoles C, Gleeson P, "},{"url":"https://doi.org/10.3389/fninf.2018.00068","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/30455637","text":"30455637 Bower JM"},{"url":"https://doi.org/10.1007/978-1-4612-1634-6","text":"Caenorhabditis elegans"},{"url":"https://doi.org/10.1016/j.biosystems.2008.05.025","text":". 2000. Brunel N. Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons. "},{"url":"https://doi.org/10.1023/A:1008925309027","text":". 2023. Vispy/vispy. 0.13.0. Zenodo. https://doi.org/10.5281/zenodo.7945364"},{"url":"https://doi.org/10.5281/zenodo.7945364","text":", Gewaltig MO, Gleeson P, Bhalla US, Cornelis H, Hines ML, Howell FW, Muller E, Stiles JR, Wils S, "},{"url":"https://doi.org/10.1007/s12021-007-0004-5","text":", Gleeson P, Crook S, Ganapathy G, Marin B, Piasini E, Silver RA. 2014. LEMS: a language for "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/17873374","text":", Gleeson P, Crook S, Ganapathy G, Marin B, Piasini E, Silver RA. 2014. LEMS: a language for "},{"url":"https://doi.org/10.3389/fninf.2014.00079","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/25309419","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.314},{"page":41,"text":"            Tools  and  resourceseuroscience\n                                    Cayco- Gajic  NA, Clopath C, Silver RA. 2017. Sparse synaptic connectivity is required for decorrelation and      Cayco- Gajic  NA, Clopath C, Silver RA. 2017. Sparse synaptic connectivity is required for decorrelation and      Cayco- Gajic  NA, Clopath C, Silver RA. 2017. Sparse synaptic connectivity is required for decorrelation and\n                                                                                                                                                                                                                                                                         pattern separation in feedforward networks. Nature Communications 8:1116. DOI: https://doi.org/10.1038/            pattern separation in feedforward networks. Nature Communications 8:1116. DOI: https://doi.org/10.1038/            pattern separation in feedforward networks. Nature Communications 8:1116. DOI: https://doi.org/10.1038/            pattern separation in feedforward networks. Nature Communications 8:1116. DOI: https://doi.org/10.1038/\n                                                                                                                                                                                                                                                                         s41467-017-01109-y, PMID: 29061964                                                                                 s41467-017-01109-y, PMID: 29061964                                                                                 s41467-017-01109-y, PMID: 29061964                                                                                 s41467-017-01109-y, PMID: 29061964\n                                    Choi K, Medley JK, König M, Stocking K, Smith L, Gu S, Sauro HM. 2018. Tellurium: An extensible python-           Choi K, Medley JK, König M, Stocking K, Smith L, Gu S, Sauro HM. 2018. Tellurium: An extensible python-           Choi K, Medley JK, König M, Stocking K, Smith L, Gu S, Sauro HM. 2018. Tellurium: An extensible python-\nbased\n                                                                                                                                                                                                                                                                         modeling environment for systems and synthetic biology. Bio Systems 171:74–79. DOI: https://doi.org/10.            modeling environment for systems and synthetic biology. Bio Systems 171:74–79. DOI: https://doi.org/10.            modeling environment for systems and synthetic biology. Bio Systems 171:74–79. DOI: https://doi.org/10.            modeling environment for systems and synthetic biology. Bio Systems 171:74–79. DOI: https://doi.org/10.\n                                                                                                                                                                                                                                                                         1016/j.biosystems.2018.07.006, PMID: 30053414                                                                      1016/j.biosystems.2018.07.006, PMID: 30053414                                                                      1016/j.biosystems.2018.07.006, PMID: 30053414                                                                      1016/j.biosystems.2018.07.006, PMID: 30053414\n                                    Dai K, Hernando J, Billeh YN, Gratiy SL, Planas J, Davison AP, Dura-                                              Dai K, Hernando J, Billeh YN, Gratiy SL, Planas J, Davison AP, Dura-                                              Dai K, Hernando J, Billeh YN, Gratiy SL, Planas J, Davison AP, Dura-\nernal S, Gleeson P, Devresse A, Dichter BK,\n                                                                                                                                                                                                                                                                         Gevaert M, King JG, Van Geit WAH, Povolotsky AV, Muller E, Courcol JD, Arkhipov A. 2020. The SONATA data           Gevaert M, King JG, Van Geit WAH, Povolotsky AV, Muller E, Courcol JD, Arkhipov A. 2020. The SONATA data           Gevaert M, King JG, Van Geit WAH, Povolotsky AV, Muller E, Courcol JD, Arkhipov A. 2020. The SONATA data           Gevaert M, King JG, Van Geit WAH, Povolotsky AV, Muller E, Courcol JD, Arkhipov A. 2020. The SONATA data\n                                                                                                                                                                                                                                                                         format for efﬁcient description of large-                                                                          format for efﬁcient description of large-                                                                          format for efﬁcient description of large-                                                                          format for efﬁcient description of large-\nscale network models. PLOS Computational Biology 16:e1007696.\n                                                                                                                                                                                                                                                                         DOI: https://doi.org/10.1371/journal.pcbi.1007696, PMID: 32092054                                                  DOI: https://doi.org/10.1371/journal.pcbi.1007696, PMID: 32092054                                                  DOI: https://doi.org/10.1371/journal.pcbi.1007696, PMID: 32092054                                                  DOI: https://doi.org/10.1371/journal.pcbi.1007696, PMID: 32092054\n                                    Davison AP, Brüderle D, Eppler J, Kremkow J, Muller E, Pecevski D, Perrinet L, Yger P. 2008. PyNN: a common       Davison AP, Brüderle D, Eppler J, Kremkow J, Muller E, Pecevski D, Perrinet L, Yger P. 2008. PyNN: a common       Davison AP, Brüderle D, Eppler J, Kremkow J, Muller E, Pecevski D, Perrinet L, Yger P. 2008. PyNN: a common\n                                                                                                                                                                                                                                                                         interface for neuronal network simulators. Frontiers in Neuroinformatics 2:11. DOI: https://doi.org/10.3389/       interface for neuronal network simulators. Frontiers in Neuroinformatics 2:11. DOI: https://doi.org/10.3389/       interface for neuronal network simulators. Frontiers in Neuroinformatics 2:11. DOI: https://doi.org/10.3389/       interface for neuronal network simulators. Frontiers in Neuroinformatics 2:11. DOI: https://doi.org/10.3389/\n                                                                                                                                                                                                                                                                         neuro.11.011.2008, PMID: 19194529                                                                                  neuro.11.011.2008, PMID: 19194529                                                                                  neuro.11.011.2008, PMID: 19194529                                                                                  neuro.11.011.2008, PMID: 19194529\n                                    Denker M. 2018. Collaborative HPC-                                                                                Denker M. 2018. Collaborative HPC-                                                                                Denker M. 2018. Collaborative HPC-\nenabled workﬂows on the HBP Collaboratory using the Elephant\n                                                                                                                                                                                                                                                                         framework. Neuroinformatics 19:0019. DOI: https://doi.org/10.12751/incf.ni2018.0019                                framework. Neuroinformatics 19:0019. DOI: https://doi.org/10.12751/incf.ni2018.0019                                framework. Neuroinformatics 19:0019. DOI: https://doi.org/10.12751/incf.ni2018.0019                                framework. Neuroinformatics 19:0019. DOI: https://doi.org/10.12751/incf.ni2018.0019\n                                    De Schutter E, Bower JM. 1994. An active membrane model of the cerebellar Purkinje cell. I. Simulation of         De Schutter E, Bower JM. 1994. An active membrane model of the cerebellar Purkinje cell. I. Simulation of         De Schutter E, Bower JM. 1994. An active membrane model of the cerebellar Purkinje cell. I. Simulation of\n                                                                                                                                                                                                                                                                         current clamps in slice. Journal of Neurophysiology 71:375–400. DOI: https://doi.org/10.1152/jn.1994.71.1.         current clamps in slice. Journal of Neurophysiology 71:375–400. DOI: https://doi.org/10.1152/jn.1994.71.1.         current clamps in slice. Journal of Neurophysiology 71:375–400. DOI: https://doi.org/10.1152/jn.1994.71.1.         current clamps in slice. Journal of Neurophysiology 71:375–400. DOI: https://doi.org/10.1152/jn.1994.71.1.\n                                                                                                                                                                                                                                                                         375, PMID: 7512629                                                                                                 375, PMID: 7512629                                                                                                 375, PMID: 7512629                                                                                                 375, PMID: 7512629\n                                    Druckmann S, Banitt Y, Gidon A, Schürmann F, Markram H, Segev I. 2007. A novel multiple objective                 Druckmann S, Banitt Y, Gidon A, Schürmann F, Markram H, Segev I. 2007. A novel multiple objective                 Druckmann S, Banitt Y, Gidon A, Schürmann F, Markram H, Segev I. 2007. A novel multiple objective\n                                                                                                                                                                                                                                                                         optimization framework for constraining conductance-                                                               optimization framework for constraining conductance-                                                               optimization framework for constraining conductance-                                                               optimization framework for constraining conductance-\nbased neuron models by experimental data. Frontiers in\n                                                                                                                                                                                                                                                                         Neuroscience 1:7–18. DOI: https://doi.org/10.3389/neuro.01.1.1.001.2007, PMID: 18982116                            Neuroscience 1:7–18. DOI: https://doi.org/10.3389/neuro.01.1.1.001.2007, PMID: 18982116                            Neuroscience 1:7–18. DOI: https://doi.org/10.3389/neuro.01.1.1.001.2007, PMID: 18982116                            Neuroscience 1:7–18. DOI: https://doi.org/10.3389/neuro.01.1.1.001.2007, PMID: 18982116\n                                    Dura- Bernal  S, Neymotin SA, Kerr CC, Sivagnanam S, Majumdar A, Francis JT, Lytton WW. 2017. Evolutionary        Dura- Bernal  S, Neymotin SA, Kerr CC, Sivagnanam S, Majumdar A, Francis JT, Lytton WW. 2017. Evolutionary        Dura- Bernal  S, Neymotin SA, Kerr CC, Sivagnanam S, Majumdar A, Francis JT, Lytton WW. 2017. Evolutionary\n                                                                                                                                                                                                                                                                         algorithm optimization of biological learning parameters in a biomimetic neuroprosthesis. IBM Journal of           algorithm optimization of biological learning parameters in a biomimetic neuroprosthesis. IBM Journal of           algorithm optimization of biological learning parameters in a biomimetic neuroprosthesis. IBM Journal of           algorithm optimization of biological learning parameters in a biomimetic neuroprosthesis. IBM Journal of\n                                                                                                                                                                                                                                                                         Research and Development 61:6. DOI: https://doi.org/10.1147/JRD.2017.2656758, PMID: 29200477                       Research and Development 61:6. DOI: https://doi.org/10.1147/JRD.2017.2656758, PMID: 29200477                       Research and Development 61:6. DOI: https://doi.org/10.1147/JRD.2017.2656758, PMID: 29200477                       Research and Development 61:6. DOI: https://doi.org/10.1147/JRD.2017.2656758, PMID: 29200477\n                                    Dura- Bernal  S, Suter BA, Gleeson P, Cantarelli M, Quintana A, Rodriguez F, Kedziora DJ, Chadderdon GL,          Dura- Bernal  S, Suter BA, Gleeson P, Cantarelli M, Quintana A, Rodriguez F, Kedziora DJ, Chadderdon GL,          Dura- Bernal  S, Suter BA, Gleeson P, Cantarelli M, Quintana A, Rodriguez F, Kedziora DJ, Chadderdon GL,\n                                                                                                                                                                                                                                                                         Kerr CC, Neymotin SA, McDougal RA, Hines M, Shepherd GM, Lytton WW. 2019. NetPyNE, a tool for                      Kerr CC, Neymotin SA, McDougal RA, Hines M, Shepherd GM, Lytton WW. 2019. NetPyNE, a tool for                      Kerr CC, Neymotin SA, McDougal RA, Hines M, Shepherd GM, Lytton WW. 2019. NetPyNE, a tool for                      Kerr CC, Neymotin SA, McDougal RA, Hines M, Shepherd GM, Lytton WW. 2019. NetPyNE, a tool for\n                                                                                                                                                                                                                                                                         data-                                                                                                              data-                                                                                                              data-                                                                                                              data-\ndriven multiscale modeling of brain circuits. eLife 8:e44494. DOI: https://doi.org/10.7554/eLife.44494,\n                                                                                                                                                                                                                                                                         PMID: 31025934                                                                                                     PMID: 31025934                                                                                                     PMID: 31025934                                                                                                     PMID: 31025934\n                                    Einevoll GT, Destexhe A, Diesmann M, Grün S, Jirsa V, de Kamps M, Migliore M, Ness TV, Plesser HE,                Einevoll GT, Destexhe A, Diesmann M, Grün S, Jirsa V, de Kamps M, Migliore M, Ness TV, Plesser HE,                Einevoll GT, Destexhe A, Diesmann M, Grün S, Jirsa V, de Kamps M, Migliore M, Ness TV, Plesser HE,\n                                                                                                                                                                                                                                                                         Schürmann F. 2019. The scientiﬁc case for brain simulations. Neuron 102:735–744. DOI: https://doi.org/10.          Schürmann F. 2019. The scientiﬁc case for brain simulations. Neuron 102:735–744. DOI: https://doi.org/10.          Schürmann F. 2019. The scientiﬁc case for brain simulations. Neuron 102:735–744. DOI: https://doi.org/10.          Schürmann F. 2019. The scientiﬁc case for brain simulations. Neuron 102:735–744. DOI: https://doi.org/10.\n                                                                                                                                                                                                                                                                         1016/j.neuron.2019.03.027, PMID: 31121126                                                                          1016/j.neuron.2019.03.027, PMID: 31121126                                                                          1016/j.neuron.2019.03.027, PMID: 31121126                                                                          1016/j.neuron.2019.03.027, PMID: 31121126\n                                    Executable Books Community. 2020. Executable books community, jupyter book. 01. Zenodo. https://doi.org/          Executable Books Community. 2020. Executable books community, jupyter book. 01. Zenodo. https://doi.org/          Executable Books Community. 2020. Executable books community, jupyter book. 01. Zenodo. https://doi.org/\n                                                                                                                                                                                                                                                                         10.5281/zenodo.4539666                                                                                             10.5281/zenodo.4539666                                                                                             10.5281/zenodo.4539666                                                                                             10.5281/zenodo.4539666\n                                    Ferguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2013. Experimentally constrained CA1 fast-               Ferguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2013. Experimentally constrained CA1 fast-               Ferguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2013. Experimentally constrained CA1 fast-\nﬁring\n                                                                                                                                                                                                                                                                         parvalbumin-                                                                                                       parvalbumin-                                                                                                       parvalbumin-                                                                                                       parvalbumin-\npositive interneuron network models exhibit sharp transitions into coherent high frequency\n                                                                                                                                                                                                                                                                         rhythms. Frontiers in Computational Neuroscience 7:144. DOI: https://doi.org/10.3389/fncom.2013.00144,             rhythms. Frontiers in Computational Neuroscience 7:144. DOI: https://doi.org/10.3389/fncom.2013.00144,             rhythms. Frontiers in Computational Neuroscience 7:144. DOI: https://doi.org/10.3389/fncom.2013.00144,             rhythms. Frontiers in Computational Neuroscience 7:144. DOI: https://doi.org/10.3389/fncom.2013.00144,\n                                                                                                                                                                                                                                                                         PMID: 24155715                                                                                                     PMID: 24155715                                                                                                     PMID: 24155715                                                                                                     PMID: 24155715\n                                    Ferguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2014. Simple, biologically-                              Ferguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2014. Simple, biologically-                              Ferguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2014. Simple, biologically-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  constrained CA1\n                                                                                                                                                                                                                                                                         pyramidal cell models using an intact, whole hippocampus context. F1000Research 3:104. DOI: https://doi.org/       pyramidal cell models using an intact, whole hippocampus context. F1000Research 3:104. DOI: https://doi.org/       pyramidal cell models using an intact, whole hippocampus context. F1000Research 3:104. DOI: https://doi.org/       pyramidal cell models using an intact, whole hippocampus context. F1000Research 3:104. DOI: https://doi.org/\n                                                                                                                                                                                                                                                                         10.12688/f1000research.3894.1, PMID: 25383182                                                                      10.12688/f1000research.3894.1, PMID: 25383182                                                                      10.12688/f1000research.3894.1, PMID: 25383182                                                                      10.12688/f1000research.3894.1, PMID: 25383182\n                                    FitzHugh R. 1961. Impulses and physiological states in theoretical models of nerve membrane. Biophysical          FitzHugh R. 1961. Impulses and physiological states in theoretical models of nerve membrane. Biophysical          FitzHugh R. 1961. Impulses and physiological states in theoretical models of nerve membrane. Biophysical\n                                                                                                                                                                                                                                                                         Journal 1:445–466. DOI: https://doi.org/10.1016/S0006-3495(61)86902-6                                              Journal 1:445–466. DOI: https://doi.org/10.1016/S0006-3495(61)86902-6                                              Journal 1:445–466. DOI: https://doi.org/10.1016/S0006-3495(61)86902-6                                              Journal 1:445–466. DOI: https://doi.org/10.1016/S0006-3495(61)86902-6\n                                    Garcia S, Guarino D, Jaillet F, Jennings T, Pröpper R, Rautenberg PL, Rodgers CC, Sobolev A, Wachtler T, Yger P,  Garcia S, Guarino D, Jaillet F, Jennings T, Pröpper R, Rautenberg PL, Rodgers CC, Sobolev A, Wachtler T, Yger P,  Garcia S, Guarino D, Jaillet F, Jennings T, Pröpper R, Rautenberg PL, Rodgers CC, Sobolev A, Wachtler T, Yger P,\n                                                                                                                                                                                                                                                                         Davison AP. 2014. Neo: an object model for handling electrophysiology data in multiple formats. Frontiers in       Davison AP. 2014. Neo: an object model for handling electrophysiology data in multiple formats. Frontiers in       Davison AP. 2014. Neo: an object model for handling electrophysiology data in multiple formats. Frontiers in       Davison AP. 2014. Neo: an object model for handling electrophysiology data in multiple formats. Frontiers in\n                                                                                                                                                                                                                                                                         Neuroinformatics 8:10. DOI: https://doi.org/10.3389/fninf.2014.00010, PMID: 24600386                               Neuroinformatics 8:10. DOI: https://doi.org/10.3389/fninf.2014.00010, PMID: 24600386                               Neuroinformatics 8:10. DOI: https://doi.org/10.3389/fninf.2014.00010, PMID: 24600386                               Neuroinformatics 8:10. DOI: https://doi.org/10.3389/fninf.2014.00010, PMID: 24600386\n                                    Garcia Del Molino LC, Yang GR, Mejias JF, Wang X-                                                                 Garcia Del Molino LC, Yang GR, Mejias JF, Wang X-                                                                 Garcia Del Molino LC, Yang GR, Mejias JF, Wang X-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  J. 2017. Paradoxical response reversal of top-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  down\n                                                                                                                                                                                                                                                                         modulation in cortical circuits with three interneuron types. eLife 6:e29742. DOI: https://doi.org/10.7554/eLife.  modulation in cortical circuits with three interneuron types. eLife 6:e29742. DOI: https://doi.org/10.7554/eLife.  modulation in cortical circuits with three interneuron types. eLife 6:e29742. DOI: https://doi.org/10.7554/eLife.  modulation in cortical circuits with three interneuron types. eLife 6:e29742. DOI: https://doi.org/10.7554/eLife.\n                                                                                                                                                                                                                                                                         29742, PMID: 29256863                                                                                              29742, PMID: 29256863                                                                                              29742, PMID: 29256863                                                                                              29742, PMID: 29256863\n                                    Gerkin RC, Birgiolas J, Jarvis RJ, Omar C, Crook SM. 2019. NeuronUnit: a package for data-                        Gerkin RC, Birgiolas J, Jarvis RJ, Omar C, Crook SM. 2019. NeuronUnit: a package for data-                        Gerkin RC, Birgiolas J, Jarvis RJ, Omar C, Crook SM. 2019. NeuronUnit: a package for data-\ndriven validation of\n                                                                                                                                                                                                                                                                         neuron models using sciunit. bioRxiv. DOI: https://doi.org/10.1101/665331                                          neuron models using sciunit. bioRxiv. DOI: https://doi.org/10.1101/665331                                          neuron models using sciunit. bioRxiv. DOI: https://doi.org/10.1101/665331                                          neuron models using sciunit. bioRxiv. DOI: https://doi.org/10.1101/665331\n                                    Gewaltig MO, Diesmann M. 2007. NEST (NEural Simulation Tool). Scholarpedia 2:1430. DOI: https://doi.org/10.       Gewaltig MO, Diesmann M. 2007. NEST (NEural Simulation Tool). Scholarpedia 2:1430. DOI: https://doi.org/10.       Gewaltig MO, Diesmann M. 2007. NEST (NEural Simulation Tool). Scholarpedia 2:1430. DOI: https://doi.org/10.\n                                                                                                                                                                                                                                                                         4249/scholarpedia.1430                                                                                             4249/scholarpedia.1430                                                                                             4249/scholarpedia.1430                                                                                             4249/scholarpedia.1430\n                                    Gleeson P, Steuber V, Silver RA. 2007. neuroConstruct: a tool for modeling networks of neurons in 3D space.       Gleeson P, Steuber V, Silver RA. 2007. neuroConstruct: a tool for modeling networks of neurons in 3D space.       Gleeson P, Steuber V, Silver RA. 2007. neuroConstruct: a tool for modeling networks of neurons in 3D space.\n                                                                                                                                                                                                                                                                         Neuron 54:219–235. DOI: https://doi.org/10.1016/j.neuron.2007.03.025, PMID: 17442244                               Neuron 54:219–235. DOI: https://doi.org/10.1016/j.neuron.2007.03.025, PMID: 17442244                               Neuron 54:219–235. DOI: https://doi.org/10.1016/j.neuron.2007.03.025, PMID: 17442244                               Neuron 54:219–235. DOI: https://doi.org/10.1016/j.neuron.2007.03.025, PMID: 17442244\n                                    Gleeson P, Crook S, Cannon RC, Hines ML, Billings GO, Farinella M, Morse TM, Davison AP, Ray S, Bhalla US,        Gleeson P, Crook S, Cannon RC, Hines ML, Billings GO, Farinella M, Morse TM, Davison AP, Ray S, Bhalla US,        Gleeson P, Crook S, Cannon RC, Hines ML, Billings GO, Farinella M, Morse TM, Davison AP, Ray S, Bhalla US,\n                                                                                                                                                                                                                                                                         Barnes SR, Dimitrova YD, Silver RA. 2010. NeuroML: a language for describing data driven models of neurons         Barnes SR, Dimitrova YD, Silver RA. 2010. NeuroML: a language for describing data driven models of neurons         Barnes SR, Dimitrova YD, Silver RA. 2010. NeuroML: a language for describing data driven models of neurons         Barnes SR, Dimitrova YD, Silver RA. 2010. NeuroML: a language for describing data driven models of neurons\n                                                                                                                                                                                                                                                                         and networks with a high degree of biological detail. PLOS Computational Biology 6:e1000815. DOI: https://         and networks with a high degree of biological detail. PLOS Computational Biology 6:e1000815. DOI: https://         and networks with a high degree of biological detail. PLOS Computational Biology 6:e1000815. DOI: https://         and networks with a high degree of biological detail. PLOS Computational Biology 6:e1000815. DOI: https://\n                                                                                                                                                                                                                                                                         doi.org/10.1371/journal.pcbi.1000815, PMID: 20585541                                                               doi.org/10.1371/journal.pcbi.1000815, PMID: 20585541                                                               doi.org/10.1371/journal.pcbi.1000815, PMID: 20585541                                                               doi.org/10.1371/journal.pcbi.1000815, PMID: 20585541\n                                    Gleeson P, Lung D, Grosu R, Hasani R, Larson SD. 2018. c302: a multiscale framework for modelling the nervous     Gleeson P, Lung D, Grosu R, Hasani R, Larson SD. 2018. c302: a multiscale framework for modelling the nervous     Gleeson P, Lung D, Grosu R, Hasani R, Larson SD. 2018. c302: a multiscale framework for modelling the nervous\n                                                                                                                                                                                                                                                                         system of Caenorhabditis elegans. Philosophical Transactions of the Royal Society of London. Series B,             system of Caenorhabditis elegans. Philosophical Transactions of the Royal Society of London. Series B,             system of Caenorhabditis elegans. Philosophical Transactions of the Royal Society of London. Series B,             system of Caenorhabditis elegans. Philosophical Transactions of the Royal Society of London. Series B,\n                                                                                                                                                                                                                                                                         Biological Sciences 373:20170379. DOI: https://doi.org/10.1098/rstb.2017.0379, PMID: 30201842                      Biological Sciences 373:20170379. DOI: https://doi.org/10.1098/rstb.2017.0379, PMID: 30201842                      Biological Sciences 373:20170379. DOI: https://doi.org/10.1098/rstb.2017.0379, PMID: 30201842                      Biological Sciences 373:20170379. DOI: https://doi.org/10.1098/rstb.2017.0379, PMID: 30201842\n                                    Gleeson P. 2019a. OpenSourceBrain/thalamocortical. 0.4. Zenodo. https://doi.org/10.5281/zenodo.2535506            Gleeson P. 2019a. OpenSourceBrain/thalamocortical. 0.4. Zenodo. https://doi.org/10.5281/zenodo.2535506            Gleeson P. 2019a. OpenSourceBrain/thalamocortical. 0.4. Zenodo. https://doi.org/10.5281/zenodo.2535506\n                                    Gleeson P, Cantarelli M, Marin B, Quintana A, Earnshaw M, Sadeh S, Piasini E, Birgiolas J, Cannon RC,             Gleeson P, Cantarelli M, Marin B, Quintana A, Earnshaw M, Sadeh S, Piasini E, Birgiolas J, Cannon RC,             Gleeson P, Cantarelli M, Marin B, Quintana A, Earnshaw M, Sadeh S, Piasini E, Birgiolas J, Cannon RC,\n                                                                                                                                                                                                                                                                         Cayco-                                                                                                             Cayco-                                                                                                             Cayco-                                                                                                             Cayco-\najic NA, Crook S, Davison AP, Dura-\nernal S, Ecker A, Hines ML, Idili G, Lanore F, Larson SD,\n                                                                                                                                                                                                                                                                         Lytton WW, Majumdar A, et al. 2019b. Open source brain: a collaborative resource for visualizing, analyzing,       Lytton WW, Majumdar A, et al. 2019b. Open source brain: a collaborative resource for visualizing, analyzing,       Lytton WW, Majumdar A, et al. 2019b. Open source brain: a collaborative resource for visualizing, analyzing,       Lytton WW, Majumdar A, et al. 2019b. Open source brain: a collaborative resource for visualizing, analyzing,\n                                                                                                                                                                                                                                                                         simulating, and developing standardized models of neurons and circuits. Neuron 103:395–411. DOI: https://          simulating, and developing standardized models of neurons and circuits. Neuron 103:395–411. DOI: https://          simulating, and developing standardized models of neurons and circuits. Neuron 103:395–411. DOI: https://          simulating, and developing standardized models of neurons and circuits. Neuron 103:395–411. DOI: https://\n                                                                                                                                                                                                                                                                         doi.org/10.1016/j.neuron.2019.05.019, PMID: 31201122                                                               doi.org/10.1016/j.neuron.2019.05.019, PMID: 31201122                                                               doi.org/10.1016/j.neuron.2019.05.019, PMID: 31201122                                                               doi.org/10.1016/j.neuron.2019.05.019, PMID: 31201122\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             41 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nCayco- Gajic NA, Clopath C, Silver RA. 2017. Sparse synaptic connectivity is required for decorrelation and pattern separation in feedforward networks. Nature Communications 8:1116. DOI: https://doi.org/10.1038/s41467-017-01109-y, PMID: 29061964\n\nChoi K, Medley JK, König M, Stocking K, Smith L, Gu S, Sauro HM. 2018. Tellurium: An extensible python-based modeling environment for systems and synthetic biology. Bio Systems 171:74–79. DOI: https://doi.org/10.1016/j.biosystems.2018.07.006, PMID: 30053414\n\nDai K, Hernando J, Billeh YN, Gratiy SL, Planas J, Davison AP, Dura- Bernal S, Gleeson P, Devresse A, Dichter BK, Gevaert M, King JG, Van Geit WAH, Povolotsky AV, Muller E, Courcol JD, Arkhipov A. 2020. The SONATA data format for efficient description of large-scale network models. PLOS Computational Biology 16:e1007696. DOI: https://doi.org/10.1371/journal.pcbi.1007696, PMID: 32092054\n\nDavison AP, Brüderle D, Eppler J, Kremkow J, Muller E, Pecevski D, Perrinet L, Yger P. 2008. PyNN: a common interface for neuronal network simulators. Frontiers in Neuroinformatics 2:11. DOI: https://doi.org/10.3389/neuro.11.011.2008, PMID: 19194529\n\nDenker M. 2018. Collaborative HPC-enabled workflows on the HBP Collaboratory using the Elephant framework. Neuroinformatics 19:0019. DOI: https://doi.org/10.12751/incf.ni2018.0019\n\nDe Schutter E, Bower JM. 1994. An active membrane model of the cerebellar Purkinje cell. I. Simulation of current clamps in slice. Journal of Neurophysiology 71:375–400. DOI: https://doi.org/10.1152/jn.1994.71.1.375, PMID: 7512629\n\nDruckmann S, Banitt Y, Gidon A, Schürmann F, Markram H, Segev I. 2007. A novel multiple objective optimization framework for constraining conductance-based neuron models by experimental data. Frontiers in Neuroscience 1:7–18. DOI: https://doi.org/10.3389/neuro.01.1.1.001.2007, PMID: 18982116\n\nDura- Bernal S, Neymotin SA, Kerr CC, Sivagnanam S, Majumdar A, Francis JT, Lytton WW. 2017. Evolutionary algorithm optimization of biological learning parameters in a biomimetic neuroprosthesis. IBM Journal of Research and Development 61:6. DOI: https://doi.org/10.1147/JRD.2017.2656758, PMID: 29200477\n\nDura- Bernal S, Suter BA, Gleeson P, Cantarelli M, Quintana A, Rodriguez F, Kedziora DJ, Chadderdon GL, Kerr CC, Neymotin SA, McDougal RA, Hines M, Shepherd GM, Lytton WW. 2019. NetPyNE, a tool for data-driven multiscale modeling of brain circuits. eLife 8:e44494. DOI: https://doi.org/10.7554/eLife.44494, PMID: 31025934\n\nEinevoll GT, Destexhe A, Diesmann M, Grün S, Jirsa V, de Kamps M, Migliore M, Ness TV, Plesser HE, Schürmann F. 2019. The scientific case for brain simulations. Neuron 102:735–744. DOI: https://doi.org/10.1016/j.neuron.2019.03.027, PMID: 31121126\n\nExecutable Books Community. 2020. Executable books community, jupyter book. 01. Zenodo. https://doi.org/10.5281/zenodo.4539666\n\nFerguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2013. Experimentally constrained CA1 fast-firing parvalbumin-positive interneuron network models exhibit sharp transitions into coherent high frequency rhythms. Frontiers in Computational Neuroscience 7:144. DOI: https://doi.org/10.3389/fncom.2013.00144, PMID: 24155715\n\nFerguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2014. Simple, biologically-constrained CA1 pyramidal cell models using an intact, whole hippocampus context. F1000Research 3:104. DOI: https://doi.org/10.12688/f1000research.3894.1, PMID: 25383182\n\nFitzHugh R. 1961. Impulses and physiological states in theoretical models of nerve membrane. Biophysical Journal 1:445–466. DOI: https://doi.org/10.1016/S0006-3495(61)86902-6\n\nGarcia S, Guarino D, Jaillet F, Jennings T, Pröpper R, Rautenberg PL, Rodgers CC, Sobolev A, Wachtler T, Yger P, Davison AP. 2014. Neo: an object model for handling electrophysiology data in multiple formats. Frontiers in Neuroinformatics 8:10. DOI: https://doi.org/10.3389/fninf.2014.00010, PMID: 24600386\n\nGarcia Del Molino LC, Yang GR, Mejias JF, Wang X-J. 2017. Paradoxical response reversal of top-down modulation in cortical circuits with three interneuron types. eLife 6:e29742. DOI: https://doi.org/10.7554/eLife.29742, PMID: 29256863\n\nGerkin RC, Birgiolas J, Jarvis RJ, Omar C, Crook SM. 2019. NeuronUnit: a package for data-driven validation of neuron models using sciunit. bioRxiv. DOI: https://doi.org/10.1101/665331\n\nGewaltig MO, Diesmann M. 2007. NEST (NEural Simulation Tool). Scholarpedia 2:1430. DOI: https://doi.org/10.4249/scholarpedia.1430\n\nGleeson P, Steuber V, Silver RA. 2007. neuroConstruct: a tool for modeling networks of neurons in 3D space. Neuron 54:219–235. DOI: https://doi.org/10.1016/j.neuron.2007.03.025, PMID: 17442244\n\nGleeson P, Crook S, Cannon RC, Hines ML, Billings GO, Farinella M, Morse TM, Davison AP, Ray S, Bhalla US, Barnes SR, Dimitrova YD, Silver RA. 2010. NeuroML: a language for describing data driven models of neurons and networks with a high degree of biological detail. PLOS Computational Biology 6:e1000815. DOI: https://doi.org/10.1371/journal.pcbi.1000815, PMID: 20585541\n\nGleeson P, Lung D, Grosu R, Hasani R, Larson SD. 2018. c302: a multiscale framework for modelling the nervous system of Caenorhabditis elegans. Philosophical Transactions of the Royal Society of London. Series B, Biological Sciences 373:20170379. DOI: https://doi.org/10.1098/rstb.2017.0379, PMID: 30201842\n\nGleeson P. 2019a. OpenSourceBrain/thalamocortical. 0.4. Zenodo. https://doi.org/10.5281/zenodo.2535506\n\nGleeson P, Cantarelli M, Marin B, Quintana A, Earnshaw M, Sadeh S, Piasini E, Birgiolas J, Cannon RC, Cayco- Gajic NA, Crook S, Davison AP, Dura- Bernal S, Ecker A, Hines ML, Idili G, Lanore F, Larson SD. 2019b. Open source brain: a collaborative resource for visualizing, analyzing, simulating, and developing standardized models of neurons and circuits. Neuron 103:395–411. DOI: https://doi.org/10.1016/j.neuron.2019.05.019, PMID: 31201122\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"Cayco- Gajic NA, Clopath C, Silver RA. 2017. Sparse synaptic connectivity is required for decorrelation and pattern separation in feedforward networks. Nature Communications 8:1116. DOI: https://doi.org/10.1038/s41467-017-01109-y, PMID: 29061964\n\nChoi K, Medley JK, König M, Stocking K, Smith L, Gu S, Sauro HM. 2018. Tellurium: An extensible python-based modeling environment for systems and synthetic biology. Bio Systems 171:74–79. DOI: https://doi.org/10.1016/j.biosystems.2018.07.006, PMID: 30053414\n\nDai K, Hernando J, Billeh YN, Gratiy SL, Planas J, Davison AP, Dura- Bernal S, Gleeson P, Devresse A, Dichter BK, Gevaert M, King JG, Van Geit WAH, Povolotsky AV, Muller E, Courcol JD, Arkhipov A. 2020. The SONATA data format for efficient description of large-scale network models. PLOS Computational Biology 16:e1007696. DOI: https://doi.org/10.1371/journal.pcbi.1007696, PMID: 32092054\n\nDavison AP, Brüderle D, Eppler J, Kremkow J, Muller E, Pecevski D, Perrinet L, Yger P. 2008. PyNN: a common interface for neuronal network simulators. Frontiers in Neuroinformatics 2:11. DOI: https://doi.org/10.3389/neuro.11.011.2008, PMID: 19194529\n\nDenker M. 2018. Collaborative HPC-enabled workflows on the HBP Collaboratory using the Elephant framework. Neuroinformatics 19:0019. DOI: https://doi.org/10.12751/incf.ni2018.0019\n\nDe Schutter E, Bower JM. 1994. An active membrane model of the cerebellar Purkinje cell. I. Simulation of current clamps in slice. Journal of Neurophysiology 71:375–400. DOI: https://doi.org/10.1152/jn.1994.71.1.375, PMID: 7512629\n\nDruckmann S, Banitt Y, Gidon A, Schürmann F, Markram H, Segev I. 2007. A novel multiple objective optimization framework for constraining conductance-based neuron models by experimental data. Frontiers in Neuroscience 1:7–18. DOI: https://doi.org/10.3389/neuro.01.1.1.001.2007, PMID: 18982116\n\nDura- Bernal S, Neymotin SA, Kerr CC, Sivagnanam S, Majumdar A, Francis JT, Lytton WW. 2017. Evolutionary algorithm optimization of biological learning parameters in a biomimetic neuroprosthesis. IBM Journal of Research and Development 61:6. DOI: https://doi.org/10.1147/JRD.2017.2656758, PMID: 29200477\n\nDura- Bernal S, Suter BA, Gleeson P, Cantarelli M, Quintana A, Rodriguez F, Kedziora DJ, Chadderdon GL, Kerr CC, Neymotin SA, McDougal RA, Hines M, Shepherd GM, Lytton WW. 2019. NetPyNE, a tool for data-driven multiscale modeling of brain circuits. eLife 8:e44494. DOI: https://doi.org/10.7554/eLife.44494, PMID: 31025934\n\nEinevoll GT, Destexhe A, Diesmann M, Grün S, Jirsa V, de Kamps M, Migliore M, Ness TV, Plesser HE, Schürmann F. 2019. The scientific case for brain simulations. Neuron 102:735–744. DOI: https://doi.org/10.1016/j.neuron.2019.03.027, PMID: 31121126\n\nExecutable Books Community. 2020. Executable books community, jupyter book. 01. Zenodo. https://doi.org/10.5281/zenodo.4539666\n\nFerguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2013. Experimentally constrained CA1 fast-firing parvalbumin-positive interneuron network models exhibit sharp transitions into coherent high frequency rhythms. Frontiers in Computational Neuroscience 7:144. DOI: https://doi.org/10.3389/fncom.2013.00144, PMID: 24155715\n\nFerguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2014. Simple, biologically-constrained CA1 pyramidal cell models using an intact, whole hippocampus context. F1000Research 3:104. DOI: https://doi.org/10.12688/f1000research.3894.1, PMID: 25383182\n\nFitzHugh R. 1961. Impulses and physiological states in theoretical models of nerve membrane. Biophysical Journal 1:445–466. DOI: https://doi.org/10.1016/S0006-3495(61)86902-6\n\nGarcia S, Guarino D, Jaillet F, Jennings T, Pröpper R, Rautenberg PL, Rodgers CC, Sobolev A, Wachtler T, Yger P, Davison AP. 2014. Neo: an object model for handling electrophysiology data in multiple formats. Frontiers in Neuroinformatics 8:10. DOI: https://doi.org/10.3389/fninf.2014.00010, PMID: 24600386\n\nGarcia Del Molino LC, Yang GR, Mejias JF, Wang X-J. 2017. Paradoxical response reversal of top-down modulation in cortical circuits with three interneuron types. eLife 6:e29742. DOI: https://doi.org/10.7554/eLife.29742, PMID: 29256863\n\nGerkin RC, Birgiolas J, Jarvis RJ, Omar C, Crook SM. 2019. NeuronUnit: a package for data-driven validation of neuron models using sciunit. bioRxiv. DOI: https://doi.org/10.1101/665331\n\nGewaltig MO, Diesmann M. 2007. NEST (NEural Simulation Tool). Scholarpedia 2:1430. DOI: https://doi.org/10.4249/scholarpedia.1430\n\nGleeson P, Steuber V, Silver RA. 2007. neuroConstruct: a tool for modeling networks of neurons in 3D space. Neuron 54:219–235. DOI: https://doi.org/10.1016/j.neuron.2007.03.025, PMID: 17442244\n\nGleeson P, Crook S, Cannon RC, Hines ML, Billings GO, Farinella M, Morse TM, Davison AP, Ray S, Bhalla US, Barnes SR, Dimitrova YD, Silver RA. 2010. NeuroML: a language for describing data driven models of neurons and networks with a high degree of biological detail. PLOS Computational Biology 6:e1000815. DOI: https://doi.org/10.1371/journal.pcbi.1000815, PMID: 20585541\n\nGleeson P, Lung D, Grosu R, Hasani R, Larson SD. 2018. c302: a multiscale framework for modelling the nervous system of Caenorhabditis elegans. Philosophical Transactions of the Royal Society of London. Series B, Biological Sciences 373:20170379. DOI: https://doi.org/10.1098/rstb.2017.0379, PMID: 30201842\n\nGleeson P. 2019a. OpenSourceBrain/thalamocortical. 0.4. Zenodo. https://doi.org/10.5281/zenodo.2535506\n\nGleeson P, Cantarelli M, Marin B, Quintana A, Earnshaw M, Sadeh S, Piasini E, Birgiolas J, Cannon RC, Cayco- Gajic NA, Crook S, Davison AP, Dura- Bernal S, Ecker A, Hines ML, Idili G, Lanore F, Larson SD. 2019b. Open source brain: a collaborative resource for visualizing, analyzing, simulating, and developing standardized models of neurons and circuits. Neuron 103:395–411. DOI: https://doi.org/10.1016/j.neuron.2019.05.019, PMID: 31201122\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Cayco- Gajic NA, Clopath C, Silver RA. 2017. Sparse synaptic connectivity is required for decorrelation and pattern separation in feedforward networks. Nature Communications 8:1116. DOI: https://doi.org/10.1038/s41467-017-01109-y, PMID: 29061964\n\nChoi K, Medley JK, König M, Stocking K, Smith L, Gu S, Sauro HM. 2018. Tellurium: An extensible python-based modeling environment for systems and synthetic biology. Bio Systems 171:74–79. DOI: https://doi.org/10.1016/j.biosystems.2018.07.006, PMID: 30053414\n\nDai K, Hernando J, Billeh YN, Gratiy SL, Planas J, Davison AP, Dura- Bernal S, Gleeson P, Devresse A, Dichter BK, Gevaert M, King JG, Van Geit WAH, Povolotsky AV, Muller E, Courcol JD, Arkhipov A. 2020. The SONATA data format for efficient description of large-scale network models. PLOS Computational Biology 16:e1007696. DOI: https://doi.org/10.1371/journal.pcbi.1007696, PMID: 32092054\n\nDavison AP, Brüderle D, Eppler J, Kremkow J, Muller E, Pecevski D, Perrinet L, Yger P. 2008. PyNN: a common interface for neuronal network simulators. Frontiers in Neuroinformatics 2:11. DOI: https://doi.org/10.3389/neuro.11.011.2008, PMID: 19194529\n\nDenker M. 2018. Collaborative HPC-enabled workflows on the HBP Collaboratory using the Elephant framework. Neuroinformatics 19:0019. DOI: https://doi.org/10.12751/incf.ni2018.0019\n\nDe Schutter E, Bower JM. 1994. An active membrane model of the cerebellar Purkinje cell. I. Simulation of current clamps in slice. Journal of Neurophysiology 71:375–400. DOI: https://doi.org/10.1152/jn.1994.71.1.375, PMID: 7512629\n\nDruckmann S, Banitt Y, Gidon A, Schürmann F, Markram H, Segev I. 2007. A novel multiple objective optimization framework for constraining conductance-based neuron models by experimental data. Frontiers in Neuroscience 1:7–18. DOI: https://doi.org/10.3389/neuro.01.1.1.001.2007, PMID: 18982116\n\nDura- Bernal S, Neymotin SA, Kerr CC, Sivagnanam S, Majumdar A, Francis JT, Lytton WW. 2017. Evolutionary algorithm optimization of biological learning parameters in a biomimetic neuroprosthesis. IBM Journal of Research and Development 61:6. DOI: https://doi.org/10.1147/JRD.2017.2656758, PMID: 29200477\n\nDura- Bernal S, Suter BA, Gleeson P, Cantarelli M, Quintana A, Rodriguez F, Kedziora DJ, Chadderdon GL, Kerr CC, Neymotin SA, McDougal RA, Hines M, Shepherd GM, Lytton WW. 2019. NetPyNE, a tool for data-driven multiscale modeling of brain circuits. eLife 8:e44494. DOI: https://doi.org/10.7554/eLife.44494, PMID: 31025934\n\nEinevoll GT, Destexhe A, Diesmann M, Grün S, Jirsa V, de Kamps M, Migliore M, Ness TV, Plesser HE, Schürmann F. 2019. The scientific case for brain simulations. Neuron 102:735–744. DOI: https://doi.org/10.1016/j.neuron.2019.03.027, PMID: 31121126\n\nExecutable Books Community. 2020. Executable books community, jupyter book. 01. Zenodo. https://doi.org/10.5281/zenodo.4539666\n\nFerguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2013. Experimentally constrained CA1 fast-firing parvalbumin-positive interneuron network models exhibit sharp transitions into coherent high frequency rhythms. Frontiers in Computational Neuroscience 7:144. DOI: https://doi.org/10.3389/fncom.2013.00144, PMID: 24155715\n\nFerguson KA, Huh CYL, Amilhon B, Williams S, Skinner FK. 2014. Simple, biologically-constrained CA1 pyramidal cell models using an intact, whole hippocampus context. F1000Research 3:104. DOI: https://doi.org/10.12688/f1000research.3894.1, PMID: 25383182\n\nFitzHugh R. 1961. Impulses and physiological states in theoretical models of nerve membrane. Biophysical Journal 1:445–466. DOI: https://doi.org/10.1016/S0006-3495(61)86902-6\n\nGarcia S, Guarino D, Jaillet F, Jennings T, Pröpper R, Rautenberg PL, Rodgers CC, Sobolev A, Wachtler T, Yger P, Davison AP. 2014. Neo: an object model for handling electrophysiology data in multiple formats. Frontiers in Neuroinformatics 8:10. DOI: https://doi.org/10.3389/fninf.2014.00010, PMID: 24600386\n\nGarcia Del Molino LC, Yang GR, Mejias JF, Wang X-J. 2017. Paradoxical response reversal of top-down modulation in cortical circuits with three interneuron types. eLife 6:e29742. DOI: https://doi.org/10.7554/eLife.29742, PMID: 29256863\n\nGerkin RC, Birgiolas J, Jarvis RJ, Omar C, Crook SM. 2019. NeuronUnit: a package for data-driven validation of neuron models using sciunit. bioRxiv. DOI: https://doi.org/10.1101/665331\n\nGewaltig MO, Diesmann M. 2007. NEST (NEural Simulation Tool). Scholarpedia 2:1430. DOI: https://doi.org/10.4249/scholarpedia.1430\n\nGleeson P, Steuber V, Silver RA. 2007. neuroConstruct: a tool for modeling networks of neurons in 3D space. Neuron 54:219–235. DOI: https://doi.org/10.1016/j.neuron.2007.03.025, PMID: 17442244\n\nGleeson P, Crook S, Cannon RC, Hines ML, Billings GO, Farinella M, Morse TM, Davison AP, Ray S, Bhalla US, Barnes SR, Dimitrova YD, Silver RA. 2010. NeuroML: a language for describing data driven models of neurons and networks with a high degree of biological detail. PLOS Computational Biology 6:e1000815. DOI: https://doi.org/10.1371/journal.pcbi.1000815, PMID: 20585541\n\nGleeson P, Lung D, Grosu R, Hasani R, Larson SD. 2018. c302: a multiscale framework for modelling the nervous system of Caenorhabditis elegans. Philosophical Transactions of the Royal Society of London. Series B, Biological Sciences 373:20170379. DOI: https://doi.org/10.1098/rstb.2017.0379, PMID: 30201842\n\nGleeson P. 2019a. OpenSourceBrain/thalamocortical. 0.4. Zenodo. https://doi.org/10.5281/zenodo.2535506\n\nGleeson P, Cantarelli M, Marin B, Quintana A, Earnshaw M, Sadeh S, Piasini E, Birgiolas J, Cannon RC, Cayco- Gajic NA, Crook S, Davison AP, Dura- Bernal S, Ecker A, Hines ML, Idili G, Lanore F, Larson SD. 2019b. Open source brain: a collaborative resource for visualizing, analyzing, simulating, and developing standardized models of neurons and circuits. Neuron 103:395–411. DOI: https://doi.org/10.1016/j.neuron.2019.05.019, PMID: 31201122\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":34.63,"w":408.3,"h":685.41}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://doi.org/10.1038/s41467-017-01109-y","text":" "},{"url":"https://doi.org/10.1038/s41467-017-01109-y","text":"s41467-017-01109-y, PMID: 29061964 Choi K"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/29061964","text":", Medley JK, König M, Stocking K, Smith L, Gu S, Sauro HM. 2018. Tellurium: An extensible python-"},{"url":"https://doi.org/10.1016/j.biosystems.2018.07.006","text":" "},{"url":"https://doi.org/10.1016/j.biosystems.2018.07.006","text":"1016/j.biosystems.2018.07.006, PMID: 30053414 Dai K"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/30053414","text":", Hernando J, Billeh YN, Gratiy SL, Planas J, Davison AP, Dura-"},{"url":"https://doi.org/10.1371/journal.pcbi.1007696","text":"Davison AP"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/32092054","text":", Brüderle D, Eppler J, Kremkow J, Muller E, Pecevski D, Perrinet L, Yger P. 2008. PyNN: a common "},{"url":"https://doi.org/10.3389/neuro.11.011.2008","text":" "},{"url":"https://doi.org/10.3389/neuro.11.011.2008","text":"neuro.11.011.2008, PMID: 19194529 Denker M"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/19194529","text":". 2018. Collaborative HPC-"},{"url":"https://doi.org/10.12751/incf.ni2018.0019","text":", Bower JM. 1994. An active membrane model of the cerebellar Purkinje cell. I. Simulation of "},{"url":"https://doi.org/10.1152/jn.1994.71.1.375","text":" "},{"url":"https://doi.org/10.1152/jn.1994.71.1.375","text":"375, PMID: 7512629 Druckmann S"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/7512629","text":"Druckmann S"},{"url":"https://doi.org/10.3389/neuro.01.1.1.001.2007","text":", Neymotin SA, Kerr CC, Sivagnanam S, Majumdar A, Francis JT, Lytton WW. 2017. Evolutionary "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/18982116","text":", Neymotin SA, Kerr CC, Sivagnanam S, Majumdar A, Francis JT, Lytton WW. 2017. Evolutionary "},{"url":"https://doi.org/10.1147/JRD.2017.2656758","text":", Suter BA, Gleeson P, Cantarelli M, Quintana A, Rodriguez F, Kedziora DJ, Chadderdon GL, "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/29200477","text":", Suter BA, Gleeson P, Cantarelli M, Quintana A, Rodriguez F, Kedziora DJ, Chadderdon GL, "},{"url":"https://doi.org/10.7554/eLife.44494","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/31025934","text":"Einevoll GT"},{"url":"https://doi.org/10.1016/j.neuron.2019.03.027","text":" "},{"url":"https://doi.org/10.1016/j.neuron.2019.03.027","text":"1016/j.neuron.2019.03.027, PMID: 31121126 Executable Books Community"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/31121126","text":". 2020. Executable books community, jupyter book. 01. Zenodo. https://doi.org/"},{"url":"https://doi.org/10.5281/zenodo.4539666","text":" "},{"url":"https://doi.org/10.5281/zenodo.4539666","text":"10.5281/zenodo.4539666 Ferguson KA"},{"url":"https://doi.org/10.3389/fncom.2013.00144","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/24155715","text":"Ferguson KA"},{"url":"https://doi.org/10.12688/f1000research.3894.1","text":" "},{"url":"https://doi.org/10.12688/f1000research.3894.1","text":"10.12688/f1000research.3894.1, PMID: 25383182 FitzHugh R"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/25383182","text":". 1961. Impulses and physiological states in theoretical models of nerve membrane. "},{"url":"https://doi.org/10.1016/S0006-3495(61)86902-6","text":", Guarino D, Jaillet F, Jennings T, Pröpper R, Rautenberg PL, Rodgers CC, Sobolev A, Wachtler T, Yger P, "},{"url":"https://doi.org/10.3389/fninf.2014.00010","text":", Yang GR, Mejias JF, Wang X-"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/24600386","text":"J. 2017. Paradoxical response reversal of top-"},{"url":"https://doi.org/10.7554/eLife.29742","text":" "},{"url":"https://doi.org/10.7554/eLife.29742","text":"29742, PMID: 29256863 Gerkin RC"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/29256863","text":", Birgiolas J, Jarvis RJ, Omar C, Crook SM. 2019. NeuronUnit: a package for data-"},{"url":"https://doi.org/10.1101/665331","text":", Diesmann M. 2007. NEST (NEural Simulation Tool). "},{"url":"https://doi.org/10.4249/scholarpedia.1430","text":" "},{"url":"https://doi.org/10.4249/scholarpedia.1430","text":"4249/scholarpedia.1430 Gleeson P"},{"url":"https://doi.org/10.1016/j.neuron.2007.03.025","text":", Crook S, Cannon RC, Hines ML, Billings GO, Farinella M, Morse TM, Davison AP, Ray S, Bhalla US, "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/17442244","text":", Crook S, Cannon RC, Hines ML, Billings GO, Farinella M, Morse TM, Davison AP, Ray S, Bhalla US, "},{"url":"https://doi.org/10.1371/journal.pcbi.1000815","text":" "},{"url":"https://doi.org/10.1371/journal.pcbi.1000815","text":"doi.org/10.1371/journal.pcbi.1000815, PMID: 20585541 Gleeson P"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/20585541","text":", Lung D, Grosu R, Hasani R, Larson SD. 2018. c302: a multiscale framework for modelling the nervous "},{"url":"https://doi.org/10.1098/rstb.2017.0379","text":". 2019a. OpenSourceBrain/thalamocortical. 0.4. Zenodo. https://doi.org/10.5281/zenodo.2535506"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/30201842","text":". 2019a. OpenSourceBrain/thalamocortical. 0.4. Zenodo. https://doi.org/10.5281/zenodo.2535506"},{"url":"https://doi.org/10.5281/zenodo.2535506","text":", Cantarelli M, Marin B, Quintana A, Earnshaw M, Sadeh S, Piasini E, Birgiolas J, Cannon RC, "},{"url":"https://doi.org/10.1016/j.neuron.2019.05.019","text":" "},{"url":"https://doi.org/10.1016/j.neuron.2019.05.019","text":"doi.org/10.1016/j.neuron.2019.05.019, PMID: 31201122"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/31201122","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.304},{"page":42,"text":"           Tools  and  resources                                                                                                                    Neuroscience\n                                  Gleeson P. 2021. LEMS/LEMS. 0.7.6. Zenodo. https://doi.org/10.5281/zenodo.6417333\n                                                                                                                                                    DOI: https://doi.\n                                    org/10.5281/zenodo.5788686                                                                                      org/10.5281/zenodo.5788686\n                                  Gleeson P, Crook S, Turner D, Mantel K, Raunak M, Willke T, Cohen JD. 2023. Integrating model development\n                                    across computational neuroscience, cognitive science, and machine learning. Neuron 111:1526–1530. DOI:          across computational neuroscience, cognitive science, and machine learning. Neuron 111:1526–1530. DOI:\n                                    https://doi.org/10.1016/j.neuron.2023.03.037, PMID: 37100054                                                    https://doi.org/10.1016/j.neuron.2023.03.037, PMID: 37100054\n                                  Gleeson P. 2024a. LEMS/jlems. 0.11.1. Zenodo. https://doi.org/10.5281/zenodo.13350473\n                                  Gleeson P. 2024b. NeuroML/jneuroml. 0.13.3. Zenodo. https://doi.org/10.5281/zenodo.13342731\n                                  Gleeson P, SinhaA. 2024. NeuroML 2. swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6. Software\n                                    Heritage. https://archive.softwareheritage.org/swh:1:dir:154dee293f0193f24f7a66dc41d07442168ef9b8;              Heritage. https://archive.softwareheritage.org/swh:1:dir:154dee293f0193f24f7a66dc41d07442168ef9b8;\n                                    origin=https://github.com/NeuroML/NeuroML2;visit=swh:1:snp:afc51d39c98b0e7463ca75776835b801                     origin=https://github.com/NeuroML/NeuroML2;visit=swh:1:snp:afc51d39c98b0e7463ca75776835b801\n                                    4dc7b4c2;anchor=swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6                                              4dc7b4c2;anchor=swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6\n                                  Goddard NH, Hucka M, Howell F, Cornelis H, Shankar K, Beeman D. 2001. Towards NeuroML: model description\n                                    methods for collaborative modelling in neuroscience. Philosophical Transactions of the Royal Society of         methods for collaborative modelling in neuroscience. Philosophical Transactions of the Royal Society of\n                                    London. Series B, Biological Sciences 356:1209–1228. DOI: https://doi.org/10.1098/rstb.2001.0910, PMID:         London. Series B, Biological Sciences 356:1209–1228. DOI: https://doi.org/10.1098/rstb.2001.0910, PMID:\n                                    11545699                                                                                                        11545699\n                                  Gorgolewski KJ, Auer T, Calhoun VD, Craddock RC, Das S, Duff EP, Flandin G, Ghosh SS, Glatard T,\n                                    Halchenko YO, Handwerker DA, Hanke M, Keator D, Li X, Michael Z, Maumet C, Nichols BN, Nichols TE,              Halchenko YO, Handwerker DA, Hanke M, Keator D, Li X, Michael Z, Maumet C, Nichols BN, Nichols TE,\n                                    Pellman J, Poline J-                                                                                            Pellman J, Poline J-\n                                                                                                                                                    B, et al. 2016. The brain imaging data structure, a format for organizing and describing\n                                    outputs of neuroimaging experiments. Scientiﬁc Data 3:160044. DOI: https://doi.org/10.1038/sdata.2016.44,       outputs of neuroimaging experiments. Scientiﬁc Data 3:160044. DOI: https://doi.org/10.1038/sdata.2016.44,\n                                    PMID: 27326542                                                                                                  PMID: 27326542\n                                  Gurnani H, Silver RA. 2021. Multidimensional population activity in an electrically coupled inhibitory circuit in the\n                                    cerebellar cortex. Neuron 109:1739–1753.. DOI: https://doi.org/10.1016/j.neuron.2021.03.027, PMID:              cerebellar cortex. Neuron 109:1739–1753.. DOI: https://doi.org/10.1016/j.neuron.2021.03.027, PMID:\n                                    33848473                                                                                                        33848473\n                                  Harris CR, Millman KJ, van der Walt SJ, Gommers R, Virtanen P, Cournapeau D, Wieser E, Taylor J, Berg S,\n                                    Smith NJ, Kern R, Picus M, Hoyer S, van Kerkwijk MH, Brett M, Haldane A, Del Río JF, Wiebe M, Peterson P,       Smith NJ, Kern R, Picus M, Hoyer S, van Kerkwijk MH, Brett M, Haldane A, Del Río JF, Wiebe M, Peterson P,\n                                    Gérard-                                                                                                         Gérard-\n                                                                                                                                                    Marchant P, et al. 2020. Array programming with NumPy. Nature 585:357–362. DOI: https://doi.org/10.\n                                    1038/s41586-020-2649-2, PMID: 32939066                                                                          1038/s41586-020-2649-2, PMID: 32939066\n                                  Hay E, Hill S, Schürmann F, Markram H, Segev I. 2011. Models of neocortical layer 5b pyramidal cells capturing a\n                                    wide range of dendritic and perisomatic active properties. PLOS Computational Biology 7:e1002107. DOI:          wide range of dendritic and perisomatic active properties. PLOS Computational Biology 7:e1002107. DOI:\n                                    https://doi.org/10.1371/journal.pcbi.1002107, PMID: 21829333                                                    https://doi.org/10.1371/journal.pcbi.1002107, PMID: 21829333\n                                  Hindmarsh JL, Rose RM. 1984. A model of neuronal bursting using three coupled ﬁrst order differential\n                                    equations. Proceedings of the Royal Society of London. Series B, Biological Sciences 221:87–102. DOI: https://  equations. Proceedings of the Royal Society of London. Series B, Biological Sciences 221:87–102. DOI: https://\n                                    doi.org/10.1098/rspb.1984.0024, PMID: 6144106                                                                   doi.org/10.1098/rspb.1984.0024, PMID: 6144106\n                                  Hines ML, Carnevale NT. 1997. The NEURON simulation environment. Neural Computation 9:1179–1209. DOI:\n                                    https://doi.org/10.1162/neco.1997.9.6.1179                                                                      https://doi.org/10.1162/neco.1997.9.6.1179\n                                  Hodgkin AL, Huxley AF. 1952. A quantitative description of membrane current and its application to conduction\n                                    and excitation in nerve. The Journal of Physiology 117:500–544. DOI: https://doi.org/10.1113/jphysiol.1952.     and excitation in nerve. The Journal of Physiology 117:500–544. DOI: https://doi.org/10.1113/jphysiol.1952.\n                                    sp004764, PMID: 12991237                                                                                        sp004764, PMID: 12991237\n                                  Hucka M, Finney A, Sauro HM, Bolouri H, Doyle JC, Kitano H, Arkin AP, Bornstein BJ, Bray D, Cornish-Bowden A,\n                                    Cuellar AA, Dronov S, Gilles ED, Ginkel M, Gor V, Goryanin II, Hedley WJ, Hodgman TC, Hofmeyr JH,               Cuellar AA, Dronov S, Gilles ED, Ginkel M, Gor V, Goryanin II, Hedley WJ, Hodgman TC, Hofmeyr JH,\n                                    Hunter PJ, et al. 2003. The systems biology markup language (SBML): a medium for representation and             Hunter PJ, et al. 2003. The systems biology markup language (SBML): a medium for representation and\n                                    exchange of biochemical network models. Bioinformatics 19:524–531. DOI: https://doi.org/10.1093/                exchange of biochemical network models. Bioinformatics 19:524–531. DOI: https://doi.org/10.1093/\n                                    bioinformatics/btg015, PMID: 12611808                                                                           bioinformatics/btg015, PMID: 12611808\n                                   Hucka M, Nickerson DP, Bader GD, Bergmann FT, Cooper J, Demir E, Garny A, Golebiewski M, Myers CJ,\n                                    Schreiber F, Waltemath D, Le Novère N. 2015. Promoting coordinated development of community-                    Schreiber F, Waltemath D, Le Novère N. 2015. Promoting coordinated development of community-\n                                                                                                                                                    based\n                                    information standards for modeling in biology: the COMBINE initiative. Frontiers in Bioengineering and          information standards for modeling in biology: the COMBINE initiative. Frontiers in Bioengineering and\n                                    Biotechnology 3:19. DOI: https://doi.org/10.3389/fbioe.2015.00019, PMID: 25759811                               Biotechnology 3:19. DOI: https://doi.org/10.3389/fbioe.2015.00019, PMID: 25759811\n                                  Hunter JD. 2007. Matplotlib: A 2D graphics environment. Computing in Science & Engineering 9:90–95. DOI:\n                                    https://doi.org/10.1109/MCSE.2007.55                                                                            https://doi.org/10.1109/MCSE.2007.55\n                                  INCF. 2023. Role of community standards. https://www.incf.org/role-community-standards [Accessed November\n                                    9, 2023].                                                                                                       9, 2023].\n                                  Izhikevich EM. 2004. Which model to use for cortical spiking neurons? IEEE Transactions on Neural Networks\n                                    15:1063–1070. DOI: https://doi.org/10.1109/TNN.2004.832719, PMID: 15484883                                      15:1063–1070. DOI: https://doi.org/10.1109/TNN.2004.832719, PMID: 15484883\n                                  Kriener B, Hu H, Vervaeke K. 2022. Parvalbumin interneuron dendrites enhance gamma oscillations. Cell Reports\n                                    39:110948. DOI: https://doi.org/10.1016/j.celrep.2022.110948, PMID: 35705055                                    39:110948. DOI: https://doi.org/10.1016/j.celrep.2022.110948, PMID: 35705055\n                                  Lapicque L. 1907. Recherches quantitatives sur L’excitation électrique des nerfs traitée comme une polarisation.\n                                    Journal de Physiologie et de Pathologie Generale 9:620–635.                                                     Journal de Physiologie et de Pathologie Generale 9:620–635.\n                                  Larson SD, Martone ME. 2013.\n                                                                                                                                                    NeuroLex.\n                                                                                                                                                    org: an online framework for neuroscience knowledge. Frontiers in\n                                    Neuroinformatics 7:18. DOI: https://doi.org/10.3389/fninf.2013.00018, PMID: 24009581                            Neuroinformatics 7:18. DOI: https://doi.org/10.3389/fninf.2013.00018, PMID: 24009581\n                                  Lloyd CM, Halstead MDB, Nielsen PF. 2004. CellML: its future, present and past. Progress in Biophysics and\n                                    Molecular Biology 85:433–450. DOI: https://doi.org/10.1016/j.pbiomolbio.2004.01.004                             Molecular Biology 85:433–450. DOI: https://doi.org/10.1016/j.pbiomolbio.2004.01.004\n                                  Maex R, Schutter ED. 1998. Synchronization of golgi and granule cell ﬁring in a detailed network model of the\n                                    cerebellar granule cell layer. Journal of Neurophysiology 80:2521–2537. DOI: https://doi.org/10.1152/jn.1998.   cerebellar granule cell layer. Journal of Neurophysiology 80:2521–2537. DOI: https://doi.org/10.1152/jn.1998.\n                                    80.5.2521                                                                                                       80.5.2521\n                                  Markram H, Muller E, Ramaswamy S, Reimann MW, Abdellah M, Sanchez CA, Ailamaki A, Alonso-\n                                                                                                                                                    Nanclares L,\n                                    Antille N, Arsever S, Kahou GAA, Berger TK, Bilgili A, Buncic N, Chalimourda A, Chindemi G, Courcol JD,         Antille N, Arsever S, Kahou GAA, Berger TK, Bilgili A, Buncic N, Chalimourda A, Chindemi G, Courcol JD,\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                               42 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nGleeson P. 2021. LEMS/LEMS. 0.7.6. Zenodo. https://doi.org/10.5281/zenodo.6417333\n\nDOI: https://doi.org/10.5281/zenodo.5788686\n\nGleeson P, Crook S, Turner D, Mantel K, Raunak M, Willke T, Cohen JD. 2023. Integrating model development across computational neuroscience, cognitive science, and machine learning. Neuron 111:1526–1530. DOI: https://doi.org/10.1016/j.neuron.2023.03.037, PMID: 37100054\n\nGleeson P. 2024a. LEMS/jlems. 0.11.1. Zenodo. https://doi.org/10.5281/zenodo.13350473\n\nGleeson P. 2024b. NeuroML/jneuroml. 0.13.3. Zenodo. https://doi.org/10.5281/zenodo.13342731\n\nGleeson P, Sinha A. 2024. NeuroML 2. swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6. Software Heritage. https://archive.softwareheritage.org/swh:1:dir:154dee293f0193f24f7a66dc41d07442168ef9b8; origin=https://github.com/NeuroML/NeuroML2; visit=swh:1:snp:afc51d39c98b0e7463ca75776835b801\n\nGoddard NH, Hucka M, Howell F, Cornelis H, Shankar K, Beeman D. 2001. Towards NeuroML: model description methods for collaborative modelling in neuroscience. Philosophical Transactions of the Royal Society of London. Series B, Biological Sciences 356:1209–1228. DOI: https://doi.org/10.1098/rstb.2001.0910, PMID: 11545699\n\nGorgolewski KJ, Auer T, Calhoun VD, Craddock RC, Das S, Duff EP, Flandin G, Ghosh SS, Glatard T, Halchenko YO, Handwerker DA, Hanke M, Keator D, Li X, Michael Z, Maumet C, Nichols BN, Nichols TE, Pellman J, Poline J-B, et al. 2016. The brain imaging data structure, a format for organizing and describing outputs of neuroimaging experiments. Scientific Data 3:160044. DOI: https://doi.org/10.1038/sdata.2016.44, PMID: 27326542\n\nGurnani H, Silver RA. 2021. Multidimensional population activity in an electrically coupled inhibitory circuit in the cerebellar cortex. Neuron 109:1739–1753. DOI: https://doi.org/10.1016/j.neuron.2021.03.027, PMID: 33848473\n\nHarris CR, Millman KJ, van der Walt SJ, Gommers R, Virtanen P, Cournapeau D, Wieser E, Taylor J, Berg S, Smith NJ, Kern R, Picus M, Hoyer S, van Kerkwijk MH, Brett M, Haldane A, Del Río JF, Wiebe M, Peterson P, Gérard-Marchant P, et al. 2020. Array programming with NumPy. Nature 585:357–362. DOI: https://doi.org/10.1038/s41586-020-2649-2, PMID: 32939066\n\nHay E, Hill S, Schürmann F, Markram H, Segev I. 2011. Models of neocortical layer 5b pyramidal cells capturing a wide range of dendritic and perisomatic active properties. PLOS Computational Biology 7:e1002107. DOI: https://doi.org/10.1371/journal.pcbi.1002107, PMID: 21829333\n\nHindmarsh JL, Rose RM. 1984. A model of neuronal bursting using three coupled first order differential equations. Proceedings of the Royal Society of London. Series B, Biological Sciences 221:87–102. DOI: https://doi.org/10.1098/rspb.1984.0024, PMID: 6144106\n\nHines ML, Carnevale NT. 1997. The NEURON simulation environment. Neural Computation 9:1179–1209. DOI: https://doi.org/10.1162/neco.1997.9.6.1179\n\nHodgkin AL, Huxley AF. 1952. A quantitative description of membrane current and its application to conduction and excitation in nerve. The Journal of Physiology 117:500–544. DOI: https://doi.org/10.1113/jphysiol.1952.sp004764, PMID: 12991237\n\nHucka M, Finney A, Sauro HM, Bolouri H, Doyle JC, Kitano H, Arkin AP, Bornstein BJ, Bray D, Cornish-Bowden A, Cuellar AA, Dronov S, Gilles ED, Ginkel M, Gor V, Goryanin II, Hedley WJ, Hodgman TC, Hofmeyr JH, Hunter PJ, et al. 2003. The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models. Bioinformatics 19:524–531. DOI: https://doi.org/10.1093/bioinformatics/btg015, PMID: 12611808\n\nHucka M, Nickerson DP, Bader GD, Bergmann FT, Cooper J, Demir E, Garny A, Golebiewski M, Myers CJ, Schreiber F, Waltemath D, Le Novère N. 2015. Promoting coordinated development of community-based information standards for modeling in biology: the COMBINE initiative. Frontiers in Bioengineering and Biotechnology 3:19. DOI: https://doi.org/10.3389/fbioe.2015.00019, PMID: 25759811\n\nHunter JD. 2007. Matplotlib: A 2D graphics environment. Computing in Science & Engineering 9:90–95. DOI: https://doi.org/10.1109/MCSE.2007.55\n\nINCF. 2023. Role of community standards. https://www.incf.org/role-community-standards [Accessed November 9, 2023].\n\nIzhikevich EM. 2004. Which model to use for cortical spiking neurons? IEEE Transactions on Neural Networks 15:1063–1070. DOI: https://doi.org/10.1109/TNN.2004.832719, PMID: 15484883\n\nKriener B, Hu H, Vervaeke K. 2022. Parvalbumin interneuron dendrites enhance gamma oscillations. Cell Reports 39:110948. DOI: https://doi.org/10.1016/j.celrep.2022.110948, PMID: 35705055\n\nLapicque L. 1907. Recherches quantitatives sur L’excitation électrique des nerfs traitée comme une polarisation. Journal de Physiologie et de Pathologie Generale 9:620–635.\n\nLarson SD, Martone ME. 2013. NeuroLex.org: an online framework for neuroscience knowledge. Frontiers in Neuroinformatics 7:18. DOI: https://doi.org/10.3389/fninf.2013.00018, PMID: 24009581\n\nLloyd CM, Halstead MDB, Nielsen PF. 2004. CellML: its future, present and past. Progress in Biophysics and Molecular Biology 85:433–450. DOI: https://doi.org/10.1016/j.pbiomolbio.2004.01.004\n\nMaex R, Schutter ED. 1998. Synchronization of golgi and granule cell firing in a detailed network model of the cerebellar granule cell layer. Journal of Neurophysiology 80:2521–2537. DOI: https://doi.org/10.1152/jn.1998.80.5.2521\n\nMarkram H, Muller E, Ramaswamy S, Reimann MW, Abdellah M, Sanchez CA, Ailamaki A, Alonso-Nanclares L, Arsever S, Kahou GAA, Berger TK, Bilgili A, Buncic N, Chalimourda A, Chindemi G, Courcol JD, Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"Gleeson P. 2021. LEMS/LEMS. 0.7.6. Zenodo. https://doi.org/10.5281/zenodo.6417333\n\nDOI: https://doi.org/10.5281/zenodo.5788686\n\nGleeson P, Crook S, Turner D, Mantel K, Raunak M, Willke T, Cohen JD. 2023. Integrating model development across computational neuroscience, cognitive science, and machine learning. Neuron 111:1526–1530. DOI: https://doi.org/10.1016/j.neuron.2023.03.037, PMID: 37100054\n\nGleeson P. 2024a. LEMS/jlems. 0.11.1. Zenodo. https://doi.org/10.5281/zenodo.13350473\n\nGleeson P. 2024b. NeuroML/jneuroml. 0.13.3. Zenodo. https://doi.org/10.5281/zenodo.13342731\n\nGleeson P, Sinha A. 2024. NeuroML 2. swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6. Software Heritage. https://archive.softwareheritage.org/swh:1:dir:154dee293f0193f24f7a66dc41d07442168ef9b8; origin=https://github.com/NeuroML/NeuroML2; visit=swh:1:snp:afc51d39c98b0e7463ca75776835b801\n\nGoddard NH, Hucka M, Howell F, Cornelis H, Shankar K, Beeman D. 2001. Towards NeuroML: model description methods for collaborative modelling in neuroscience. Philosophical Transactions of the Royal Society of London. Series B, Biological Sciences 356:1209–1228. DOI: https://doi.org/10.1098/rstb.2001.0910, PMID: 11545699\n\nGorgolewski KJ, Auer T, Calhoun VD, Craddock RC, Das S, Duff EP, Flandin G, Ghosh SS, Glatard T, Halchenko YO, Handwerker DA, Hanke M, Keator D, Li X, Michael Z, Maumet C, Nichols BN, Nichols TE, Pellman J, Poline J-B, et al. 2016. The brain imaging data structure, a format for organizing and describing outputs of neuroimaging experiments. Scientific Data 3:160044. DOI: https://doi.org/10.1038/sdata.2016.44, PMID: 27326542\n\nGurnani H, Silver RA. 2021. Multidimensional population activity in an electrically coupled inhibitory circuit in the cerebellar cortex. Neuron 109:1739–1753. DOI: https://doi.org/10.1016/j.neuron.2021.03.027, PMID: 33848473\n\nHarris CR, Millman KJ, van der Walt SJ, Gommers R, Virtanen P, Cournapeau D, Wieser E, Taylor J, Berg S, Smith NJ, Kern R, Picus M, Hoyer S, van Kerkwijk MH, Brett M, Haldane A, Del Río JF, Wiebe M, Peterson P, Gérard-Marchant P, et al. 2020. Array programming with NumPy. Nature 585:357–362. DOI: https://doi.org/10.1038/s41586-020-2649-2, PMID: 32939066\n\nHay E, Hill S, Schürmann F, Markram H, Segev I. 2011. Models of neocortical layer 5b pyramidal cells capturing a wide range of dendritic and perisomatic active properties. PLOS Computational Biology 7:e1002107. DOI: https://doi.org/10.1371/journal.pcbi.1002107, PMID: 21829333\n\nHindmarsh JL, Rose RM. 1984. A model of neuronal bursting using three coupled first order differential equations. Proceedings of the Royal Society of London. Series B, Biological Sciences 221:87–102. DOI: https://doi.org/10.1098/rspb.1984.0024, PMID: 6144106\n\nHines ML, Carnevale NT. 1997. The NEURON simulation environment. Neural Computation 9:1179–1209. DOI: https://doi.org/10.1162/neco.1997.9.6.1179\n\nHodgkin AL, Huxley AF. 1952. A quantitative description of membrane current and its application to conduction and excitation in nerve. The Journal of Physiology 117:500–544. DOI: https://doi.org/10.1113/jphysiol.1952.sp004764, PMID: 12991237\n\nHucka M, Finney A, Sauro HM, Bolouri H, Doyle JC, Kitano H, Arkin AP, Bornstein BJ, Bray D, Cornish-Bowden A, Cuellar AA, Dronov S, Gilles ED, Ginkel M, Gor V, Goryanin II, Hedley WJ, Hodgman TC, Hofmeyr JH, Hunter PJ, et al. 2003. The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models. Bioinformatics 19:524–531. DOI: https://doi.org/10.1093/bioinformatics/btg015, PMID: 12611808\n\nHucka M, Nickerson DP, Bader GD, Bergmann FT, Cooper J, Demir E, Garny A, Golebiewski M, Myers CJ, Schreiber F, Waltemath D, Le Novère N. 2015. Promoting coordinated development of community-based information standards for modeling in biology: the COMBINE initiative. Frontiers in Bioengineering and Biotechnology 3:19. DOI: https://doi.org/10.3389/fbioe.2015.00019, PMID: 25759811\n\nHunter JD. 2007. Matplotlib: A 2D graphics environment. Computing in Science & Engineering 9:90–95. DOI: https://doi.org/10.1109/MCSE.2007.55\n\nINCF. 2023. Role of community standards. https://www.incf.org/role-community-standards [Accessed November 9, 2023].\n\nIzhikevich EM. 2004. Which model to use for cortical spiking neurons? IEEE Transactions on Neural Networks 15:1063–1070. DOI: https://doi.org/10.1109/TNN.2004.832719, PMID: 15484883\n\nKriener B, Hu H, Vervaeke K. 2022. Parvalbumin interneuron dendrites enhance gamma oscillations. Cell Reports 39:110948. DOI: https://doi.org/10.1016/j.celrep.2022.110948, PMID: 35705055\n\nLapicque L. 1907. Recherches quantitatives sur L’excitation électrique des nerfs traitée comme une polarisation. Journal de Physiologie et de Pathologie Generale 9:620–635.\n\nLarson SD, Martone ME. 2013. NeuroLex.org: an online framework for neuroscience knowledge. Frontiers in Neuroinformatics 7:18. DOI: https://doi.org/10.3389/fninf.2013.00018, PMID: 24009581\n\nLloyd CM, Halstead MDB, Nielsen PF. 2004. CellML: its future, present and past. Progress in Biophysics and Molecular Biology 85:433–450. DOI: https://doi.org/10.1016/j.pbiomolbio.2004.01.004\n\nMaex R, Schutter ED. 1998. Synchronization of golgi and granule cell firing in a detailed network model of the cerebellar granule cell layer. Journal of Neurophysiology 80:2521–2537. DOI: https://doi.org/10.1152/jn.1998.80.5.2521\n\nMarkram H, Muller E, Ramaswamy S, Reimann MW, Abdellah M, Sanchez CA, Ailamaki A, Alonso-Nanclares L, Arsever S, Kahou GAA, Berger TK, Bilgili A, Buncic N, Chalimourda A, Chindemi G, Courcol JD, Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Gleeson P. 2021. LEMS/LEMS. 0.7.6. Zenodo. https://doi.org/10.5281/zenodo.6417333\n\nDOI: https://doi.org/10.5281/zenodo.5788686\n\nGleeson P, Crook S, Turner D, Mantel K, Raunak M, Willke T, Cohen JD. 2023. Integrating model development across computational neuroscience, cognitive science, and machine learning. Neuron 111:1526–1530. DOI: https://doi.org/10.1016/j.neuron.2023.03.037, PMID: 37100054\n\nGleeson P. 2024a. LEMS/jlems. 0.11.1. Zenodo. https://doi.org/10.5281/zenodo.13350473\n\nGleeson P. 2024b. NeuroML/jneuroml. 0.13.3. Zenodo. https://doi.org/10.5281/zenodo.13342731\n\nGleeson P, Sinha A. 2024. NeuroML 2. swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6. Software Heritage. https://archive.softwareheritage.org/swh:1:dir:154dee293f0193f24f7a66dc41d07442168ef9b8; origin=https://github.com/NeuroML/NeuroML2; visit=swh:1:snp:afc51d39c98b0e7463ca75776835b801\n\nGoddard NH, Hucka M, Howell F, Cornelis H, Shankar K, Beeman D. 2001. Towards NeuroML: model description methods for collaborative modelling in neuroscience. Philosophical Transactions of the Royal Society of London. Series B, Biological Sciences 356:1209–1228. DOI: https://doi.org/10.1098/rstb.2001.0910, PMID: 11545699\n\nGorgolewski KJ, Auer T, Calhoun VD, Craddock RC, Das S, Duff EP, Flandin G, Ghosh SS, Glatard T, Halchenko YO, Handwerker DA, Hanke M, Keator D, Li X, Michael Z, Maumet C, Nichols BN, Nichols TE, Pellman J, Poline J-B, et al. 2016. The brain imaging data structure, a format for organizing and describing outputs of neuroimaging experiments. Scientific Data 3:160044. DOI: https://doi.org/10.1038/sdata.2016.44, PMID: 27326542\n\nGurnani H, Silver RA. 2021. Multidimensional population activity in an electrically coupled inhibitory circuit in the cerebellar cortex. Neuron 109:1739–1753. DOI: https://doi.org/10.1016/j.neuron.2021.03.027, PMID: 33848473\n\nHarris CR, Millman KJ, van der Walt SJ, Gommers R, Virtanen P, Cournapeau D, Wieser E, Taylor J, Berg S, Smith NJ, Kern R, Picus M, Hoyer S, van Kerkwijk MH, Brett M, Haldane A, Del Río JF, Wiebe M, Peterson P, Gérard-Marchant P, et al. 2020. Array programming with NumPy. Nature 585:357–362. DOI: https://doi.org/10.1038/s41586-020-2649-2, PMID: 32939066\n\nHay E, Hill S, Schürmann F, Markram H, Segev I. 2011. Models of neocortical layer 5b pyramidal cells capturing a wide range of dendritic and perisomatic active properties. PLOS Computational Biology 7:e1002107. DOI: https://doi.org/10.1371/journal.pcbi.1002107, PMID: 21829333\n\nHindmarsh JL, Rose RM. 1984. A model of neuronal bursting using three coupled first order differential equations. Proceedings of the Royal Society of London. Series B, Biological Sciences 221:87–102. DOI: https://doi.org/10.1098/rspb.1984.0024, PMID: 6144106\n\nHines ML, Carnevale NT. 1997. The NEURON simulation environment. Neural Computation 9:1179–1209. DOI: https://doi.org/10.1162/neco.1997.9.6.1179\n\nHodgkin AL, Huxley AF. 1952. A quantitative description of membrane current and its application to conduction and excitation in nerve. The Journal of Physiology 117:500–544. DOI: https://doi.org/10.1113/jphysiol.1952.sp004764, PMID: 12991237\n\nHucka M, Finney A, Sauro HM, Bolouri H, Doyle JC, Kitano H, Arkin AP, Bornstein BJ, Bray D, Cornish-Bowden A, Cuellar AA, Dronov S, Gilles ED, Ginkel M, Gor V, Goryanin II, Hedley WJ, Hodgman TC, Hofmeyr JH, Hunter PJ, et al. 2003. The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models. Bioinformatics 19:524–531. DOI: https://doi.org/10.1093/bioinformatics/btg015, PMID: 12611808\n\nHucka M, Nickerson DP, Bader GD, Bergmann FT, Cooper J, Demir E, Garny A, Golebiewski M, Myers CJ, Schreiber F, Waltemath D, Le Novère N. 2015. Promoting coordinated development of community-based information standards for modeling in biology: the COMBINE initiative. Frontiers in Bioengineering and Biotechnology 3:19. DOI: https://doi.org/10.3389/fbioe.2015.00019, PMID: 25759811\n\nHunter JD. 2007. Matplotlib: A 2D graphics environment. Computing in Science & Engineering 9:90–95. DOI: https://doi.org/10.1109/MCSE.2007.55\n\nINCF. 2023. Role of community standards. https://www.incf.org/role-community-standards [Accessed November 9, 2023].\n\nIzhikevich EM. 2004. Which model to use for cortical spiking neurons? IEEE Transactions on Neural Networks 15:1063–1070. DOI: https://doi.org/10.1109/TNN.2004.832719, PMID: 15484883\n\nKriener B, Hu H, Vervaeke K. 2022. Parvalbumin interneuron dendrites enhance gamma oscillations. Cell Reports 39:110948. DOI: https://doi.org/10.1016/j.celrep.2022.110948, PMID: 35705055\n\nLapicque L. 1907. Recherches quantitatives sur L’excitation électrique des nerfs traitée comme une polarisation. Journal de Physiologie et de Pathologie Generale 9:620–635.\n\nLarson SD, Martone ME. 2013. NeuroLex.org: an online framework for neuroscience knowledge. Frontiers in Neuroinformatics 7:18. DOI: https://doi.org/10.3389/fninf.2013.00018, PMID: 24009581\n\nLloyd CM, Halstead MDB, Nielsen PF. 2004. CellML: its future, present and past. Progress in Biophysics and Molecular Biology 85:433–450. DOI: https://doi.org/10.1016/j.pbiomolbio.2004.01.004\n\nMaex R, Schutter ED. 1998. Synchronization of golgi and granule cell firing in a detailed network model of the cerebellar granule cell layer. Journal of Neurophysiology 80:2521–2537. DOI: https://doi.org/10.1152/jn.1998.80.5.2521\n\nMarkram H, Muller E, Ramaswamy S, Reimann MW, Abdellah M, Sanchez CA, Ailamaki A, Alonso-Nanclares L, Arsever S, Kahou GAA, Berger TK, Bilgili A, Buncic N, Chalimourda A, Chindemi G, Courcol JD, Sinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":34.63,"w":408.9,"h":674.51}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://doi.org/10.5281/zenodo.6417333","text":" DOI: https://doi."},{"url":"https://doi.org/10.5281/zenodo.5788686","text":""},{"url":"https://doi.org/10.5281/zenodo.5788686","text":"org/10.5281/zenodo.5788686"},{"url":"https://doi.org/10.1016/j.neuron.2023.03.037","text":"https://doi.org/10.1016/j.neuron.2023.03.037, PMID: 37100054"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/37100054","text":""},{"url":"https://doi.org/10.5281/zenodo.13350473","text":". 0.13.3. Zenodo. https://doi.org/10.5281/zenodo.13342731"},{"url":"https://doi.org/10.5281/zenodo.13342731","text":", SinhaA. 2024. NeuroML 2. swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6. Software "},{"url":"https://archive.softwareheritage.org/swh:1:dir:154dee293f0193f24f7a66dc41d07442168ef9b8;origin=https://github.com/NeuroML/NeuroML2;visit=swh:1:snp:afc51d39c98b0e7463ca75776835b8014dc7b4c2;anchor=swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6","text":" "},{"url":"https://archive.softwareheritage.org/swh:1:dir:154dee293f0193f24f7a66dc41d07442168ef9b8;origin=https://github.com/NeuroML/NeuroML2;visit=swh:1:snp:afc51d39c98b0e7463ca75776835b8014dc7b4c2;anchor=swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6","text":"origin=https://github.com/NeuroML/NeuroML2;visit=swh:1:snp:afc51d39c98b0e7463ca75776835b801  "},{"url":"https://archive.softwareheritage.org/swh:1:dir:154dee293f0193f24f7a66dc41d07442168ef9b8;origin=https://github.com/NeuroML/NeuroML2;visit=swh:1:snp:afc51d39c98b0e7463ca75776835b8014dc7b4c2;anchor=swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6","text":"4dc7b4c2;anchor=swh:1:rev:50aacc6f0b97cf4a70f6887d4beb6b3b67c32eb6"},{"url":"https://doi.org/10.1098/rstb.2001.0910","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/11545699","text":"11545699"},{"url":"https://doi.org/10.1038/sdata.2016.44","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/27326542","text":""},{"url":"https://doi.org/10.1016/j.neuron.2021.03.027","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/33848473","text":"33848473"},{"url":"https://doi.org/10.1038/s41586-020-2649-2","text":" "},{"url":"https://doi.org/10.1038/s41586-020-2649-2","text":"1038/s41586-020-2649-2, PMID: 32939066"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/32939066","text":""},{"url":"https://doi.org/10.1371/journal.pcbi.1002107","text":"https://doi.org/10.1371/journal.pcbi.1002107, PMID: 21829333"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/21829333","text":""},{"url":"https://doi.org/10.1098/rspb.1984.0024","text":" "},{"url":"https://doi.org/10.1098/rspb.1984.0024","text":"doi.org/10.1098/rspb.1984.0024, PMID: 6144106"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/6144106","text":""},{"url":"https://doi.org/10.1162/neco.1997.9.6.1179","text":"https://doi.org/10.1162/neco.1997.9.6.1179"},{"url":"https://doi.org/10.1113/jphysiol.1952.sp004764","text":" "},{"url":"https://doi.org/10.1113/jphysiol.1952.sp004764","text":"sp004764, PMID: 12991237"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/12991237","text":""},{"url":"https://doi.org/10.1093/bioinformatics/btg015","text":" "},{"url":"https://doi.org/10.1093/bioinformatics/btg015","text":"bioinformatics/btg015, PMID: 12611808"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/12611808","text":""},{"url":"https://doi.org/10.3389/fbioe.2015.00019","text":". 2007. Matplotlib: A 2D graphics environment. "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/25759811","text":"Computing in Science & Engineering"},{"url":"https://doi.org/10.1109/MCSE.2007.55","text":"https://doi.org/10.1109/MCSE.2007.55"},{"url":"https://www.incf.org/role-community-standards","text":""},{"url":"https://doi.org/10.1109/TNN.2004.832719","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/15484883","text":""},{"url":"https://doi.org/10.1016/j.celrep.2022.110948","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/35705055","text":""},{"url":"https://doi.org/10.3389/fninf.2013.00018","text":", Halstead MDB, Nielsen PF. 2004. CellML: its future, present and past. "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/24009581","text":", Halstead MDB, Nielsen PF. 2004. CellML: its future, present and past. "},{"url":"https://doi.org/10.1016/j.pbiomolbio.2004.01.004","text":", Schutter ED. 1998. Synchronization of golgi and granule cell ﬁring in a detailed network model of the "},{"url":"https://doi.org/10.1152/jn.1998.80.5.2521","text":" "},{"url":"https://doi.org/10.1152/jn.1998.80.5.2521","text":"80.5.2521"}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.652},{"page":43,"text":"           Tools  and  resources                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Neuroscience\n                                                                                                                                                                                                                                                                        Delalondre F, Delattre V, Druckmann S, et al. 2015. Reconstruction and simulation of neocortical microcircuitry.  Delalondre F, Delattre V, Druckmann S, et al. 2015. Reconstruction and simulation of neocortical microcircuitry.  Delalondre F, Delattre V, Druckmann S, et al. 2015. Reconstruction and simulation of neocortical microcircuitry.\n                                                                                                                                                                                                                                                                        Cell 163:456–492. DOI: https://doi.org/10.1016/j.cell.2015.09.029, PMID: 26451489                                 Cell 163:456–492. DOI: https://doi.org/10.1016/j.cell.2015.09.029, PMID: 26451489                                 Cell 163:456–492. DOI: https://doi.org/10.1016/j.cell.2015.09.029, PMID: 26451489\n                                   Martone M, Das S. 2019. Call for community review of NeuroML — a model description language for                   Martone M, Das S. 2019. Call for community review of NeuroML — a model description language for                   Martone M, Das S. 2019. Call for community review of NeuroML — a model description language for\n                                                                                                                                                                                                                                                                        computational neuroscience. F1000 Research 8:75. DOI: https://doi.org/10.7490/F1000RESEARCH.1116398.1             computational neuroscience. F1000 Research 8:75. DOI: https://doi.org/10.7490/F1000RESEARCH.1116398.1             computational neuroscience. F1000 Research 8:75. DOI: https://doi.org/10.7490/F1000RESEARCH.1116398.1\n                                   McDougal RA, Morse TM, Carnevale T, Marenco L, Wang R, Migliore M, Miller PL, Shepherd GM, Hines ML.              McDougal RA, Morse TM, Carnevale T, Marenco L, Wang R, Migliore M, Miller PL, Shepherd GM, Hines ML.              McDougal RA, Morse TM, Carnevale T, Marenco L, Wang R, Migliore M, Miller PL, Shepherd GM, Hines ML.\n                                                                                                                                                                                                                                                                        2017. Twenty years of ModelDB and beyond: building essential modeling tools for the future of neuroscience.       2017. Twenty years of ModelDB and beyond: building essential modeling tools for the future of neuroscience.       2017. Twenty years of ModelDB and beyond: building essential modeling tools for the future of neuroscience.\n                                                                                                                                                                                                                                                                        Journal of Computational Neuroscience 42:1–10. DOI: https://doi.org/10.1007/s10827-016-0623-7, PMID:              Journal of Computational Neuroscience 42:1–10. DOI: https://doi.org/10.1007/s10827-016-0623-7, PMID:              Journal of Computational Neuroscience 42:1–10. DOI: https://doi.org/10.1007/s10827-016-0623-7, PMID:\nn                                   Mejias JF, Murray JD, Kennedy H, Wang XJ. 2016. Feedforward and feedback frequency-                               Mejias JF, Murray JD, Kennedy H, Wang XJ. 2016. Feedforward and feedback frequency-                               Mejias JF, Murray JD, Kennedy H, Wang XJ. 2016. Feedforward and feedback frequency-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            dependent interactions\n                                                                                                                                                                                                                                                                        in a large-                                                                                                       in a large-                                                                                                       in a large-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            scale laminar network of the primate cortex. Science Advances 2:e1601335. DOI: https://doi.org/10.\n                                                                                                                                                                                                                                                                        1126/sciadv.1601335, PMID: 28138530                                                                               1126/sciadv.1601335, PMID: 28138530                                                                               1126/sciadv.1601335, PMID: 28138530\n                                   Migliore M, Morse TM, Davison AP, Marenco L, Shepherd GM, Hines ML. 2003. ModelDB: making models                  Migliore M, Morse TM, Davison AP, Marenco L, Shepherd GM, Hines ML. 2003. ModelDB: making models                  Migliore M, Morse TM, Davison AP, Marenco L, Shepherd GM, Hines ML. 2003. ModelDB: making models\n                                                                                                                                                                                                                                                                        publicly accessible to support computational neuroscience. Neuroinformatics 1:135–139. DOI: https://doi.org/      publicly accessible to support computational neuroscience. Neuroinformatics 1:135–139. DOI: https://doi.org/      publicly accessible to support computational neuroscience. Neuroinformatics 1:135–139. DOI: https://doi.org/\n                                                                                                                                                                                                                                                                        10.1385/NI:1:1:135, PMID: 15055399                                                                                10.1385/NI:1:1:135, PMID: 15055399                                                                                10.1385/NI:1:1:135, PMID: 15055399\n                                   Migliore M, Ferrante M, Ascoli GA. 2005. Signal propagation in oblique dendrites of CA1 pyramidal cells.          Migliore M, Ferrante M, Ascoli GA. 2005. Signal propagation in oblique dendrites of CA1 pyramidal cells.          Migliore M, Ferrante M, Ascoli GA. 2005. Signal propagation in oblique dendrites of CA1 pyramidal cells.\n                                                                                                                                                                                                                                                                        Journal of Neurophysiology 94:4145–4155. DOI: https://doi.org/10.1152/jn.00521.2005, PMID: 16293591               Journal of Neurophysiology 94:4145–4155. DOI: https://doi.org/10.1152/jn.00521.2005, PMID: 16293591               Journal of Neurophysiology 94:4145–4155. DOI: https://doi.org/10.1152/jn.00521.2005, PMID: 16293591\n                                   Migliore M, Cavarretta F, Hines ML, Shepherd GM. 2014. Distributed organization of a brain microcircuit           Migliore M, Cavarretta F, Hines ML, Shepherd GM. 2014. Distributed organization of a brain microcircuit           Migliore M, Cavarretta F, Hines ML, Shepherd GM. 2014. Distributed organization of a brain microcircuit\n                                                                                                                                                                                                                                                                        analyzed by three-                                                                                                analyzed by three-                                                                                                analyzed by three-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            dimensional modeling: the olfactory bulb. Frontiers in Computational Neuroscience 8:50.\n                                                                                                                                                                                                                                                                        DOI: https://doi.org/10.3389/fncom.2014.00050, PMID: 24808855                                                     DOI: https://doi.org/10.3389/fncom.2014.00050, PMID: 24808855                                                     DOI: https://doi.org/10.3389/fncom.2014.00050, PMID: 24808855\n                                   Morris C, Lecar H. 1981. Voltage oscillations in the barnacle giant muscle ﬁber. Biophysical Journal 35:193–213.  Morris C, Lecar H. 1981. Voltage oscillations in the barnacle giant muscle ﬁber. Biophysical Journal 35:193–213.  Morris C, Lecar H. 1981. Voltage oscillations in the barnacle giant muscle ﬁber. Biophysical Journal 35:193–213.\n                                                                                                                                                                                                                                                                        DOI: https://doi.org/10.1016/S0006-3495(81)84782-0, PMID: 7260316                                                 DOI: https://doi.org/10.1016/S0006-3495(81)84782-0, PMID: 7260316                                                 DOI: https://doi.org/10.1016/S0006-3495(81)84782-0, PMID: 7260316\n                                   Muller E, Bednar JA, Diesmann M, Gewaltig MO, Hines M, Davison AP. 2015. Python in neuroscience. Frontiers        Muller E, Bednar JA, Diesmann M, Gewaltig MO, Hines M, Davison AP. 2015. Python in neuroscience. Frontiers        Muller E, Bednar JA, Diesmann M, Gewaltig MO, Hines M, Davison AP. 2015. Python in neuroscience. Frontiers\n                                                                                                                                                                                                                                                                        in Neuroinformatics 9:11. DOI: https://doi.org/10.3389/fninf.2015.00011, PMID: 25926788                           in Neuroinformatics 9:11. DOI: https://doi.org/10.3389/fninf.2015.00011, PMID: 25926788                           in Neuroinformatics 9:11. DOI: https://doi.org/10.3389/fninf.2015.00011, PMID: 25926788\n                                   Neal ML, König M, Nickerson D, Mısırlı G, Kalbasi R, Dräger A, Atalag K, Chelliah V, Cooling MT, Cook DL,         Neal ML, König M, Nickerson D, Mısırlı G, Kalbasi R, Dräger A, Atalag K, Chelliah V, Cooling MT, Cook DL,         Neal ML, König M, Nickerson D, Mısırlı G, Kalbasi R, Dräger A, Atalag K, Chelliah V, Cooling MT, Cook DL,\n                                                                                                                                                                                                                                                                        Crook S, de Alba M, Friedman SH, Garny A, Gennari JH, Gleeson P, Golebiewski M, Hucka M, Juty N, Myers C,         Crook S, de Alba M, Friedman SH, Garny A, Gennari JH, Gleeson P, Golebiewski M, Hucka M, Juty N, Myers C,         Crook S, de Alba M, Friedman SH, Garny A, Gennari JH, Gleeson P, Golebiewski M, Hucka M, Juty N, Myers C,\n                                                                                                                                                                                                                                                                        et al. 2019. Harmonizing semantic annotations for computational models in biology. Brieﬁngs in Bioinformatics     et al. 2019. Harmonizing semantic annotations for computational models in biology. Brieﬁngs in Bioinformatics     et al. 2019. Harmonizing semantic annotations for computational models in biology. Brieﬁngs in Bioinformatics\n                                                                                                                                                                                                                                                                        20:540–550. DOI: https://doi.org/10.1093/bib/bby087, PMID: 30462164                                               20:540–550. DOI: https://doi.org/10.1093/bib/bby087, PMID: 30462164                                               20:540–550. DOI: https://doi.org/10.1093/bib/bby087, PMID: 30462164\n                                   Omar C, Aldrich J, Gerkin RC. 2014 Collaborative infrastructure for test-                                         Omar C, Aldrich J, Gerkin RC. 2014 Collaborative infrastructure for test-                                         Omar C, Aldrich J, Gerkin RC. 2014 Collaborative infrastructure for test-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            driven scientiﬁc model validation. ICSE\n                                                                                                                                                                                                                                                                        ’14 Association for Computing Machinery. . DOI: https://doi.org/10.1145/2591062.2591129                           ’14 Association for Computing Machinery. . DOI: https://doi.org/10.1145/2591062.2591129                           ’14 Association for Computing Machinery. . DOI: https://doi.org/10.1145/2591062.2591129\n                                   Panagiotou S, Sidiropoulos H, Soudris D, Negrello M, Strydis C. 2022. EDEN: a high-                               Panagiotou S, Sidiropoulos H, Soudris D, Negrello M, Strydis C. 2022. EDEN: a high-                               Panagiotou S, Sidiropoulos H, Soudris D, Negrello M, Strydis C. 2022. EDEN: a high-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            performance, general-\n                                                                                                                                                                                                                                                                        purpose, NeuroML-                                                                                                 purpose, NeuroML-                                                                                                 purpose, NeuroML-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            based neural simulator. Frontiers in Neuroinformatics 16:724336. DOI: https://doi.org/10.\n                                                                                                                                                                                                                                                                        3389/fninf.2022.724336                                                                                            3389/fninf.2022.724336                                                                                            3389/fninf.2022.724336\n                                   Pinsky PF, Rinzel J. 1994. Intrinsic and network rhythmogenesis in a reduced Traub model for CA3 neurons.         Pinsky PF, Rinzel J. 1994. Intrinsic and network rhythmogenesis in a reduced Traub model for CA3 neurons.         Pinsky PF, Rinzel J. 1994. Intrinsic and network rhythmogenesis in a reduced Traub model for CA3 neurons.\n                                                                                                                                                                                                                                                                        Journal of Computational Neuroscience 1:39–60. DOI: https://doi.org/10.1007/BF00962717, PMID: 8792224             Journal of Computational Neuroscience 1:39–60. DOI: https://doi.org/10.1007/BF00962717, PMID: 8792224             Journal of Computational Neuroscience 1:39–60. DOI: https://doi.org/10.1007/BF00962717, PMID: 8792224\n                                   Poirazi P, Papoutsi A. 2020. Illuminating dendritic function with computational models. Nature Reviews            Poirazi P, Papoutsi A. 2020. Illuminating dendritic function with computational models. Nature Reviews            Poirazi P, Papoutsi A. 2020. Illuminating dendritic function with computational models. Nature Reviews\n                                                                                                                                                                                                                                                                        Neuroscience 21:303–321. DOI: https://doi.org/10.1038/s41583-020-0301-7                                           Neuroscience 21:303–321. DOI: https://doi.org/10.1038/s41583-020-0301-7                                           Neuroscience 21:303–321. DOI: https://doi.org/10.1038/s41583-020-0301-7\n                                   Pospischil M, Toledo-                                                                                             Pospischil M, Toledo-                                                                                             Pospischil M, Toledo-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Rodriguez M, Monier C, Piwkowska Z, Bal T, Frégnac Y, Markram H, Destexhe A. 2008.\n                                                                                                                                                                                                                                                                        Minimal Hodgkin-                                                                                                  Minimal Hodgkin-                                                                                                  Minimal Hodgkin-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Huxley type models for different classes of cortical and thalamic neurons. Biological\n                                                                                                                                                                                                                                                                        Cybernetics 99:427–441. DOI: https://doi.org/10.1007/s00422-008-0263-8, PMID: 19011929                            Cybernetics 99:427–441. DOI: https://doi.org/10.1007/s00422-008-0263-8, PMID: 19011929                            Cybernetics 99:427–441. DOI: https://doi.org/10.1007/s00422-008-0263-8, PMID: 19011929\n                                   Potjans TC, Diesmann M. 2014. The cell-                                                                           Potjans TC, Diesmann M. 2014. The cell-                                                                           Potjans TC, Diesmann M. 2014. The cell-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            type speciﬁc cortical microcircuit: relating structure and activity in a\n                                                                                                                                                                                                                                                                        full-                                                                                                             full-                                                                                                             full-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            scale spiking network model. Cerebral Cortex 24:785–806. DOI: https://doi.org/10.1093/cercor/bhs358\n                                   Prinz AA, Bucher D, Marder E. 2004. Similar network activity from disparate circuit parameters. Nature            Prinz AA, Bucher D, Marder E. 2004. Similar network activity from disparate circuit parameters. Nature            Prinz AA, Bucher D, Marder E. 2004. Similar network activity from disparate circuit parameters. Nature\n                                                                                                                                                                                                                                                                        Neuroscience 7:1345–1352. DOI: https://doi.org/10.1038/nn1352                                                     Neuroscience 7:1345–1352. DOI: https://doi.org/10.1038/nn1352                                                     Neuroscience 7:1345–1352. DOI: https://doi.org/10.1038/nn1352\n                                   Ranjan R, Khazen G, Gambazzi L, Ramaswamy S, Hill SL, Schürmann F, Markram H. 2011. Channelpedia: an              Ranjan R, Khazen G, Gambazzi L, Ramaswamy S, Hill SL, Schürmann F, Markram H. 2011. Channelpedia: an              Ranjan R, Khazen G, Gambazzi L, Ramaswamy S, Hill SL, Schürmann F, Markram H. 2011. Channelpedia: an\n                                                                                                                                                                                                                                                                        integrative and interactive database for ion channels. Frontiers in Neuroinformatics 5:36. DOI: https://doi.org/  integrative and interactive database for ion channels. Frontiers in Neuroinformatics 5:36. DOI: https://doi.org/  integrative and interactive database for ion channels. Frontiers in Neuroinformatics 5:36. DOI: https://doi.org/\n                                                                                                                                                                                                                                                                        10.3389/fninf.2011.00036, PMID: 22232598                                                                          10.3389/fninf.2011.00036, PMID: 22232598                                                                          10.3389/fninf.2011.00036, PMID: 22232598\n                                   Ray S, Bhalla US. 2008. PyMOOSE: interoperable scripting in python for MOOSE. Frontiers in Neuroinformatics       Ray S, Bhalla US. 2008. PyMOOSE: interoperable scripting in python for MOOSE. Frontiers in Neuroinformatics       Ray S, Bhalla US. 2008. PyMOOSE: interoperable scripting in python for MOOSE. Frontiers in Neuroinformatics\n                                                                                                                                                                                                                                                                        2:6. DOI: https://doi.org/10.3389/neuro.11.006.2008, PMID: 19129924                                               2:6. DOI: https://doi.org/10.3389/neuro.11.006.2008, PMID: 19129924                                               2:6. DOI: https://doi.org/10.3389/neuro.11.006.2008, PMID: 19129924\n                                   Ray S, Aldworth ZN, Stopfer MA. 2020. Feedback inhibition and its control in an insect olfactory circuit. eLife   Ray S, Aldworth ZN, Stopfer MA. 2020. Feedback inhibition and its control in an insect olfactory circuit. eLife   Ray S, Aldworth ZN, Stopfer MA. 2020. Feedback inhibition and its control in an insect olfactory circuit. eLife\n                                                                                                                                                                                                                                                                        9:e53281. DOI: https://doi.org/10.7554/eLife.53281, PMID: 32163034                                                9:e53281. DOI: https://doi.org/10.7554/eLife.53281, PMID: 32163034                                                9:e53281. DOI: https://doi.org/10.7554/eLife.53281, PMID: 32163034\n                                   Rossant C, Goodman DFM, Fontaine B, Platkiewicz J, Magnusson AK, Brette R. 2011. Fitting neuron models to         Rossant C, Goodman DFM, Fontaine B, Platkiewicz J, Magnusson AK, Brette R. 2011. Fitting neuron models to         Rossant C, Goodman DFM, Fontaine B, Platkiewicz J, Magnusson AK, Brette R. 2011. Fitting neuron models to\n                                                                                                                                                                                                                                                                        spike trains. Frontiers in Neuroscience 5:9. DOI: https://doi.org/10.3389/fnins.2011.00009                        spike trains. Frontiers in Neuroscience 5:9. DOI: https://doi.org/10.3389/fnins.2011.00009                        spike trains. Frontiers in Neuroscience 5:9. DOI: https://doi.org/10.3389/fnins.2011.00009\n                                   Rothganger F, Warrender CE, Trumbo D, Aimone JB. 2014. N2A: a computational tool for modeling from                Rothganger F, Warrender CE, Trumbo D, Aimone JB. 2014. N2A: a computational tool for modeling from                Rothganger F, Warrender CE, Trumbo D, Aimone JB. 2014. N2A: a computational tool for modeling from\n                                                                                                                                                                                                                                                                        neurons to algorithms. Frontiers in Neural Circuits 8:1. DOI: https://doi.org/10.3389/fncir.2014.00001, PMID:     neurons to algorithms. Frontiers in Neural Circuits 8:1. DOI: https://doi.org/10.3389/fncir.2014.00001, PMID:     neurons to algorithms. Frontiers in Neural Circuits 8:1. DOI: https://doi.org/10.3389/fncir.2014.00001, PMID:\nn                                   Sadeh S, Silver RA, Mrsic-                                                                                        Sadeh S, Silver RA, Mrsic-                                                                                        Sadeh S, Silver RA, Mrsic-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Flogel TD, Muir DR. 2017. Assessing the role of inhibition in stabilizing neocortical\n                                                                                                                                                                                                                                                                        networks requires large-                                                                                          networks requires large-                                                                                          networks requires large-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            scale perturbation of the inhibitory population. The Journal of Neuroscience\n                                                                                                                                                                                                                                                                        37:12050–12067. DOI: https://doi.org/10.1523/JNEUROSCI.0963-17.2017, PMID: 29074575                               37:12050–12067. DOI: https://doi.org/10.1523/JNEUROSCI.0963-17.2017, PMID: 29074575                               37:12050–12067. DOI: https://doi.org/10.1523/JNEUROSCI.0963-17.2017, PMID: 29074575\n                                   Shaikh B, Smith LP, Vasilescu D, Marupilla G, Wilson M, Agmon E, Agnew H, Andrews SS, Anwar A, Beber ME,          Shaikh B, Smith LP, Vasilescu D, Marupilla G, Wilson M, Agmon E, Agnew H, Andrews SS, Anwar A, Beber ME,          Shaikh B, Smith LP, Vasilescu D, Marupilla G, Wilson M, Agmon E, Agnew H, Andrews SS, Anwar A, Beber ME,\n                                                                                                                                                                                                                                                                        Bergmann FT, Brooks D, Brusch L, Calzone L, Choi K, Cooper J, Detloff J, Drawert B, Dumontier M,                  Bergmann FT, Brooks D, Brusch L, Calzone L, Choi K, Cooper J, Detloff J, Drawert B, Dumontier M,                  Bergmann FT, Brooks D, Brusch L, Calzone L, Choi K, Cooper J, Detloff J, Drawert B, Dumontier M,\n                                                                                                                                                                                                                                                                        Ermentrout GB, et al. 2022. BioSimulators: a central registry of simulation engines and services for              Ermentrout GB, et al. 2022. BioSimulators: a central registry of simulation engines and services for              Ermentrout GB, et al. 2022. BioSimulators: a central registry of simulation engines and services for\n                                                                                                                                                                                                                                                                        recommending speciﬁc tools. Nucleic Acids Research 50:W108–W114. DOI: https://doi.org/10.1093/nar/                recommending speciﬁc tools. Nucleic Acids Research 50:W108–W114. DOI: https://doi.org/10.1093/nar/                recommending speciﬁc tools. Nucleic Acids Research 50:W108–W114. DOI: https://doi.org/10.1093/nar/\n                                                                                                                                                                                                                                                                        gkac331, PMID: 35524558                                                                                           gkac331, PMID: 35524558                                                                                           gkac331, PMID: 35524558\n                                   Sinha A. 2023. NeuralEnsemble/libneuroml. v0.5.5. Zenodo. https://doi.org/10.5281/zenodo.8364786                  Sinha A. 2023. NeuralEnsemble/libneuroml. v0.5.5. Zenodo. https://doi.org/10.5281/zenodo.8364786                  Sinha A. 2023. NeuralEnsemble/libneuroml. v0.5.5. Zenodo. https://doi.org/10.5281/zenodo.8364786\n                                   Sinha A. 2024. NeuroML/pyneuroml. v1.2.5. Zenodo. https://doi.org/10.5281/zenodo.10783062                         Sinha A. 2024. NeuroML/pyneuroml. v1.2.5. Zenodo. https://doi.org/10.5281/zenodo.10783062                         Sinha A. 2024. NeuroML/pyneuroml. v1.2.5. Zenodo. https://doi.org/10.5281/zenodo.10783062\n                                   Sinha A, Garrett A. 2024. inspyred -- A framework for creating bio-                                               Sinha A, Garrett A. 2024. inspyred -- A framework for creating bio-                                               Sinha A, Garrett A. 2024. inspyred -- A framework for creating bio-\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            inspired computational intelligence algorithms\n                                                                                                                                                                                                                                                                        in python. 1d0089c. GitHub. https://github.com/aarongarrett/inspyred                                              in python. 1d0089c. GitHub. https://github.com/aarongarrett/inspyred                                              in python. 1d0089c. GitHub. https://github.com/aarongarrett/inspyred\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                                                                                                                                                                                                                                                                                                                                                                                       43 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nDelalondre F, Delattre V, Druckmann S, et al. 2015. Reconstruction and simulation of neocortical microcircuitry. Cell 163:456–492. DOI: https://doi.org/10.1016/j.cell.2015.09.029, PMID: 26451489\n\nMartone M, Das S. 2019. Call for community review of NeuroML — a model description language for computational neuroscience. F1000 Research 8:75. DOI: https://doi.org/10.7490/F1000RESEARCH.1116398.1\n\nMcDougal RA, Morse TM, Carnevale T, Marenco L, Wang R, Migliore M, Miller PL, Shepherd GM, Hines ML. 2017. Twenty years of ModelDB and beyond: building essential modeling tools for the future of neuroscience. Journal of Computational Neuroscience 42:1–10. DOI: https://doi.org/10.1007/s10827-016-0623-7, PMID: 27629590\n\nMejias JF, Murray JD, Kennedy H, Wang XJ. 2016. Feedforward and feedback frequency-dependent interactions in a large-scale laminar network of the primate cortex. Science Advances 2:e1601335. DOI: https://doi.org/10.1126/sciadv.1601335, PMID: 28138530\n\nMigliore M, Morse TM, Davison AP, Marenco L, Shepherd GM, Hines ML. 2003. ModelDB: making models publicly accessible to support computational neuroscience. Neuroinformatics 1:135–139. DOI: https://doi.org/10.1385/NI:1:1:135, PMID: 15055399\n\nMigliore M, Ferrante M, Ascoli GA. 2005. Signal propagation in oblique dendrites of CA1 pyramidal cells. Journal of Neurophysiology 94:4145–4155. DOI: https://doi.org/10.1152/jn.00521.2005, PMID: 16293591\n\nMigliore M, Cavarretta F, Hines ML, Shepherd GM. 2014. Distributed organization of a brain microcircuit analyzed by three-dimensional modeling: the olfactory bulb. Frontiers in Computational Neuroscience 8:50. DOI: https://doi.org/10.3389/fncom.2014.00050, PMID: 24808855\n\nMorris C, Lecar H. 1981. Voltage oscillations in the barnacle giant muscle fiber. Biophysical Journal 35:193–213. DOI: https://doi.org/10.1016/S0006-3495(81)84782-0, PMID: 7260316\n\nMuller E, Bednar JA, Diesmann M, Gewaltig MO, Hines M, Davison AP. 2015. Python in neuroscience. Frontiers in Neuroinformatics 9:11. DOI: https://doi.org/10.3389/fninf.2015.00011, PMID: 25926788\n\nNeal ML, König M, Nickerson D, Mısırlı G, Kalbasi R, Dräger A, Atalag K, Chelliah V, Cooling MT, Cook DL, Crook S, de Alba M, Friedman SH, Garny A, Gennari JH, Gleeson P, Golebiewski M, Hucka M, Juty N, Myers C, et al. 2019. Harmonizing semantic annotations for computational models in biology. Briefings in Bioinformatics 20:540–550. DOI: https://doi.org/10.1093/bib/bby087, PMID: 30462164\n\nOmar C, Aldrich J, Gerkin RC. 2014. Collaborative infrastructure for test-driven scientific model validation. ICSE '14 Association for Computing Machinery. DOI: https://doi.org/10.1145/2591062.2591129\n\nPanagiotou S, Sidiropoulos H, Soudris D, Negrello M, Strydis C. 2022. EDEN: a high-performance, general-purpose, NeuroML-based neural simulator. Frontiers in Neuroinformatics 16:724336. DOI: https://doi.org/10.3389/fninf.2022.724336\n\nPinsky PF, Rinzel J. 1994. Intrinsic and network rhythmogenesis in a reduced Traub model for CA3 neurons. Journal of Computational Neuroscience 1:39–60. DOI: https://doi.org/10.1007/BF00962717, PMID: 8792224\n\nPoirazi P, Papoutsi A. 2020. Illuminating dendritic function with computational models. Nature Reviews Neuroscience 21:303–321. DOI: https://doi.org/10.1038/s41583-020-0301-7\n\nPospischil M, Toledo-Rodriguez M, Monier C, Piwkowska Z, Bal T, Frégnac Y, Markram H, Destexhe A. 2008. Minimal Hodgkin-Huxley type models for different classes of cortical and thalamic neurons. Biological Cybernetics 99:427–441. DOI: https://doi.org/10.1007/s00422-008-0263-8, PMID: 19011929\n\nPotjans TC, Diesmann M. 2014. The cell-type specific cortical microcircuit: relating structure and activity in a full-scale spiking network model. Cerebral Cortex 24:785–806. DOI: https://doi.org/10.1093/cercor/bhs358\n\nPrinz AA, Bucher D, Marder E. 2004. Similar network activity from disparate circuit parameters. Nature Neuroscience 7:1345–1352. DOI: https://doi.org/10.1038/nn1352\n\nRanjan R, Khazen G, Gambazzi L, Ramaswamy S, Hill SL, Schürmann F, Markram H. 2011. Channelpedia: an integrative and interactive database for ion channels. Frontiers in Neuroinformatics 5:36. DOI: https://doi.org/10.3389/fninf.2011.00036, PMID: 22232598\n\nRay S, Bhalla US. 2008. PyMOOSE: interoperable scripting in python for MOOSE. Frontiers in Neuroinformatics 2:6. DOI: https://doi.org/10.3389/neuro.11.006.2008, PMID: 19129924\n\nRay S, Aldworth ZN, Stopfer MA. 2020. Feedback inhibition and its control in an insect olfactory circuit. eLife 9:e53281. DOI: https://doi.org/10.7554/eLife.53281, PMID: 32163034\n\nRossant C, Goodman DFM, Fontaine B, Platkiewicz J, Magnusson AK, Brette R. 2011. Fitting neuron models to spike trains. Frontiers in Neuroscience 5:9. DOI: https://doi.org/10.3389/fnins.2011.00009\n\nRothganger F, Warrender CE, Trumbo D, Aimone JB. 2014. N2A: a computational tool for modeling from neurons to algorithms. Frontiers in Neural Circuits 8:1. DOI: https://doi.org/10.3389/fncir.2014.00001, PMID: 24478635\n\nSadeh S, Silver RA, Mrsic-Flogel TD, Muir DR. 2017. Assessing the role of inhibition in stabilizing neocortical networks requires large-scale perturbation of the inhibitory population. The Journal of Neuroscience 37:12050–12067. DOI: https://doi.org/10.1523/JNEUROSCI.0963-17.2017, PMID: 29074575\n\nShaikh B, Smith LP, Vasilescu D, Marupilla G, Wilson M, Agmon E, Agnew H, Andrews SS, Anwar A, Beber ME, Bergmann FT, Brooks D, Brusch L, Calzone L, Choi K, Cooper J, Detloff J, Drawert B, Dumontier M, Ermentrout GB, et al. 2022. BioSimulators: a central registry of simulation engines and services for recommending specific tools. Nucleic Acids Research 50:W108–W114. DOI: https://doi.org/10.1093/nar/gkac331, PMID: 35524558\n\nSinha A. 2023. NeuralEnsemble/libneuroml. v0.5.5. Zenodo. https://doi.org/10.5281/zenodo.8364786\n\nSinha A. 2024. NeuroML/pyneuroml. v1.2.5. Zenodo. https://doi.org/10.5281/zenodo.10783062\n\nSinha A, Garrett A. 2024. inspyred -- A framework for creating bio-inspired computational intelligence algorithms in python. 1d0089c. GitHub. https://github.com/aarongarrett/inspyred\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.69,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"Delalondre F, Delattre V, Druckmann S, et al. 2015. Reconstruction and simulation of neocortical microcircuitry. Cell 163:456–492. DOI: https://doi.org/10.1016/j.cell.2015.09.029, PMID: 26451489\n\nMartone M, Das S. 2019. Call for community review of NeuroML — a model description language for computational neuroscience. F1000 Research 8:75. DOI: https://doi.org/10.7490/F1000RESEARCH.1116398.1\n\nMcDougal RA, Morse TM, Carnevale T, Marenco L, Wang R, Migliore M, Miller PL, Shepherd GM, Hines ML. 2017. Twenty years of ModelDB and beyond: building essential modeling tools for the future of neuroscience. Journal of Computational Neuroscience 42:1–10. DOI: https://doi.org/10.1007/s10827-016-0623-7, PMID: 27629590\n\nMejias JF, Murray JD, Kennedy H, Wang XJ. 2016. Feedforward and feedback frequency-dependent interactions in a large-scale laminar network of the primate cortex. Science Advances 2:e1601335. DOI: https://doi.org/10.1126/sciadv.1601335, PMID: 28138530\n\nMigliore M, Morse TM, Davison AP, Marenco L, Shepherd GM, Hines ML. 2003. ModelDB: making models publicly accessible to support computational neuroscience. Neuroinformatics 1:135–139. DOI: https://doi.org/10.1385/NI:1:1:135, PMID: 15055399\n\nMigliore M, Ferrante M, Ascoli GA. 2005. Signal propagation in oblique dendrites of CA1 pyramidal cells. Journal of Neurophysiology 94:4145–4155. DOI: https://doi.org/10.1152/jn.00521.2005, PMID: 16293591\n\nMigliore M, Cavarretta F, Hines ML, Shepherd GM. 2014. Distributed organization of a brain microcircuit analyzed by three-dimensional modeling: the olfactory bulb. Frontiers in Computational Neuroscience 8:50. DOI: https://doi.org/10.3389/fncom.2014.00050, PMID: 24808855\n\nMorris C, Lecar H. 1981. Voltage oscillations in the barnacle giant muscle fiber. Biophysical Journal 35:193–213. DOI: https://doi.org/10.1016/S0006-3495(81)84782-0, PMID: 7260316\n\nMuller E, Bednar JA, Diesmann M, Gewaltig MO, Hines M, Davison AP. 2015. Python in neuroscience. Frontiers in Neuroinformatics 9:11. DOI: https://doi.org/10.3389/fninf.2015.00011, PMID: 25926788\n\nNeal ML, König M, Nickerson D, Mısırlı G, Kalbasi R, Dräger A, Atalag K, Chelliah V, Cooling MT, Cook DL, Crook S, de Alba M, Friedman SH, Garny A, Gennari JH, Gleeson P, Golebiewski M, Hucka M, Juty N, Myers C, et al. 2019. Harmonizing semantic annotations for computational models in biology. Briefings in Bioinformatics 20:540–550. DOI: https://doi.org/10.1093/bib/bby087, PMID: 30462164\n\nOmar C, Aldrich J, Gerkin RC. 2014. Collaborative infrastructure for test-driven scientific model validation. ICSE '14 Association for Computing Machinery. DOI: https://doi.org/10.1145/2591062.2591129\n\nPanagiotou S, Sidiropoulos H, Soudris D, Negrello M, Strydis C. 2022. EDEN: a high-performance, general-purpose, NeuroML-based neural simulator. Frontiers in Neuroinformatics 16:724336. DOI: https://doi.org/10.3389/fninf.2022.724336\n\nPinsky PF, Rinzel J. 1994. Intrinsic and network rhythmogenesis in a reduced Traub model for CA3 neurons. Journal of Computational Neuroscience 1:39–60. DOI: https://doi.org/10.1007/BF00962717, PMID: 8792224\n\nPoirazi P, Papoutsi A. 2020. Illuminating dendritic function with computational models. Nature Reviews Neuroscience 21:303–321. DOI: https://doi.org/10.1038/s41583-020-0301-7\n\nPospischil M, Toledo-Rodriguez M, Monier C, Piwkowska Z, Bal T, Frégnac Y, Markram H, Destexhe A. 2008. Minimal Hodgkin-Huxley type models for different classes of cortical and thalamic neurons. Biological Cybernetics 99:427–441. DOI: https://doi.org/10.1007/s00422-008-0263-8, PMID: 19011929\n\nPotjans TC, Diesmann M. 2014. The cell-type specific cortical microcircuit: relating structure and activity in a full-scale spiking network model. Cerebral Cortex 24:785–806. DOI: https://doi.org/10.1093/cercor/bhs358\n\nPrinz AA, Bucher D, Marder E. 2004. Similar network activity from disparate circuit parameters. Nature Neuroscience 7:1345–1352. DOI: https://doi.org/10.1038/nn1352\n\nRanjan R, Khazen G, Gambazzi L, Ramaswamy S, Hill SL, Schürmann F, Markram H. 2011. Channelpedia: an integrative and interactive database for ion channels. Frontiers in Neuroinformatics 5:36. DOI: https://doi.org/10.3389/fninf.2011.00036, PMID: 22232598\n\nRay S, Bhalla US. 2008. PyMOOSE: interoperable scripting in python for MOOSE. Frontiers in Neuroinformatics 2:6. DOI: https://doi.org/10.3389/neuro.11.006.2008, PMID: 19129924\n\nRay S, Aldworth ZN, Stopfer MA. 2020. Feedback inhibition and its control in an insect olfactory circuit. eLife 9:e53281. DOI: https://doi.org/10.7554/eLife.53281, PMID: 32163034\n\nRossant C, Goodman DFM, Fontaine B, Platkiewicz J, Magnusson AK, Brette R. 2011. Fitting neuron models to spike trains. Frontiers in Neuroscience 5:9. DOI: https://doi.org/10.3389/fnins.2011.00009\n\nRothganger F, Warrender CE, Trumbo D, Aimone JB. 2014. N2A: a computational tool for modeling from neurons to algorithms. Frontiers in Neural Circuits 8:1. DOI: https://doi.org/10.3389/fncir.2014.00001, PMID: 24478635\n\nSadeh S, Silver RA, Mrsic-Flogel TD, Muir DR. 2017. Assessing the role of inhibition in stabilizing neocortical networks requires large-scale perturbation of the inhibitory population. The Journal of Neuroscience 37:12050–12067. DOI: https://doi.org/10.1523/JNEUROSCI.0963-17.2017, PMID: 29074575\n\nShaikh B, Smith LP, Vasilescu D, Marupilla G, Wilson M, Agmon E, Agnew H, Andrews SS, Anwar A, Beber ME, Bergmann FT, Brooks D, Brusch L, Calzone L, Choi K, Cooper J, Detloff J, Drawert B, Dumontier M, Ermentrout GB, et al. 2022. BioSimulators: a central registry of simulation engines and services for recommending specific tools. Nucleic Acids Research 50:W108–W114. DOI: https://doi.org/10.1093/nar/gkac331, PMID: 35524558\n\nSinha A. 2023. NeuralEnsemble/libneuroml. v0.5.5. Zenodo. https://doi.org/10.5281/zenodo.8364786\n\nSinha A. 2024. NeuroML/pyneuroml. v1.2.5. Zenodo. https://doi.org/10.5281/zenodo.10783062\n\nSinha A, Garrett A. 2024. inspyred -- A framework for creating bio-inspired computational intelligence algorithms in python. 1d0089c. GitHub. https://github.com/aarongarrett/inspyred\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Delalondre F, Delattre V, Druckmann S, et al. 2015. Reconstruction and simulation of neocortical microcircuitry. Cell 163:456–492. DOI: https://doi.org/10.1016/j.cell.2015.09.029, PMID: 26451489\n\nMartone M, Das S. 2019. Call for community review of NeuroML — a model description language for computational neuroscience. F1000 Research 8:75. DOI: https://doi.org/10.7490/F1000RESEARCH.1116398.1\n\nMcDougal RA, Morse TM, Carnevale T, Marenco L, Wang R, Migliore M, Miller PL, Shepherd GM, Hines ML. 2017. Twenty years of ModelDB and beyond: building essential modeling tools for the future of neuroscience. Journal of Computational Neuroscience 42:1–10. DOI: https://doi.org/10.1007/s10827-016-0623-7, PMID: 27629590\n\nMejias JF, Murray JD, Kennedy H, Wang XJ. 2016. Feedforward and feedback frequency-dependent interactions in a large-scale laminar network of the primate cortex. Science Advances 2:e1601335. DOI: https://doi.org/10.1126/sciadv.1601335, PMID: 28138530\n\nMigliore M, Morse TM, Davison AP, Marenco L, Shepherd GM, Hines ML. 2003. ModelDB: making models publicly accessible to support computational neuroscience. Neuroinformatics 1:135–139. DOI: https://doi.org/10.1385/NI:1:1:135, PMID: 15055399\n\nMigliore M, Ferrante M, Ascoli GA. 2005. Signal propagation in oblique dendrites of CA1 pyramidal cells. Journal of Neurophysiology 94:4145–4155. DOI: https://doi.org/10.1152/jn.00521.2005, PMID: 16293591\n\nMigliore M, Cavarretta F, Hines ML, Shepherd GM. 2014. Distributed organization of a brain microcircuit analyzed by three-dimensional modeling: the olfactory bulb. Frontiers in Computational Neuroscience 8:50. DOI: https://doi.org/10.3389/fncom.2014.00050, PMID: 24808855\n\nMorris C, Lecar H. 1981. Voltage oscillations in the barnacle giant muscle fiber. Biophysical Journal 35:193–213. DOI: https://doi.org/10.1016/S0006-3495(81)84782-0, PMID: 7260316\n\nMuller E, Bednar JA, Diesmann M, Gewaltig MO, Hines M, Davison AP. 2015. Python in neuroscience. Frontiers in Neuroinformatics 9:11. DOI: https://doi.org/10.3389/fninf.2015.00011, PMID: 25926788\n\nNeal ML, König M, Nickerson D, Mısırlı G, Kalbasi R, Dräger A, Atalag K, Chelliah V, Cooling MT, Cook DL, Crook S, de Alba M, Friedman SH, Garny A, Gennari JH, Gleeson P, Golebiewski M, Hucka M, Juty N, Myers C, et al. 2019. Harmonizing semantic annotations for computational models in biology. Briefings in Bioinformatics 20:540–550. DOI: https://doi.org/10.1093/bib/bby087, PMID: 30462164\n\nOmar C, Aldrich J, Gerkin RC. 2014. Collaborative infrastructure for test-driven scientific model validation. ICSE '14 Association for Computing Machinery. DOI: https://doi.org/10.1145/2591062.2591129\n\nPanagiotou S, Sidiropoulos H, Soudris D, Negrello M, Strydis C. 2022. EDEN: a high-performance, general-purpose, NeuroML-based neural simulator. Frontiers in Neuroinformatics 16:724336. DOI: https://doi.org/10.3389/fninf.2022.724336\n\nPinsky PF, Rinzel J. 1994. Intrinsic and network rhythmogenesis in a reduced Traub model for CA3 neurons. Journal of Computational Neuroscience 1:39–60. DOI: https://doi.org/10.1007/BF00962717, PMID: 8792224\n\nPoirazi P, Papoutsi A. 2020. Illuminating dendritic function with computational models. Nature Reviews Neuroscience 21:303–321. DOI: https://doi.org/10.1038/s41583-020-0301-7\n\nPospischil M, Toledo-Rodriguez M, Monier C, Piwkowska Z, Bal T, Frégnac Y, Markram H, Destexhe A. 2008. Minimal Hodgkin-Huxley type models for different classes of cortical and thalamic neurons. Biological Cybernetics 99:427–441. DOI: https://doi.org/10.1007/s00422-008-0263-8, PMID: 19011929\n\nPotjans TC, Diesmann M. 2014. The cell-type specific cortical microcircuit: relating structure and activity in a full-scale spiking network model. Cerebral Cortex 24:785–806. DOI: https://doi.org/10.1093/cercor/bhs358\n\nPrinz AA, Bucher D, Marder E. 2004. Similar network activity from disparate circuit parameters. Nature Neuroscience 7:1345–1352. DOI: https://doi.org/10.1038/nn1352\n\nRanjan R, Khazen G, Gambazzi L, Ramaswamy S, Hill SL, Schürmann F, Markram H. 2011. Channelpedia: an integrative and interactive database for ion channels. Frontiers in Neuroinformatics 5:36. DOI: https://doi.org/10.3389/fninf.2011.00036, PMID: 22232598\n\nRay S, Bhalla US. 2008. PyMOOSE: interoperable scripting in python for MOOSE. Frontiers in Neuroinformatics 2:6. DOI: https://doi.org/10.3389/neuro.11.006.2008, PMID: 19129924\n\nRay S, Aldworth ZN, Stopfer MA. 2020. Feedback inhibition and its control in an insect olfactory circuit. eLife 9:e53281. DOI: https://doi.org/10.7554/eLife.53281, PMID: 32163034\n\nRossant C, Goodman DFM, Fontaine B, Platkiewicz J, Magnusson AK, Brette R. 2011. Fitting neuron models to spike trains. Frontiers in Neuroscience 5:9. DOI: https://doi.org/10.3389/fnins.2011.00009\n\nRothganger F, Warrender CE, Trumbo D, Aimone JB. 2014. N2A: a computational tool for modeling from neurons to algorithms. Frontiers in Neural Circuits 8:1. DOI: https://doi.org/10.3389/fncir.2014.00001, PMID: 24478635\n\nSadeh S, Silver RA, Mrsic-Flogel TD, Muir DR. 2017. Assessing the role of inhibition in stabilizing neocortical networks requires large-scale perturbation of the inhibitory population. The Journal of Neuroscience 37:12050–12067. DOI: https://doi.org/10.1523/JNEUROSCI.0963-17.2017, PMID: 29074575\n\nShaikh B, Smith LP, Vasilescu D, Marupilla G, Wilson M, Agmon E, Agnew H, Andrews SS, Anwar A, Beber ME, Bergmann FT, Brooks D, Brusch L, Calzone L, Choi K, Cooper J, Detloff J, Drawert B, Dumontier M, Ermentrout GB, et al. 2022. BioSimulators: a central registry of simulation engines and services for recommending specific tools. Nucleic Acids Research 50:W108–W114. DOI: https://doi.org/10.1093/nar/gkac331, PMID: 35524558\n\nSinha A. 2023. NeuralEnsemble/libneuroml. v0.5.5. Zenodo. https://doi.org/10.5281/zenodo.8364786\n\nSinha A. 2024. NeuroML/pyneuroml. v1.2.5. Zenodo. https://doi.org/10.5281/zenodo.10783062\n\nSinha A, Garrett A. 2024. inspyred -- A framework for creating bio-inspired computational intelligence algorithms in python. 1d0089c. GitHub. https://github.com/aarongarrett/inspyred\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":34.63,"w":408.98,"h":685.41}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://doi.org/10.1016/j.cell.2015.09.029","text":", Das S. 2019. Call for community review of NeuroML — a model description language for "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/26451489","text":", Das S. 2019. Call for community review of NeuroML — a model description language for "},{"url":"https://doi.org/10.7490/F1000RESEARCH.1116398.1","text":", Morse TM, Carnevale T, Marenco L, Wang R, Migliore M, Miller PL, Shepherd GM, Hines ML. "},{"url":"https://doi.org/10.1007/s10827-016-0623-7","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/27629590","text":"27629590 Mejias JF"},{"url":"https://doi.org/10.1126/sciadv.1601335","text":" "},{"url":"https://doi.org/10.1126/sciadv.1601335","text":"1126/sciadv.1601335, PMID: 28138530 Migliore M"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/28138530","text":", Morse TM, Davison AP, Marenco L, Shepherd GM, Hines ML. 2003. ModelDB: making models "},{"url":"https://doi.org/10.1385/NI:1:1:135","text":" "},{"url":"https://doi.org/10.1385/NI:1:1:135","text":"10.1385/NI:1:1:135, PMID: 15055399 Migliore M"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/15055399","text":", Ferrante M, Ascoli GA. 2005. Signal propagation in oblique dendrites of CA1 pyramidal cells. "},{"url":"https://doi.org/10.1152/jn.00521.2005","text":", Cavarretta F, Hines ML, Shepherd GM. 2014. Distributed organization of a brain microcircuit "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/16293591","text":", Cavarretta F, Hines ML, Shepherd GM. 2014. Distributed organization of a brain microcircuit "},{"url":"https://doi.org/10.3389/fncom.2014.00050","text":"Morris C"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/24808855","text":", Lecar H. 1981. Voltage oscillations in the barnacle giant muscle ﬁber. "},{"url":"https://doi.org/10.1016/S0006-3495(81)84782-0","text":"Muller E"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/7260316","text":", Bednar JA, Diesmann M, Gewaltig MO, Hines M, Davison AP. 2015. Python in neuroscience. "},{"url":"https://doi.org/10.3389/fninf.2015.00011","text":", König M, Nickerson D, Mısırlı G, Kalbasi R, Dräger A, Atalag K, Chelliah V, Cooling MT, Cook DL, "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/25926788","text":", König M, Nickerson D, Mısırlı G, Kalbasi R, Dräger A, Atalag K, Chelliah V, Cooling MT, Cook DL, "},{"url":"https://doi.org/10.1093/bib/bby087","text":", Aldrich J, Gerkin RC. 2014 Collaborative infrastructure for test-"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/30462164","text":", Aldrich J, Gerkin RC. 2014 Collaborative infrastructure for test-"},{"url":"https://doi.org/10.1145/2591062.2591129","text":", Sidiropoulos H, Soudris D, Negrello M, Strydis C. 2022. EDEN: a high-"},{"url":"https://doi.org/10.3389/fninf.2022.724336","text":" "},{"url":"https://doi.org/10.3389/fninf.2022.724336","text":"3389/fninf.2022.724336 Pinsky PF"},{"url":"https://doi.org/10.1007/BF00962717","text":", Papoutsi A. 2020. Illuminating dendritic function with computational models. "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/8792224","text":"Nature Reviews "},{"url":"https://doi.org/10.1038/s41583-020-0301-7","text":"Rodriguez M, Monier C, Piwkowska Z, Bal T, Frégnac Y, Markram H, Destexhe A. 2008. "},{"url":"https://doi.org/10.1007/s00422-008-0263-8","text":", Diesmann M. 2014. The cell-"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/19011929","text":"type speciﬁc cortical microcircuit: relating structure and activity in a "},{"url":"https://doi.org/10.1093/cercor/bhs358","text":", Bucher D, Marder E. 2004. Similar network activity from disparate circuit parameters. "},{"url":"https://doi.org/10.1038/nn1352","text":", Khazen G, Gambazzi L, Ramaswamy S, Hill SL, Schürmann F, Markram H. 2011. Channelpedia: an "},{"url":"https://doi.org/10.3389/fninf.2011.00036","text":" "},{"url":"https://doi.org/10.3389/fninf.2011.00036","text":"10.3389/fninf.2011.00036, PMID: 22232598 Ray S"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/22232598","text":", Bhalla US. 2008. PyMOOSE: interoperable scripting in python for MOOSE. "},{"url":"https://doi.org/10.3389/neuro.11.006.2008","text":", Aldworth ZN, Stopfer MA. 2020. Feedback inhibition and its control in an insect olfactory circuit. "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/19129924","text":", Aldworth ZN, Stopfer MA. 2020. Feedback inhibition and its control in an insect olfactory circuit. "},{"url":"https://doi.org/10.7554/eLife.53281","text":", Goodman DFM, Fontaine B, Platkiewicz J, Magnusson AK, Brette R. 2011. Fitting neuron models to "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/32163034","text":", Goodman DFM, Fontaine B, Platkiewicz J, Magnusson AK, Brette R. 2011. Fitting neuron models to "},{"url":"https://doi.org/10.3389/fnins.2011.00009","text":", Warrender CE, Trumbo D, Aimone JB. 2014. N2A: a computational tool for modeling from "},{"url":"https://doi.org/10.3389/fncir.2014.00001","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/24478635","text":"24478635 Sadeh S"},{"url":"https://doi.org/10.1523/JNEUROSCI.0963-17.2017","text":", Smith LP, Vasilescu D, Marupilla G, Wilson M, Agmon E, Agnew H, Andrews SS, Anwar A, Beber ME, "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/29074575","text":", Smith LP, Vasilescu D, Marupilla G, Wilson M, Agmon E, Agnew H, Andrews SS, Anwar A, Beber ME, "},{"url":"https://doi.org/10.1093/nar/gkac331","text":" "},{"url":"https://doi.org/10.1093/nar/gkac331","text":"gkac331, PMID: 35524558 Sinha A"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/35524558","text":". 2023. NeuralEnsemble/libneuroml. v0.5.5. Zenodo. https://doi.org/10.5281/zenodo.8364786"},{"url":"https://doi.org/10.5281/zenodo.8364786","text":". 2024. NeuroML/pyneuroml. v1.2.5. Zenodo. https://doi.org/10.5281/zenodo.10783062"},{"url":"https://doi.org/10.5281/zenodo.10783062","text":", Garrett A. 2024. inspyred -- A framework for creating bio-"},{"url":"https://github.com/aarongarrett/inspyred","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.374},{"page":44,"text":"           Tools  and  resources                                                                                                   Neuroscience\n                                   Sivagnanam S. 2013. Introducing the Neuroscience Gateway. IWSG.\n                                   Smith SL, Smith IT, Branco T, Häusser M. 2013. Dendritic spikes enhance stimulus selectivity in cortical neurons in\n                                     vivo. Nature 503:115–120. DOI: https://doi.org/10.1038/nature12600, PMID: 24162850\n                                   Solinas S, Forti L, Cesana E, Mapelli J, De Schutter E, D’Angelo E. 2007. Computational reconstruction of\n                                     pacemaking and intrinsic electroresponsiveness in cerebellar Golgi cells. Frontiers in Cellular Neuroscience 1:2.\n                                     DOI: https://doi.org/10.3389/neuro.03.002.2007, PMID: 18946520\n                                   Stimberg M, Brette R, Goodman DF. 2019. Brian 2, an intuitive and efﬁcient neural simulator. eLife 8:e47314.\n                                     DOI: https://doi.org/10.7554/eLife.47314\n                                   Teeters JL, Godfrey K, Young R, Dang C, Friedsam C, Wark B, Asari H, Peron S, Li N, Peyrache A, Denisov G,\n                                     Siegle JH, Olsen SR, Martin C, Chun M, Tripathy S, Blanche TJ, Harris K, Buzsáki G, Koch C, et al. 2015.\n                                     Neurodata without borders: creating a common data format for neurophysiology. Neuron 88:629–634. DOI:\n                                     https://doi.org/10.1016/j.neuron.2015.10.025\n                                   Traub RD, Contreras D, Cunningham MO, Murray H, LeBeau FEN, Roopun A, Bibbig A, Wilent WB, Higley MJ,\n                                     Whittington MA. 2005. Single-\n                                                                   column thalamocortical network model exhibiting gamma oscillations, sleep\n                                     spindles, and epileptogenic bursts. Journal of Neurophysiology 93:2194–2232. DOI: https://doi.org/10.1152/\n                                     jn.00983.2004, PMID: 15525801\n                                   Van Geit W, Gevaert M, Chindemi G, Rössert C, Courcol JD, Muller EB, Schürmann F, Segev I, Markram H. 2016.\n                                     BluePyOpt: leveraging open source software and cloud infrastructure to optimise model parameters in\n                                     neuroscience. Frontiers in Neuroinformatics 10:17. DOI: https://doi.org/10.3389/fninf.2016.00017, PMID:\n                                     27375471\n                                   Vella M, Cannon RC, Crook S, Davison AP, Ganapathy G, Robinson HPC, Silver RA, Gleeson P. 2014. libNeuroML\n                                     and PyLEMS: using Python to combine procedural and declarative modeling approaches in computational\n                                     neuroscience. Frontiers in Neuroinformatics 8:38. DOI: https://doi.org/10.3389/fninf.2014.00038\n                                   Vella M, Gleeson P. 2023. Neurotune. 66ba110. GitHub. https://github.com/NeuralEnsemble/neurotune\n                                   Vervaeke K, Lőrincz A, Gleeson P, Farinella M, Nusser Z, Silver RA. 2010. Rapid desynchronization of an\n                                     electrically coupled interneuron network with sparse excitatory synaptic input. Neuron 67:435–451. DOI:\n                                     https://doi.org/10.1016/j.neuron.2010.06.028\n                                   Waltemath D, Adams R, Bergmann FT, Hucka M, Kolpakov F, Miller AK, Moraru II, Nickerson D, Sahle S,\n                                     Snoep JL, Le Novère N. 2011. Reproducible computational biology experiments with SED-\n                                                                                                                            ML--the simulation\n                                     experiment description markup language. BMC Systems Biology 5:198. DOI: https://doi.org/10.1186/\n                                     1752-0509-5-198, PMID: 22172142\n                                   Wang XJ, Buzsáki G. 1996. Gamma oscillation by synaptic inhibition in a hippocampal interneuronal network\n                                     model. The Journal of Neuroscience 16:6402–6413. DOI: https://doi.org/10.1523/JNEUROSCI.16-20-06402.\n                                     1996, PMID: 8815919\n                                   Wilkinson MD, Dumontier M, Aalbersberg IJJ, Appleton G, Axton M, Baak A, Blomberg N, Boiten JW,\n                                     da Silva Santos LB, Bourne PE, Bouwman J, Brookes AJ, Clark T, Crosas M, Dillo I, Dumon O, Edmunds S,\n                                     Evelo CT, Finkers R, Gonzalez-\n                                                                  Beltran A, et al. 2016. The FAIR guiding principles for scientiﬁc data\n                                     management and stewardship. Scientiﬁc Data 3:160018. DOI: https://doi.org/10.1038/sdata.2016.18, PMID:\n                                     26978244\n                                   Wilson HR, Cowan JD. 1972. Excitatory and inhibitory interactions in localized populations of model neurons.\n                                     Biophysical Journal 12:1–24. DOI: https://doi.org/10.1016/S0006-3495(72)86068-5, PMID: 4332108\n                                   Yao HK, Guet-\n                                                 McCreight A, Mazza F, Moradi Chameh H, Prevot TD, Grifﬁths JD, Tripathy SJ, Valiante TA,\n                                     Sibille E, Hay E. 2022. Reduced inhibition in depression impairs stimulus processing in human cortical\n                                     microcircuits. Cell Reports 38:110232. DOI: https://doi.org/10.1016/j.celrep.2021.110232, PMID: 35021088\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135                                                   44 of 44","md":"# Tools and resources\n\n# Neuroscience\n\nSivagnanam S. 2013. Introducing the Neuroscience Gateway. IWSG.\n\nSmith SL, Smith IT, Branco T, Häusser M. 2013. Dendritic spikes enhance stimulus selectivity in cortical neurons in vivo. Nature 503:115–120. DOI: https://doi.org/10.1038/nature12600, PMID: 24162850\n\nSolinas S, Forti L, Cesana E, Mapelli J, De Schutter E, D’Angelo E. 2007. Computational reconstruction of pacemaking and intrinsic electroresponsiveness in cerebellar Golgi cells. Frontiers in Cellular Neuroscience 1:2. DOI: https://doi.org/10.3389/neuro.03.002.2007, PMID: 18946520\n\nStimberg M, Brette R, Goodman DF. 2019. Brian 2, an intuitive and efficient neural simulator. eLife 8:e47314. DOI: https://doi.org/10.7554/eLife.47314\n\nTeeters JL, Godfrey K, Young R, Dang C, Friedsam C, Wark B, Asari H, Peron S, Li N, Peyrache A, Denisov G, Siegle JH, Olsen SR, Martin C, Chun M, Tripathy S, Blanche TJ, Harris K, Buzsáki G, Koch C, et al. 2015. Neurodata without borders: creating a common data format for neurophysiology. Neuron 88:629–634. DOI: https://doi.org/10.1016/j.neuron.2015.10.025\n\nTraub RD, Contreras D, Cunningham MO, Murray H, LeBeau FEN, Roopun A, Bibbig A, Wilent WB, Higley MJ, Whittington MA. 2005. Single-column thalamocortical network model exhibiting gamma oscillations, sleep spindles, and epileptogenic bursts. Journal of Neurophysiology 93:2194–2232. DOI: https://doi.org/10.1152/jn.00983.2004, PMID: 15525801\n\nVan Geit W, Gevaert M, Chindemi G, Rössert C, Courcol JD, Muller EB, Schürmann F, Segev I, Markram H. 2016. BluePyOpt: leveraging open source software and cloud infrastructure to optimise model parameters in neuroscience. Frontiers in Neuroinformatics 10:17. DOI: https://doi.org/10.3389/fninf.2016.00017, PMID: 27375471\n\nVella M, Cannon RC, Crook S, Davison AP, Ganapathy G, Robinson HPC, Silver RA, Gleeson P. 2014. libNeuroML and PyLEMS: using Python to combine procedural and declarative modeling approaches in computational neuroscience. Frontiers in Neuroinformatics 8:38. DOI: https://doi.org/10.3389/fninf.2014.00038\n\nVella M, Gleeson P. 2023. Neurotune. 66ba110. GitHub. https://github.com/NeuralEnsemble/neurotune\n\nVervaeke K, Lőrincz A, Gleeson P, Farinella M, Nusser Z, Silver RA. 2010. Rapid desynchronization of an electrically coupled interneuron network with sparse excitatory synaptic input. Neuron 67:435–451. DOI: https://doi.org/10.1016/j.neuron.2010.06.028\n\nWaltemath D, Adams R, Bergmann FT, Hucka M, Kolpakov F, Miller AK, Moraru II, Nickerson D, Sahle S, Snoep JL, Le Novère N. 2011. Reproducible computational biology experiments with SED-ML--the simulation-experiment description markup language. BMC Systems Biology 5:198. DOI: https://doi.org/10.1186/1752-0509-5-198, PMID: 22172142\n\nWang XJ, Buzsáki G. 1996. Gamma oscillation by synaptic inhibition in a hippocampal interneuronal network model. The Journal of Neuroscience 16:6402–6413. DOI: https://doi.org/10.1523/JNEUROSCI.16-20-06402.1996, PMID: 8815919\n\nWilkinson MD, Dumontier M, Aalbersberg IJJ, Appleton G, Axton M, Baak A, Blomberg N, Boiten JW, da Silva Santos LB, Bourne PE, Bouwman J, Brookes AJ, Clark T, Crosas M, Dillo I, Dumon O, Edmunds S, Evelo CT, Finkers R, Gonzalez-Beltran A, et al. 2016. The FAIR guiding principles for scientific data management and stewardship. Scientiﬁc Data 3:160018. DOI: https://doi.org/10.1038/sdata.2016.18, PMID: 26978244\n\nWilson HR, Cowan JD. 1972. Excitatory and inhibitory interactions in localized populations of model neurons. Biophysical Journal 12:1–24. DOI: https://doi.org/10.1016/S0006-3495(72)86068-5, PMID: 4332108\n\nYao HK, Guet-McCreight A, Mazza F, Moradi Chameh H, Prevot TD, Griffiths JD, Tripathy SJ, Valiante TA, Sibille E, Hay E. 2022. Reduced inhibition in depression impairs stimulus processing in human cortical microcircuits. Cell Reports 38:110232. DOI: https://doi.org/10.1016/j.celrep.2021.110232, PMID: 35021088\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","images":[],"charts":[],"items":[{"type":"heading","lvl":1,"value":"Tools and resources","md":"# Tools and resources","bBox":{"x":75.71,"y":34.79,"w":90.98,"h":8}},{"type":"heading","lvl":1,"value":"Neuroscience","md":"# Neuroscience","bBox":{"x":525.63,"y":34.63,"w":49,"h":8}},{"type":"text","value":"Sivagnanam S. 2013. Introducing the Neuroscience Gateway. IWSG.\n\nSmith SL, Smith IT, Branco T, Häusser M. 2013. Dendritic spikes enhance stimulus selectivity in cortical neurons in vivo. Nature 503:115–120. DOI: https://doi.org/10.1038/nature12600, PMID: 24162850\n\nSolinas S, Forti L, Cesana E, Mapelli J, De Schutter E, D’Angelo E. 2007. Computational reconstruction of pacemaking and intrinsic electroresponsiveness in cerebellar Golgi cells. Frontiers in Cellular Neuroscience 1:2. DOI: https://doi.org/10.3389/neuro.03.002.2007, PMID: 18946520\n\nStimberg M, Brette R, Goodman DF. 2019. Brian 2, an intuitive and efficient neural simulator. eLife 8:e47314. DOI: https://doi.org/10.7554/eLife.47314\n\nTeeters JL, Godfrey K, Young R, Dang C, Friedsam C, Wark B, Asari H, Peron S, Li N, Peyrache A, Denisov G, Siegle JH, Olsen SR, Martin C, Chun M, Tripathy S, Blanche TJ, Harris K, Buzsáki G, Koch C, et al. 2015. Neurodata without borders: creating a common data format for neurophysiology. Neuron 88:629–634. DOI: https://doi.org/10.1016/j.neuron.2015.10.025\n\nTraub RD, Contreras D, Cunningham MO, Murray H, LeBeau FEN, Roopun A, Bibbig A, Wilent WB, Higley MJ, Whittington MA. 2005. Single-column thalamocortical network model exhibiting gamma oscillations, sleep spindles, and epileptogenic bursts. Journal of Neurophysiology 93:2194–2232. DOI: https://doi.org/10.1152/jn.00983.2004, PMID: 15525801\n\nVan Geit W, Gevaert M, Chindemi G, Rössert C, Courcol JD, Muller EB, Schürmann F, Segev I, Markram H. 2016. BluePyOpt: leveraging open source software and cloud infrastructure to optimise model parameters in neuroscience. Frontiers in Neuroinformatics 10:17. DOI: https://doi.org/10.3389/fninf.2016.00017, PMID: 27375471\n\nVella M, Cannon RC, Crook S, Davison AP, Ganapathy G, Robinson HPC, Silver RA, Gleeson P. 2014. libNeuroML and PyLEMS: using Python to combine procedural and declarative modeling approaches in computational neuroscience. Frontiers in Neuroinformatics 8:38. DOI: https://doi.org/10.3389/fninf.2014.00038\n\nVella M, Gleeson P. 2023. Neurotune. 66ba110. GitHub. https://github.com/NeuralEnsemble/neurotune\n\nVervaeke K, Lőrincz A, Gleeson P, Farinella M, Nusser Z, Silver RA. 2010. Rapid desynchronization of an electrically coupled interneuron network with sparse excitatory synaptic input. Neuron 67:435–451. DOI: https://doi.org/10.1016/j.neuron.2010.06.028\n\nWaltemath D, Adams R, Bergmann FT, Hucka M, Kolpakov F, Miller AK, Moraru II, Nickerson D, Sahle S, Snoep JL, Le Novère N. 2011. Reproducible computational biology experiments with SED-ML--the simulation-experiment description markup language. BMC Systems Biology 5:198. DOI: https://doi.org/10.1186/1752-0509-5-198, PMID: 22172142\n\nWang XJ, Buzsáki G. 1996. Gamma oscillation by synaptic inhibition in a hippocampal interneuronal network model. The Journal of Neuroscience 16:6402–6413. DOI: https://doi.org/10.1523/JNEUROSCI.16-20-06402.1996, PMID: 8815919\n\nWilkinson MD, Dumontier M, Aalbersberg IJJ, Appleton G, Axton M, Baak A, Blomberg N, Boiten JW, da Silva Santos LB, Bourne PE, Bouwman J, Brookes AJ, Clark T, Crosas M, Dillo I, Dumon O, Edmunds S, Evelo CT, Finkers R, Gonzalez-Beltran A, et al. 2016. The FAIR guiding principles for scientific data management and stewardship. Scientiﬁc Data 3:160018. DOI: https://doi.org/10.1038/sdata.2016.18, PMID: 26978244\n\nWilson HR, Cowan JD. 1972. Excitatory and inhibitory interactions in localized populations of model neurons. Biophysical Journal 12:1–24. DOI: https://doi.org/10.1016/S0006-3495(72)86068-5, PMID: 4332108\n\nYao HK, Guet-McCreight A, Mazza F, Moradi Chameh H, Prevot TD, Griffiths JD, Tripathy SJ, Valiante TA, Sibille E, Hay E. 2022. Reduced inhibition in depression impairs stimulus processing in human cortical microcircuits. Cell Reports 38:110232. DOI: https://doi.org/10.1016/j.celrep.2021.110232, PMID: 35021088\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","md":"Sivagnanam S. 2013. Introducing the Neuroscience Gateway. IWSG.\n\nSmith SL, Smith IT, Branco T, Häusser M. 2013. Dendritic spikes enhance stimulus selectivity in cortical neurons in vivo. Nature 503:115–120. DOI: https://doi.org/10.1038/nature12600, PMID: 24162850\n\nSolinas S, Forti L, Cesana E, Mapelli J, De Schutter E, D’Angelo E. 2007. Computational reconstruction of pacemaking and intrinsic electroresponsiveness in cerebellar Golgi cells. Frontiers in Cellular Neuroscience 1:2. DOI: https://doi.org/10.3389/neuro.03.002.2007, PMID: 18946520\n\nStimberg M, Brette R, Goodman DF. 2019. Brian 2, an intuitive and efficient neural simulator. eLife 8:e47314. DOI: https://doi.org/10.7554/eLife.47314\n\nTeeters JL, Godfrey K, Young R, Dang C, Friedsam C, Wark B, Asari H, Peron S, Li N, Peyrache A, Denisov G, Siegle JH, Olsen SR, Martin C, Chun M, Tripathy S, Blanche TJ, Harris K, Buzsáki G, Koch C, et al. 2015. Neurodata without borders: creating a common data format for neurophysiology. Neuron 88:629–634. DOI: https://doi.org/10.1016/j.neuron.2015.10.025\n\nTraub RD, Contreras D, Cunningham MO, Murray H, LeBeau FEN, Roopun A, Bibbig A, Wilent WB, Higley MJ, Whittington MA. 2005. Single-column thalamocortical network model exhibiting gamma oscillations, sleep spindles, and epileptogenic bursts. Journal of Neurophysiology 93:2194–2232. DOI: https://doi.org/10.1152/jn.00983.2004, PMID: 15525801\n\nVan Geit W, Gevaert M, Chindemi G, Rössert C, Courcol JD, Muller EB, Schürmann F, Segev I, Markram H. 2016. BluePyOpt: leveraging open source software and cloud infrastructure to optimise model parameters in neuroscience. Frontiers in Neuroinformatics 10:17. DOI: https://doi.org/10.3389/fninf.2016.00017, PMID: 27375471\n\nVella M, Cannon RC, Crook S, Davison AP, Ganapathy G, Robinson HPC, Silver RA, Gleeson P. 2014. libNeuroML and PyLEMS: using Python to combine procedural and declarative modeling approaches in computational neuroscience. Frontiers in Neuroinformatics 8:38. DOI: https://doi.org/10.3389/fninf.2014.00038\n\nVella M, Gleeson P. 2023. Neurotune. 66ba110. GitHub. https://github.com/NeuralEnsemble/neurotune\n\nVervaeke K, Lőrincz A, Gleeson P, Farinella M, Nusser Z, Silver RA. 2010. Rapid desynchronization of an electrically coupled interneuron network with sparse excitatory synaptic input. Neuron 67:435–451. DOI: https://doi.org/10.1016/j.neuron.2010.06.028\n\nWaltemath D, Adams R, Bergmann FT, Hucka M, Kolpakov F, Miller AK, Moraru II, Nickerson D, Sahle S, Snoep JL, Le Novère N. 2011. Reproducible computational biology experiments with SED-ML--the simulation-experiment description markup language. BMC Systems Biology 5:198. DOI: https://doi.org/10.1186/1752-0509-5-198, PMID: 22172142\n\nWang XJ, Buzsáki G. 1996. Gamma oscillation by synaptic inhibition in a hippocampal interneuronal network model. The Journal of Neuroscience 16:6402–6413. DOI: https://doi.org/10.1523/JNEUROSCI.16-20-06402.1996, PMID: 8815919\n\nWilkinson MD, Dumontier M, Aalbersberg IJJ, Appleton G, Axton M, Baak A, Blomberg N, Boiten JW, da Silva Santos LB, Bourne PE, Bouwman J, Brookes AJ, Clark T, Crosas M, Dillo I, Dumon O, Edmunds S, Evelo CT, Finkers R, Gonzalez-Beltran A, et al. 2016. The FAIR guiding principles for scientific data management and stewardship. Scientiﬁc Data 3:160018. DOI: https://doi.org/10.1038/sdata.2016.18, PMID: 26978244\n\nWilson HR, Cowan JD. 1972. Excitatory and inhibitory interactions in localized populations of model neurons. Biophysical Journal 12:1–24. DOI: https://doi.org/10.1016/S0006-3495(72)86068-5, PMID: 4332108\n\nYao HK, Guet-McCreight A, Mazza F, Moradi Chameh H, Prevot TD, Griffiths JD, Tripathy SJ, Valiante TA, Sibille E, Hay E. 2022. Reduced inhibition in depression impairs stimulus processing in human cortical microcircuits. Cell Reports 38:110232. DOI: https://doi.org/10.1016/j.celrep.2021.110232, PMID: 35021088\n\nSinha, Gleeson et al. eLife 2024;13:RP95135. DOI: https://doi.org/10.7554/eLife.95135","bBox":{"x":168.53,"y":34.63,"w":407.74,"h":455.41}}],"status":"OK","originalOrientationAngle":0,"links":[{"url":"https://doi.org/10.7554/eLife.95135","text":""},{"url":"https://doi.org/10.1038/nature12600","text":", Forti L, Cesana E, Mapelli J, De Schutter E, D’Angelo E. 2007. Computational reconstruction of "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/24162850","text":", Forti L, Cesana E, Mapelli J, De Schutter E, D’Angelo E. 2007. Computational reconstruction of "},{"url":"https://doi.org/10.3389/neuro.03.002.2007","text":"Stimberg M"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/18946520","text":", Brette R, Goodman DF. 2019. Brian 2, an intuitive and efﬁcient neural simulator. "},{"url":"https://doi.org/10.7554/eLife.47314","text":"Teeters JL"},{"url":"https://doi.org/10.1016/j.neuron.2015.10.025","text":"https://doi.org/10.1016/j.neuron.2015.10.025 Traub RD"},{"url":"https://doi.org/10.1152/jn.00983.2004","text":" "},{"url":"https://doi.org/10.1152/jn.00983.2004","text":"jn.00983.2004, PMID: 15525801 Van Geit W"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/15525801","text":", Gevaert M, Chindemi G, Rössert C, Courcol JD, Muller EB, Schürmann F, Segev I, Markram H. 2016. "},{"url":"https://doi.org/10.3389/fninf.2016.00017","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/27375471","text":"27375471 Vella M"},{"url":"https://doi.org/10.3389/fninf.2014.00038","text":", Gleeson P. 2023. Neurotune. 66ba110. GitHub. https://github.com/NeuralEnsemble/neurotune"},{"url":"https://github.com/NeuralEnsemble/neurotune","text":"rincz A, Gleeson P, Farinella M, Nusser Z, Silver RA. 2010. Rapid desynchronization of an "},{"url":"https://doi.org/10.1016/j.neuron.2010.06.028","text":"https://doi.org/10.1016/j.neuron.2010.06.028 Waltemath D"},{"url":"https://doi.org/10.1186/1752-0509-5-198","text":" "},{"url":"https://doi.org/10.1186/1752-0509-5-198","text":"1752-0509-5-198, PMID: 22172142 Wang XJ"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/22172142","text":", Buzsáki G. 1996. Gamma oscillation by synaptic inhibition in a hippocampal interneuronal network "},{"url":"https://doi.org/10.1523/JNEUROSCI.16-20-06402.1996","text":" "},{"url":"https://doi.org/10.1523/JNEUROSCI.16-20-06402.1996","text":"1996, PMID: 8815919 Wilkinson MD"},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/8815919","text":", Dumontier M, Aalbersberg IJJ, Appleton G, Axton M, Baak A, Blomberg N, Boiten JW, "},{"url":"https://doi.org/10.1038/sdata.2016.18","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/26978244","text":"26978244 Wilson HR"},{"url":"https://doi.org/10.1016/S0006-3495(72)86068-5","text":"McCreight A, Mazza F, Moradi Chameh H, Prevot TD, Grifﬁths JD, Tripathy SJ, Valiante TA, "},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/4332108","text":"McCreight A, Mazza F, Moradi Chameh H, Prevot TD, Grifﬁths JD, Tripathy SJ, Valiante TA, "},{"url":"https://doi.org/10.1016/j.celrep.2021.110232","text":""},{"url":"http://www.ncbi.nlm.nih.gov/pubmed/35021088","text":""}],"width":612,"height":792,"triggeredAutoMode":false,"parsingMode":"accurate","structuredData":null,"noStructuredContent":false,"noTextContent":false,"confidence":0.993}],"job_metadata":{"credits_used":0,"job_credits_usage":0,"job_pages":44,"job_auto_mode_triggered_pages":0,"job_is_cache_hit":false}}